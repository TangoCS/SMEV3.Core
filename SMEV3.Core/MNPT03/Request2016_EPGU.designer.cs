// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.32989
//    <NameSpace>SMEV3.MNPT03</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>True</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace SMEV3.MNPT03
{
	using System;
	using System.Diagnostics;
	using System.Xml.Serialization;
	using System.Collections;
	using System.Xml.Schema;
	using System.ComponentModel;
	using System.IO;
	using System.Text;
	using System.Collections.Generic;


	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.minprom.gov.ru/schemas/gosuslugi/Request/1.0.3")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.minprom.gov.ru/schemas/gosuslugi/Request/1.0.3", IsNullable = false)]
	public partial class RequestData
	{

		private RequestDataApplicantProfile applicantProfileField;

		private RequestDataRequest requestField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public RequestData()
		{
			this.requestField = new RequestDataRequest();
			this.applicantProfileField = new RequestDataApplicantProfile();
		}

		public RequestDataApplicantProfile ApplicantProfile
		{
			get
			{
				return this.applicantProfileField;
			}
			set
			{
				this.applicantProfileField = value;
			}
		}

		public RequestDataRequest Request
		{
			get
			{
				return this.requestField;
			}
			set
			{
				this.requestField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(RequestData));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current RequestData object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an RequestData object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output RequestData object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out RequestData obj, out System.Exception exception)
		{
			exception = null;
			obj = default(RequestData);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out RequestData obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static RequestData Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((RequestData)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current RequestData object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an RequestData object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output RequestData object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out RequestData obj, out System.Exception exception)
		{
			exception = null;
			obj = default(RequestData);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out RequestData obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static RequestData LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.minprom.gov.ru/schemas/gosuslugi/Request/1.0.3")]
	public partial class RequestDataApplicantProfile
	{

		private string emailField;

		private string sNILSField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public string Email
		{
			get
			{
				return this.emailField;
			}
			set
			{
				this.emailField = value;
			}
		}

		public string SNILS
		{
			get
			{
				return this.sNILSField;
			}
			set
			{
				this.sNILSField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(RequestDataApplicantProfile));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current RequestDataApplicantProfile object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an RequestDataApplicantProfile object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output RequestDataApplicantProfile object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out RequestDataApplicantProfile obj, out System.Exception exception)
		{
			exception = null;
			obj = default(RequestDataApplicantProfile);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out RequestDataApplicantProfile obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static RequestDataApplicantProfile Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((RequestDataApplicantProfile)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current RequestDataApplicantProfile object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an RequestDataApplicantProfile object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output RequestDataApplicantProfile object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out RequestDataApplicantProfile obj, out System.Exception exception)
		{
			exception = null;
			obj = default(RequestDataApplicantProfile);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out RequestDataApplicantProfile obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static RequestDataApplicantProfile LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.minprom.gov.ru/schemas/gosuslugi/Request/1.0.3")]
	public partial class RequestDataRequest
	{

		private long orderIdField;

		private string cNCategoryCodeField;

		private string cNCategoryNameField;

		private System.DateTime createDateField;

		private System.DateTime dateFromField;

		private bool dateFromFieldSpecified;

		private System.DateTime dateToField;

		private bool dateToFieldSpecified;

		private RequestDataRequestLicType licTypeField;

		private RequestDataRequestLicOperation licOperationField;

		private string contractNoField;

		private System.DateTime contractDateField;

		private bool contractDateFieldSpecified;

		private string holderFullNameField;

		private string holderINNField;

		private string holderSurnameField;

		private string holderFirstnameField;

		private string holderPatronymicField;

		private string holderPasportSerialField;

		private string holderPasportNumberField;

		private string holderPasportAuthorityField;

		private System.DateTime holderPasportIssueDateField;

		private bool holderPasportIssueDateFieldSpecified;

		private string holderAddressField;

		private string holderPostField;

		private string holderPhoneField;

		private string dealerNameField;

		private string dealerAddressField;

		private string countryName7Field;

		private string countryAlpha27Field;

		private string dealerCountryNameField;

		private string dealerCountryAlpha2Field;

		private string contractCurrencyCodeField;

		private string contractCurrencyNameField;

		private float currencyCostField;

		private bool currencyCostFieldSpecified;

		private float statCostField;

		private string originCountryNameField;

		private string originCountryAlpha2Field;

		private float quantityField;

		private bool quantityFieldSpecified;

		private string measureNameField;

		private string measureCodeField;

		private float addQuantityField;

		private bool addQuantityFieldSpecified;

		private string addMeasureNameField;

		private string addMeasureCodeField;

		private string cNCodeField;

		private string cNDescriptionField;

		private string addInfoField;

		private List<RequestDataRequestDocument> reasonField;

		private string departmentCodeField;

		private string departmentShortNameField;

		private List<RequestDataRequestItem> addendumField;

		private bool canReissuranceField;

		private bool canReissuranceFieldSpecified;

		private string quotaCountryGroupField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public RequestDataRequest()
		{
			this.addendumField = new List<RequestDataRequestItem>();
			this.reasonField = new List<RequestDataRequestDocument>();
		}

		public long OrderId
		{
			get
			{
				return this.orderIdField;
			}
			set
			{
				this.orderIdField = value;
			}
		}

		public string CNCategoryCode
		{
			get
			{
				return this.cNCategoryCodeField;
			}
			set
			{
				this.cNCategoryCodeField = value;
			}
		}

		public string CNCategoryName
		{
			get
			{
				return this.cNCategoryNameField;
			}
			set
			{
				this.cNCategoryNameField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute(DataType = "date")]
		public System.DateTime CreateDate
		{
			get
			{
				return this.createDateField;
			}
			set
			{
				this.createDateField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute(DataType = "date")]
		public System.DateTime DateFrom
		{
			get
			{
				return this.dateFromField;
			}
			set
			{
				this.dateFromField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool DateFromSpecified
		{
			get
			{
				return this.dateFromFieldSpecified;
			}
			set
			{
				this.dateFromFieldSpecified = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute(DataType = "date")]
		public System.DateTime DateTo
		{
			get
			{
				return this.dateToField;
			}
			set
			{
				this.dateToField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool DateToSpecified
		{
			get
			{
				return this.dateToFieldSpecified;
			}
			set
			{
				this.dateToFieldSpecified = value;
			}
		}

		public RequestDataRequestLicType LicType
		{
			get
			{
				return this.licTypeField;
			}
			set
			{
				this.licTypeField = value;
			}
		}

		public RequestDataRequestLicOperation LicOperation
		{
			get
			{
				return this.licOperationField;
			}
			set
			{
				this.licOperationField = value;
			}
		}

		public string ContractNo
		{
			get
			{
				return this.contractNoField;
			}
			set
			{
				this.contractNoField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute(DataType = "date")]
		public System.DateTime ContractDate
		{
			get
			{
				return this.contractDateField;
			}
			set
			{
				this.contractDateField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool ContractDateSpecified
		{
			get
			{
				return this.contractDateFieldSpecified;
			}
			set
			{
				this.contractDateFieldSpecified = value;
			}
		}

		public string HolderFullName
		{
			get
			{
				return this.holderFullNameField;
			}
			set
			{
				this.holderFullNameField = value;
			}
		}

		public string HolderINN
		{
			get
			{
				return this.holderINNField;
			}
			set
			{
				this.holderINNField = value;
			}
		}

		public string HolderSurname
		{
			get
			{
				return this.holderSurnameField;
			}
			set
			{
				this.holderSurnameField = value;
			}
		}

		public string HolderFirstname
		{
			get
			{
				return this.holderFirstnameField;
			}
			set
			{
				this.holderFirstnameField = value;
			}
		}

		public string HolderPatronymic
		{
			get
			{
				return this.holderPatronymicField;
			}
			set
			{
				this.holderPatronymicField = value;
			}
		}

		public string HolderPasportSerial
		{
			get
			{
				return this.holderPasportSerialField;
			}
			set
			{
				this.holderPasportSerialField = value;
			}
		}

		public string HolderPasportNumber
		{
			get
			{
				return this.holderPasportNumberField;
			}
			set
			{
				this.holderPasportNumberField = value;
			}
		}

		public string HolderPasportAuthority
		{
			get
			{
				return this.holderPasportAuthorityField;
			}
			set
			{
				this.holderPasportAuthorityField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute(DataType = "date")]
		public System.DateTime HolderPasportIssueDate
		{
			get
			{
				return this.holderPasportIssueDateField;
			}
			set
			{
				this.holderPasportIssueDateField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool HolderPasportIssueDateSpecified
		{
			get
			{
				return this.holderPasportIssueDateFieldSpecified;
			}
			set
			{
				this.holderPasportIssueDateFieldSpecified = value;
			}
		}

		public string HolderAddress
		{
			get
			{
				return this.holderAddressField;
			}
			set
			{
				this.holderAddressField = value;
			}
		}

		public string HolderPost
		{
			get
			{
				return this.holderPostField;
			}
			set
			{
				this.holderPostField = value;
			}
		}

		public string HolderPhone
		{
			get
			{
				return this.holderPhoneField;
			}
			set
			{
				this.holderPhoneField = value;
			}
		}

		public string DealerName
		{
			get
			{
				return this.dealerNameField;
			}
			set
			{
				this.dealerNameField = value;
			}
		}

		public string DealerAddress
		{
			get
			{
				return this.dealerAddressField;
			}
			set
			{
				this.dealerAddressField = value;
			}
		}

		public string CountryName7
		{
			get
			{
				return this.countryName7Field;
			}
			set
			{
				this.countryName7Field = value;
			}
		}

		public string CountryAlpha27
		{
			get
			{
				return this.countryAlpha27Field;
			}
			set
			{
				this.countryAlpha27Field = value;
			}
		}

		public string DealerCountryName
		{
			get
			{
				return this.dealerCountryNameField;
			}
			set
			{
				this.dealerCountryNameField = value;
			}
		}

		public string DealerCountryAlpha2
		{
			get
			{
				return this.dealerCountryAlpha2Field;
			}
			set
			{
				this.dealerCountryAlpha2Field = value;
			}
		}

		public string ContractCurrencyCode
		{
			get
			{
				return this.contractCurrencyCodeField;
			}
			set
			{
				this.contractCurrencyCodeField = value;
			}
		}

		public string ContractCurrencyName
		{
			get
			{
				return this.contractCurrencyNameField;
			}
			set
			{
				this.contractCurrencyNameField = value;
			}
		}

		public float CurrencyCost
		{
			get
			{
				return this.currencyCostField;
			}
			set
			{
				this.currencyCostField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool CurrencyCostSpecified
		{
			get
			{
				return this.currencyCostFieldSpecified;
			}
			set
			{
				this.currencyCostFieldSpecified = value;
			}
		}

		public float StatCost
		{
			get
			{
				return this.statCostField;
			}
			set
			{
				this.statCostField = value;
			}
		}

		public string OriginCountryName
		{
			get
			{
				return this.originCountryNameField;
			}
			set
			{
				this.originCountryNameField = value;
			}
		}

		public string OriginCountryAlpha2
		{
			get
			{
				return this.originCountryAlpha2Field;
			}
			set
			{
				this.originCountryAlpha2Field = value;
			}
		}

		public float Quantity
		{
			get
			{
				return this.quantityField;
			}
			set
			{
				this.quantityField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool QuantitySpecified
		{
			get
			{
				return this.quantityFieldSpecified;
			}
			set
			{
				this.quantityFieldSpecified = value;
			}
		}

		public string MeasureName
		{
			get
			{
				return this.measureNameField;
			}
			set
			{
				this.measureNameField = value;
			}
		}

		public string MeasureCode
		{
			get
			{
				return this.measureCodeField;
			}
			set
			{
				this.measureCodeField = value;
			}
		}

		public float AddQuantity
		{
			get
			{
				return this.addQuantityField;
			}
			set
			{
				this.addQuantityField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool AddQuantitySpecified
		{
			get
			{
				return this.addQuantityFieldSpecified;
			}
			set
			{
				this.addQuantityFieldSpecified = value;
			}
		}

		public string AddMeasureName
		{
			get
			{
				return this.addMeasureNameField;
			}
			set
			{
				this.addMeasureNameField = value;
			}
		}

		public string AddMeasureCode
		{
			get
			{
				return this.addMeasureCodeField;
			}
			set
			{
				this.addMeasureCodeField = value;
			}
		}

		public string CNCode
		{
			get
			{
				return this.cNCodeField;
			}
			set
			{
				this.cNCodeField = value;
			}
		}

		public string CNDescription
		{
			get
			{
				return this.cNDescriptionField;
			}
			set
			{
				this.cNDescriptionField = value;
			}
		}

		public string AddInfo
		{
			get
			{
				return this.addInfoField;
			}
			set
			{
				this.addInfoField = value;
			}
		}

		[System.Xml.Serialization.XmlArrayItemAttribute("Document", IsNullable = false)]
		public List<RequestDataRequestDocument> Reason
		{
			get
			{
				return this.reasonField;
			}
			set
			{
				this.reasonField = value;
			}
		}

		public string DepartmentCode
		{
			get
			{
				return this.departmentCodeField;
			}
			set
			{
				this.departmentCodeField = value;
			}
		}

		public string DepartmentShortName
		{
			get
			{
				return this.departmentShortNameField;
			}
			set
			{
				this.departmentShortNameField = value;
			}
		}

		[System.Xml.Serialization.XmlArrayItemAttribute("Item", IsNullable = false)]
		public List<RequestDataRequestItem> Addendum
		{
			get
			{
				return this.addendumField;
			}
			set
			{
				this.addendumField = value;
			}
		}

		public bool CanReissurance
		{
			get
			{
				return this.canReissuranceField;
			}
			set
			{
				this.canReissuranceField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool CanReissuranceSpecified
		{
			get
			{
				return this.canReissuranceFieldSpecified;
			}
			set
			{
				this.canReissuranceFieldSpecified = value;
			}
		}

		public string QuotaCountryGroup
		{
			get
			{
				return this.quotaCountryGroupField;
			}
			set
			{
				this.quotaCountryGroupField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(RequestDataRequest));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current RequestDataRequest object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an RequestDataRequest object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output RequestDataRequest object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out RequestDataRequest obj, out System.Exception exception)
		{
			exception = null;
			obj = default(RequestDataRequest);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out RequestDataRequest obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static RequestDataRequest Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((RequestDataRequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current RequestDataRequest object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an RequestDataRequest object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output RequestDataRequest object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out RequestDataRequest obj, out System.Exception exception)
		{
			exception = null;
			obj = default(RequestDataRequest);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out RequestDataRequest obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static RequestDataRequest LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.minprom.gov.ru/schemas/gosuslugi/Request/1.0.3")]
	public enum RequestDataRequestLicType
	{

		/// <remarks/>
		Разовая,

		/// <remarks/>
		Генеральная,

		/// <remarks/>
		Исключительная,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.minprom.gov.ru/schemas/gosuslugi/Request/1.0.3")]
	public enum RequestDataRequestLicOperation
	{

		/// <remarks/>
		Импорт,

		/// <remarks/>
		Экспорт,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.minprom.gov.ru/schemas/gosuslugi/Request/1.0.3")]
	public partial class RequestDataRequestDocument
	{

		private string docCodeField;

		private string authorityField;

		private string docNameField;

		private string docNoField;

		private System.DateTime docDateField;

		private bool docDateFieldSpecified;

		private System.DateTime beginDateField;

		private bool beginDateFieldSpecified;

		private System.DateTime endDateField;

		private bool endDateFieldSpecified;

		private float resolvedQuantityField;

		private bool resolvedQuantityFieldSpecified;

		private string measureNameField;

		private string measureCodeField;

		private string attachmentRefField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public string DocCode
		{
			get
			{
				return this.docCodeField;
			}
			set
			{
				this.docCodeField = value;
			}
		}

		public string Authority
		{
			get
			{
				return this.authorityField;
			}
			set
			{
				this.authorityField = value;
			}
		}

		public string DocName
		{
			get
			{
				return this.docNameField;
			}
			set
			{
				this.docNameField = value;
			}
		}

		public string DocNo
		{
			get
			{
				return this.docNoField;
			}
			set
			{
				this.docNoField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute(DataType = "date")]
		public System.DateTime DocDate
		{
			get
			{
				return this.docDateField;
			}
			set
			{
				this.docDateField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool DocDateSpecified
		{
			get
			{
				return this.docDateFieldSpecified;
			}
			set
			{
				this.docDateFieldSpecified = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute(DataType = "date")]
		public System.DateTime BeginDate
		{
			get
			{
				return this.beginDateField;
			}
			set
			{
				this.beginDateField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool BeginDateSpecified
		{
			get
			{
				return this.beginDateFieldSpecified;
			}
			set
			{
				this.beginDateFieldSpecified = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute(DataType = "date")]
		public System.DateTime EndDate
		{
			get
			{
				return this.endDateField;
			}
			set
			{
				this.endDateField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool EndDateSpecified
		{
			get
			{
				return this.endDateFieldSpecified;
			}
			set
			{
				this.endDateFieldSpecified = value;
			}
		}

		public float ResolvedQuantity
		{
			get
			{
				return this.resolvedQuantityField;
			}
			set
			{
				this.resolvedQuantityField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool ResolvedQuantitySpecified
		{
			get
			{
				return this.resolvedQuantityFieldSpecified;
			}
			set
			{
				this.resolvedQuantityFieldSpecified = value;
			}
		}

		public string MeasureName
		{
			get
			{
				return this.measureNameField;
			}
			set
			{
				this.measureNameField = value;
			}
		}

		public string MeasureCode
		{
			get
			{
				return this.measureCodeField;
			}
			set
			{
				this.measureCodeField = value;
			}
		}

		public string AttachmentRef
		{
			get
			{
				return this.attachmentRefField;
			}
			set
			{
				this.attachmentRefField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(RequestDataRequestDocument));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current RequestDataRequestDocument object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an RequestDataRequestDocument object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output RequestDataRequestDocument object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out RequestDataRequestDocument obj, out System.Exception exception)
		{
			exception = null;
			obj = default(RequestDataRequestDocument);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out RequestDataRequestDocument obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static RequestDataRequestDocument Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((RequestDataRequestDocument)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current RequestDataRequestDocument object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an RequestDataRequestDocument object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output RequestDataRequestDocument object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out RequestDataRequestDocument obj, out System.Exception exception)
		{
			exception = null;
			obj = default(RequestDataRequestDocument);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out RequestDataRequestDocument obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static RequestDataRequestDocument LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.minprom.gov.ru/schemas/gosuslugi/Request/1.0.3")]
	public partial class RequestDataRequestItem
	{

		private string commodityNameField;

		private float costField;

		private float quantityField;

		private float addQuantityField;

		private bool addQuantityFieldSpecified;

		private string addMeasureNameField;

		private string addMeasureCodeField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public string CommodityName
		{
			get
			{
				return this.commodityNameField;
			}
			set
			{
				this.commodityNameField = value;
			}
		}

		public float Cost
		{
			get
			{
				return this.costField;
			}
			set
			{
				this.costField = value;
			}
		}

		public float Quantity
		{
			get
			{
				return this.quantityField;
			}
			set
			{
				this.quantityField = value;
			}
		}

		public float AddQuantity
		{
			get
			{
				return this.addQuantityField;
			}
			set
			{
				this.addQuantityField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool AddQuantitySpecified
		{
			get
			{
				return this.addQuantityFieldSpecified;
			}
			set
			{
				this.addQuantityFieldSpecified = value;
			}
		}

		public string AddMeasureName
		{
			get
			{
				return this.addMeasureNameField;
			}
			set
			{
				this.addMeasureNameField = value;
			}
		}

		public string AddMeasureCode
		{
			get
			{
				return this.addMeasureCodeField;
			}
			set
			{
				this.addMeasureCodeField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(RequestDataRequestItem));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current RequestDataRequestItem object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an RequestDataRequestItem object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output RequestDataRequestItem object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out RequestDataRequestItem obj, out System.Exception exception)
		{
			exception = null;
			obj = default(RequestDataRequestItem);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out RequestDataRequestItem obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static RequestDataRequestItem Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((RequestDataRequestItem)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current RequestDataRequestItem object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an RequestDataRequestItem object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output RequestDataRequestItem object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out RequestDataRequestItem obj, out System.Exception exception)
		{
			exception = null;
			obj = default(RequestDataRequestItem);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out RequestDataRequestItem obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static RequestDataRequestItem LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.minprom.gov.ru/schemas/gosuslugi/Request/1.0.3")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.minprom.gov.ru/schemas/gosuslugi/Request/1.0.3", IsNullable = false)]
	public partial class RequestDataResponse
	{

		private long orderIdField;

		private RequestDataResponseResult resultField;

		private RequestDataResponseResultCode resultCodeField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public RequestDataResponse()
		{
			this.resultField = new RequestDataResponseResult();
		}

		public long OrderId
		{
			get
			{
				return this.orderIdField;
			}
			set
			{
				this.orderIdField = value;
			}
		}

		public RequestDataResponseResult Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		public RequestDataResponseResultCode ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(RequestDataResponse));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current RequestDataResponse object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an RequestDataResponse object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output RequestDataResponse object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out RequestDataResponse obj, out System.Exception exception)
		{
			exception = null;
			obj = default(RequestDataResponse);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out RequestDataResponse obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static RequestDataResponse Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((RequestDataResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current RequestDataResponse object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an RequestDataResponse object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output RequestDataResponse object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out RequestDataResponse obj, out System.Exception exception)
		{
			exception = null;
			obj = default(RequestDataResponse);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out RequestDataResponse obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static RequestDataResponse LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.minprom.gov.ru/schemas/gosuslugi/Request/1.0.3")]
	public partial class RequestDataResponseResult
	{

		private object itemField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlElementAttribute("License", typeof(RequestDataResponseResultLicense))]
		[System.Xml.Serialization.XmlElementAttribute("Refusal", typeof(RequestDataResponseResultRefusal))]
		public object Item
		{
			get
			{
				return this.itemField;
			}
			set
			{
				this.itemField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(RequestDataResponseResult));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current RequestDataResponseResult object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an RequestDataResponseResult object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output RequestDataResponseResult object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out RequestDataResponseResult obj, out System.Exception exception)
		{
			exception = null;
			obj = default(RequestDataResponseResult);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out RequestDataResponseResult obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static RequestDataResponseResult Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((RequestDataResponseResult)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current RequestDataResponseResult object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an RequestDataResponseResult object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output RequestDataResponseResult object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out RequestDataResponseResult obj, out System.Exception exception)
		{
			exception = null;
			obj = default(RequestDataResponseResult);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out RequestDataResponseResult obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static RequestDataResponseResult LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.minprom.gov.ru/schemas/gosuslugi/Request/1.0.3")]
	public partial class RequestDataResponseResultLicense
	{

		private string licenseFileField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public string LicenseFile
		{
			get
			{
				return this.licenseFileField;
			}
			set
			{
				this.licenseFileField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(RequestDataResponseResultLicense));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current RequestDataResponseResultLicense object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an RequestDataResponseResultLicense object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output RequestDataResponseResultLicense object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out RequestDataResponseResultLicense obj, out System.Exception exception)
		{
			exception = null;
			obj = default(RequestDataResponseResultLicense);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out RequestDataResponseResultLicense obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static RequestDataResponseResultLicense Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((RequestDataResponseResultLicense)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current RequestDataResponseResultLicense object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an RequestDataResponseResultLicense object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output RequestDataResponseResultLicense object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out RequestDataResponseResultLicense obj, out System.Exception exception)
		{
			exception = null;
			obj = default(RequestDataResponseResultLicense);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out RequestDataResponseResultLicense obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static RequestDataResponseResultLicense LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.minprom.gov.ru/schemas/gosuslugi/Request/1.0.3")]
	public partial class RequestDataResponseResultRefusal
	{

		private string reasonField;

		private string notificationFileField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public string Reason
		{
			get
			{
				return this.reasonField;
			}
			set
			{
				this.reasonField = value;
			}
		}

		public string NotificationFile
		{
			get
			{
				return this.notificationFileField;
			}
			set
			{
				this.notificationFileField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(RequestDataResponseResultRefusal));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current RequestDataResponseResultRefusal object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an RequestDataResponseResultRefusal object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output RequestDataResponseResultRefusal object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out RequestDataResponseResultRefusal obj, out System.Exception exception)
		{
			exception = null;
			obj = default(RequestDataResponseResultRefusal);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out RequestDataResponseResultRefusal obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static RequestDataResponseResultRefusal Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((RequestDataResponseResultRefusal)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current RequestDataResponseResultRefusal object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an RequestDataResponseResultRefusal object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output RequestDataResponseResultRefusal object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out RequestDataResponseResultRefusal obj, out System.Exception exception)
		{
			exception = null;
			obj = default(RequestDataResponseResultRefusal);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out RequestDataResponseResultRefusal obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static RequestDataResponseResultRefusal LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.minprom.gov.ru/schemas/gosuslugi/Request/1.0.3")]
	public enum RequestDataResponseResultCode
	{

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("3")]
		Item3,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("4")]
		Item4,
	}
}

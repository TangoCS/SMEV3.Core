// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.32989
//    <NameSpace>SMEV3.FNS001.fnszvipip</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>True</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace SMEV3.FNS001.fnszvipip
{
	using System;
	using System.Diagnostics;
	using System.Xml.Serialization;
	using System.Collections;
	using System.Xml.Schema;
	using System.ComponentModel;
	using System.IO;
	using System.Text;
	using System.Collections.Generic;


	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6", IsNullable = false)]
	public partial class FNSZvipIPRequest
	{

		private FNSZvipIPRequestЗапросИП запросИПField;

		private string идДокField;

		private string номерДелаField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSZvipIPRequest()
		{
			this.запросИПField = new FNSZvipIPRequestЗапросИП();
		}

		public FNSZvipIPRequestЗапросИП ЗапросИП
		{
			get
			{
				return this.запросИПField;
			}
			set
			{
				this.запросИПField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ИдДок
		{
			get
			{
				return this.идДокField;
			}
			set
			{
				this.идДокField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НомерДела
		{
			get
			{
				return this.номерДелаField;
			}
			set
			{
				this.номерДелаField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPRequest));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPRequest object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPRequest object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPRequest object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPRequest obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPRequest);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPRequest obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPRequest Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPRequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPRequest object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPRequest object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPRequest object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPRequest obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPRequest);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPRequest obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPRequest LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public partial class FNSZvipIPRequestЗапросИП
	{

		private string itemField;

		private ItemChoiceType itemElementNameField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlElementAttribute("ИНН", typeof(string))]
		[System.Xml.Serialization.XmlElementAttribute("ОГРНИП", typeof(string))]
		[System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
		public string Item
		{
			get
			{
				return this.itemField;
			}
			set
			{
				this.itemField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public ItemChoiceType ItemElementName
		{
			get
			{
				return this.itemElementNameField;
			}
			set
			{
				this.itemElementNameField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPRequestЗапросИП));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPRequestЗапросИП object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPRequestЗапросИП object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPRequestЗапросИП object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPRequestЗапросИП obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPRequestЗапросИП);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPRequestЗапросИП obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPRequestЗапросИП Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPRequestЗапросИП)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPRequestЗапросИП object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPRequestЗапросИП object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPRequestЗапросИП object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPRequestЗапросИП obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPRequestЗапросИП);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPRequestЗапросИП obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPRequestЗапросИП LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6", IncludeInSchema = false)]
	public enum ItemChoiceType
	{

		/// <remarks/>
		ИНН,

		/// <remarks/>
		ОГРНИП,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6", IsNullable = false)]
	public partial class FNSZvipIPResponse
	{

		private object itemField;

		private string идДокField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlElementAttribute("КодОбр", typeof(string))]
		[System.Xml.Serialization.XmlElementAttribute("СвИП", typeof(FNSZvipIPResponseСвИП))]
		public object Item
		{
			get
			{
				return this.itemField;
			}
			set
			{
				this.itemField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ИдДок
		{
			get
			{
				return this.идДокField;
			}
			set
			{
				this.идДокField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPResponse));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPResponse object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPResponse object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponse object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPResponse obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponse);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPResponse obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPResponse Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPResponse object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPResponse object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponse object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPResponse obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponse);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPResponse obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPResponse LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public partial class FNSZvipIPResponseСвИП
	{

		private FNSZvipIPResponseСвИПСвФЛ свФЛField;

		private FNSZvipIPResponseСвИПСвРожд свРождField;

		private FNSZvipIPResponseСвИПСвГражд свГраждField;

		private FNSZvipIPResponseСвИПСвУдЛичнФЛ свУдЛичнФЛField;

		private FNSZvipIPResponseСвИПСвПравЖитРФ свПравЖитРФField;

		private FNSZvipIPResponseСвИПСвАдрМЖ свАдрМЖField;

		private FNSZvipIPResponseСвИПСвАдрЭлПочты свАдрЭлПочтыField;

		private FNSZvipIPResponseСвИПСвРегИП свРегИПField;

		private FNSZvipIPResponseСвИПСвРегОрг свРегОргField;

		private FNSZvipIPResponseСвИПСвСтатус свСтатусField;

		private FNSZvipIPResponseСвИПСвПрекращ свПрекращField;

		private FNSZvipIPResponseСвИПСвУчетНО свУчетНОField;

		private FNSZvipIPResponseСвИПСвРегПФ свРегПФField;

		private FNSZvipIPResponseСвИПСвРегФСС свРегФССField;

		private FNSZvipIPResponseСвИПСвОКВЭД свОКВЭДField;

		private List<FNSZvipIPResponseСвИПСвЛицензия> свЛицензияField;

		private List<FNSZvipIPResponseСвИПСвЗапЕГРИП> свЗапЕГРИПField;

		private System.DateTime датаВыпField;

		private string оГРНИПField;

		private System.DateTime датаОГРНИПField;

		private string иННФЛField;

		private FNSZvipIPResponseСвИПКодВидИП кодВидИПField;

		private string наимВидИПField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSZvipIPResponseСвИП()
		{
			this.свЗапЕГРИПField = new List<FNSZvipIPResponseСвИПСвЗапЕГРИП>();
			this.свЛицензияField = new List<FNSZvipIPResponseСвИПСвЛицензия>();
			this.свОКВЭДField = new FNSZvipIPResponseСвИПСвОКВЭД();
			this.свРегФССField = new FNSZvipIPResponseСвИПСвРегФСС();
			this.свРегПФField = new FNSZvipIPResponseСвИПСвРегПФ();
			this.свУчетНОField = new FNSZvipIPResponseСвИПСвУчетНО();
			this.свПрекращField = new FNSZvipIPResponseСвИПСвПрекращ();
			this.свСтатусField = new FNSZvipIPResponseСвИПСвСтатус();
			this.свРегОргField = new FNSZvipIPResponseСвИПСвРегОрг();
			this.свРегИПField = new FNSZvipIPResponseСвИПСвРегИП();
			this.свАдрЭлПочтыField = new FNSZvipIPResponseСвИПСвАдрЭлПочты();
			this.свАдрМЖField = new FNSZvipIPResponseСвИПСвАдрМЖ();
			this.свПравЖитРФField = new FNSZvipIPResponseСвИПСвПравЖитРФ();
			this.свУдЛичнФЛField = new FNSZvipIPResponseСвИПСвУдЛичнФЛ();
			this.свГраждField = new FNSZvipIPResponseСвИПСвГражд();
			this.свРождField = new FNSZvipIPResponseСвИПСвРожд();
			this.свФЛField = new FNSZvipIPResponseСвИПСвФЛ();
		}

		public FNSZvipIPResponseСвИПСвФЛ СвФЛ
		{
			get
			{
				return this.свФЛField;
			}
			set
			{
				this.свФЛField = value;
			}
		}

		public FNSZvipIPResponseСвИПСвРожд СвРожд
		{
			get
			{
				return this.свРождField;
			}
			set
			{
				this.свРождField = value;
			}
		}

		public FNSZvipIPResponseСвИПСвГражд СвГражд
		{
			get
			{
				return this.свГраждField;
			}
			set
			{
				this.свГраждField = value;
			}
		}

		public FNSZvipIPResponseСвИПСвУдЛичнФЛ СвУдЛичнФЛ
		{
			get
			{
				return this.свУдЛичнФЛField;
			}
			set
			{
				this.свУдЛичнФЛField = value;
			}
		}

		public FNSZvipIPResponseСвИПСвПравЖитРФ СвПравЖитРФ
		{
			get
			{
				return this.свПравЖитРФField;
			}
			set
			{
				this.свПравЖитРФField = value;
			}
		}

		public FNSZvipIPResponseСвИПСвАдрМЖ СвАдрМЖ
		{
			get
			{
				return this.свАдрМЖField;
			}
			set
			{
				this.свАдрМЖField = value;
			}
		}

		public FNSZvipIPResponseСвИПСвАдрЭлПочты СвАдрЭлПочты
		{
			get
			{
				return this.свАдрЭлПочтыField;
			}
			set
			{
				this.свАдрЭлПочтыField = value;
			}
		}

		public FNSZvipIPResponseСвИПСвРегИП СвРегИП
		{
			get
			{
				return this.свРегИПField;
			}
			set
			{
				this.свРегИПField = value;
			}
		}

		public FNSZvipIPResponseСвИПСвРегОрг СвРегОрг
		{
			get
			{
				return this.свРегОргField;
			}
			set
			{
				this.свРегОргField = value;
			}
		}

		public FNSZvipIPResponseСвИПСвСтатус СвСтатус
		{
			get
			{
				return this.свСтатусField;
			}
			set
			{
				this.свСтатусField = value;
			}
		}

		public FNSZvipIPResponseСвИПСвПрекращ СвПрекращ
		{
			get
			{
				return this.свПрекращField;
			}
			set
			{
				this.свПрекращField = value;
			}
		}

		public FNSZvipIPResponseСвИПСвУчетНО СвУчетНО
		{
			get
			{
				return this.свУчетНОField;
			}
			set
			{
				this.свУчетНОField = value;
			}
		}

		public FNSZvipIPResponseСвИПСвРегПФ СвРегПФ
		{
			get
			{
				return this.свРегПФField;
			}
			set
			{
				this.свРегПФField = value;
			}
		}

		public FNSZvipIPResponseСвИПСвРегФСС СвРегФСС
		{
			get
			{
				return this.свРегФССField;
			}
			set
			{
				this.свРегФССField = value;
			}
		}

		public FNSZvipIPResponseСвИПСвОКВЭД СвОКВЭД
		{
			get
			{
				return this.свОКВЭДField;
			}
			set
			{
				this.свОКВЭДField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвЛицензия")]
		public List<FNSZvipIPResponseСвИПСвЛицензия> СвЛицензия
		{
			get
			{
				return this.свЛицензияField;
			}
			set
			{
				this.свЛицензияField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвЗапЕГРИП")]
		public List<FNSZvipIPResponseСвИПСвЗапЕГРИП> СвЗапЕГРИП
		{
			get
			{
				return this.свЗапЕГРИПField;
			}
			set
			{
				this.свЗапЕГРИПField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаВып
		{
			get
			{
				return this.датаВыпField;
			}
			set
			{
				this.датаВыпField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ОГРНИП
		{
			get
			{
				return this.оГРНИПField;
			}
			set
			{
				this.оГРНИПField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаОГРНИП
		{
			get
			{
				return this.датаОГРНИПField;
			}
			set
			{
				this.датаОГРНИПField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ИННФЛ
		{
			get
			{
				return this.иННФЛField;
			}
			set
			{
				this.иННФЛField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public FNSZvipIPResponseСвИПКодВидИП КодВидИП
		{
			get
			{
				return this.кодВидИПField;
			}
			set
			{
				this.кодВидИПField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимВидИП
		{
			get
			{
				return this.наимВидИПField;
			}
			set
			{
				this.наимВидИПField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPResponseСвИП));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИП object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPResponseСвИП object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИП object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИП obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИП);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИП obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИП Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPResponseСвИП)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИП object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPResponseСвИП object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИП object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИП obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИП);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИП obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИП LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public partial class FNSZvipIPResponseСвИПСвФЛ
	{

		private ФИО1Тип фИОРусField;

		private ФИО1Тип фИОЛатField;

		private ГРНИПДатаТип гРНИПДатаField;

		private ГРНИПДатаТип гРНИПДатаИспрField;

		private FNSZvipIPResponseСвИПСвФЛПол полField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSZvipIPResponseСвИПСвФЛ()
		{
			this.гРНИПДатаИспрField = new ГРНИПДатаТип();
			this.гРНИПДатаField = new ГРНИПДатаТип();
			this.фИОЛатField = new ФИО1Тип();
			this.фИОРусField = new ФИО1Тип();
		}

		public ФИО1Тип ФИОРус
		{
			get
			{
				return this.фИОРусField;
			}
			set
			{
				this.фИОРусField = value;
			}
		}

		public ФИО1Тип ФИОЛат
		{
			get
			{
				return this.фИОЛатField;
			}
			set
			{
				this.фИОЛатField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДатаИспр
		{
			get
			{
				return this.гРНИПДатаИспрField;
			}
			set
			{
				this.гРНИПДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public FNSZvipIPResponseСвИПСвФЛПол Пол
		{
			get
			{
				return this.полField;
			}
			set
			{
				this.полField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPResponseСвИПСвФЛ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвФЛ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPResponseСвИПСвФЛ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвФЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвФЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвФЛ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвФЛ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвФЛ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPResponseСвИПСвФЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвФЛ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPResponseСвИПСвФЛ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвФЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвФЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвФЛ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвФЛ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвФЛ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/zvipip-types/4.0.6")]
	public partial class ФИО1Тип
	{

		private string фамилияField;

		private string имяField;

		private string отчествоField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string Фамилия
		{
			get
			{
				return this.фамилияField;
			}
			set
			{
				this.фамилияField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string Имя
		{
			get
			{
				return this.имяField;
			}
			set
			{
				this.имяField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string Отчество
		{
			get
			{
				return this.отчествоField;
			}
			set
			{
				this.отчествоField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФИО1Тип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current ФИО1Тип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an ФИО1Тип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output ФИО1Тип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out ФИО1Тип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ФИО1Тип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out ФИО1Тип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static ФИО1Тип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((ФИО1Тип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current ФИО1Тип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an ФИО1Тип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output ФИО1Тип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out ФИО1Тип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ФИО1Тип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out ФИО1Тип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static ФИО1Тип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/zvipip-types/4.0.6")]
	public partial class ГРНИПДатаТип
	{

		private string гРНИПField;

		private System.DateTime датаЗаписиField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ГРНИП
		{
			get
			{
				return this.гРНИПField;
			}
			set
			{
				this.гРНИПField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаЗаписи
		{
			get
			{
				return this.датаЗаписиField;
			}
			set
			{
				this.датаЗаписиField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(ГРНИПДатаТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current ГРНИПДатаТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an ГРНИПДатаТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output ГРНИПДатаТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out ГРНИПДатаТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ГРНИПДатаТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out ГРНИПДатаТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static ГРНИПДатаТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((ГРНИПДатаТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current ГРНИПДатаТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an ГРНИПДатаТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output ГРНИПДатаТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out ГРНИПДатаТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ГРНИПДатаТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out ГРНИПДатаТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static ГРНИПДатаТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public enum FNSZvipIPResponseСвИПСвФЛПол
	{

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("1")]
		Item1,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("2")]
		Item2,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public partial class FNSZvipIPResponseСвИПСвРожд
	{

		private ГРНИПДатаТип гРНИПДатаField;

		private ГРНИПДатаТип гРНИПДатаИспрField;

		private System.DateTime датаРождField;

		private string местоРождField;

		private FNSZvipIPResponseСвИПСвРождПрДатаРожд прДатаРождField;

		private bool прДатаРождFieldSpecified;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSZvipIPResponseСвИПСвРожд()
		{
			this.гРНИПДатаИспрField = new ГРНИПДатаТип();
			this.гРНИПДатаField = new ГРНИПДатаТип();
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДатаИспр
		{
			get
			{
				return this.гРНИПДатаИспрField;
			}
			set
			{
				this.гРНИПДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаРожд
		{
			get
			{
				return this.датаРождField;
			}
			set
			{
				this.датаРождField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string МестоРожд
		{
			get
			{
				return this.местоРождField;
			}
			set
			{
				this.местоРождField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public FNSZvipIPResponseСвИПСвРождПрДатаРожд ПрДатаРожд
		{
			get
			{
				return this.прДатаРождField;
			}
			set
			{
				this.прДатаРождField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool ПрДатаРождSpecified
		{
			get
			{
				return this.прДатаРождFieldSpecified;
			}
			set
			{
				this.прДатаРождFieldSpecified = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPResponseСвИПСвРожд));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвРожд object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPResponseСвИПСвРожд object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвРожд object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвРожд obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвРожд);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвРожд obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвРожд Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPResponseСвИПСвРожд)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвРожд object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPResponseСвИПСвРожд object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвРожд object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвРожд obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвРожд);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвРожд obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвРожд LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public enum FNSZvipIPResponseСвИПСвРождПрДатаРожд
	{

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("1")]
		Item1,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("2")]
		Item2,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("3")]
		Item3,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public partial class FNSZvipIPResponseСвИПСвГражд
	{

		private ГРНИПДатаТип гРНИПДатаField;

		private ГРНИПДатаТип гРНИПДатаИспрField;

		private FNSZvipIPResponseСвИПСвГраждВидГражд видГраждField;

		private string оКСМField;

		private string наимСтранField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSZvipIPResponseСвИПСвГражд()
		{
			this.гРНИПДатаИспрField = new ГРНИПДатаТип();
			this.гРНИПДатаField = new ГРНИПДатаТип();
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДатаИспр
		{
			get
			{
				return this.гРНИПДатаИспрField;
			}
			set
			{
				this.гРНИПДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public FNSZvipIPResponseСвИПСвГраждВидГражд ВидГражд
		{
			get
			{
				return this.видГраждField;
			}
			set
			{
				this.видГраждField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ОКСМ
		{
			get
			{
				return this.оКСМField;
			}
			set
			{
				this.оКСМField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимСтран
		{
			get
			{
				return this.наимСтранField;
			}
			set
			{
				this.наимСтранField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPResponseСвИПСвГражд));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвГражд object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPResponseСвИПСвГражд object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвГражд object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвГражд obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвГражд);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвГражд obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвГражд Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPResponseСвИПСвГражд)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвГражд object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPResponseСвИПСвГражд object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвГражд object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвГражд obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвГражд);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвГражд obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвГражд LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public enum FNSZvipIPResponseСвИПСвГраждВидГражд
	{

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("1")]
		Item1,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("2")]
		Item2,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("3")]
		Item3,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public partial class FNSZvipIPResponseСвИПСвУдЛичнФЛ
	{

		private УдЛичнТипР удЛичнФЛField;

		private ГРНИПДатаТип гРНИПДатаField;

		private ГРНИПДатаТип гРНИПДатаИспрField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSZvipIPResponseСвИПСвУдЛичнФЛ()
		{
			this.гРНИПДатаИспрField = new ГРНИПДатаТип();
			this.гРНИПДатаField = new ГРНИПДатаТип();
			this.удЛичнФЛField = new УдЛичнТипР();
		}

		public УдЛичнТипР УдЛичнФЛ
		{
			get
			{
				return this.удЛичнФЛField;
			}
			set
			{
				this.удЛичнФЛField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДатаИспр
		{
			get
			{
				return this.гРНИПДатаИспрField;
			}
			set
			{
				this.гРНИПДатаИспрField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPResponseСвИПСвУдЛичнФЛ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвУдЛичнФЛ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPResponseСвИПСвУдЛичнФЛ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвУдЛичнФЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвУдЛичнФЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвУдЛичнФЛ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвУдЛичнФЛ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвУдЛичнФЛ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPResponseСвИПСвУдЛичнФЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвУдЛичнФЛ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPResponseСвИПСвУдЛичнФЛ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвУдЛичнФЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвУдЛичнФЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвУдЛичнФЛ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвУдЛичнФЛ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвУдЛичнФЛ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/zvipip-types/4.0.6")]
	public partial class УдЛичнТипР
	{

		private string кодВидДокField;

		private string наимДокField;

		private string серНомДокField;

		private System.DateTime датаДокField;

		private bool датаДокFieldSpecified;

		private string выдДокField;

		private string кодВыдДокField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодВидДок
		{
			get
			{
				return this.кодВидДокField;
			}
			set
			{
				this.кодВидДокField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимДок
		{
			get
			{
				return this.наимДокField;
			}
			set
			{
				this.наимДокField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string СерНомДок
		{
			get
			{
				return this.серНомДокField;
			}
			set
			{
				this.серНомДокField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаДок
		{
			get
			{
				return this.датаДокField;
			}
			set
			{
				this.датаДокField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool ДатаДокSpecified
		{
			get
			{
				return this.датаДокFieldSpecified;
			}
			set
			{
				this.датаДокFieldSpecified = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ВыдДок
		{
			get
			{
				return this.выдДокField;
			}
			set
			{
				this.выдДокField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодВыдДок
		{
			get
			{
				return this.кодВыдДокField;
			}
			set
			{
				this.кодВыдДокField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(УдЛичнТипР));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current УдЛичнТипР object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an УдЛичнТипР object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output УдЛичнТипР object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out УдЛичнТипР obj, out System.Exception exception)
		{
			exception = null;
			obj = default(УдЛичнТипР);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out УдЛичнТипР obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static УдЛичнТипР Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((УдЛичнТипР)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current УдЛичнТипР object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an УдЛичнТипР object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output УдЛичнТипР object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out УдЛичнТипР obj, out System.Exception exception)
		{
			exception = null;
			obj = default(УдЛичнТипР);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out УдЛичнТипР obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static УдЛичнТипР LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public partial class FNSZvipIPResponseСвИПСвПравЖитРФ
	{

		private УдЛичнТипР докПравЖитРФField;

		private ГРНИПДатаТип гРНИПДатаField;

		private ГРНИПДатаТип гРНИПДатаИспрField;

		private System.DateTime срокДействДокField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSZvipIPResponseСвИПСвПравЖитРФ()
		{
			this.гРНИПДатаИспрField = new ГРНИПДатаТип();
			this.гРНИПДатаField = new ГРНИПДатаТип();
			this.докПравЖитРФField = new УдЛичнТипР();
		}

		public УдЛичнТипР ДокПравЖитРФ
		{
			get
			{
				return this.докПравЖитРФField;
			}
			set
			{
				this.докПравЖитРФField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДатаИспр
		{
			get
			{
				return this.гРНИПДатаИспрField;
			}
			set
			{
				this.гРНИПДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime СрокДействДок
		{
			get
			{
				return this.срокДействДокField;
			}
			set
			{
				this.срокДействДокField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPResponseСвИПСвПравЖитРФ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвПравЖитРФ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPResponseСвИПСвПравЖитРФ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвПравЖитРФ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвПравЖитРФ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвПравЖитРФ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвПравЖитРФ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвПравЖитРФ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPResponseСвИПСвПравЖитРФ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвПравЖитРФ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPResponseСвИПСвПравЖитРФ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвПравЖитРФ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвПравЖитРФ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвПравЖитРФ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвПравЖитРФ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвПравЖитРФ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public partial class FNSZvipIPResponseСвИПСвАдрМЖ
	{

		private АдрРФТипВып адресРФField;

		private ГРНИПДатаТип гРНИПДатаField;

		private ГРНИПДатаТип гРНИПДатаИспрField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSZvipIPResponseСвИПСвАдрМЖ()
		{
			this.гРНИПДатаИспрField = new ГРНИПДатаТип();
			this.гРНИПДатаField = new ГРНИПДатаТип();
			this.адресРФField = new АдрРФТипВып();
		}

		public АдрРФТипВып АдресРФ
		{
			get
			{
				return this.адресРФField;
			}
			set
			{
				this.адресРФField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДатаИспр
		{
			get
			{
				return this.гРНИПДатаИспрField;
			}
			set
			{
				this.гРНИПДатаИспрField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPResponseСвИПСвАдрМЖ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвАдрМЖ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPResponseСвИПСвАдрМЖ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвАдрМЖ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвАдрМЖ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвАдрМЖ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвАдрМЖ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвАдрМЖ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPResponseСвИПСвАдрМЖ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвАдрМЖ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPResponseСвИПСвАдрМЖ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвАдрМЖ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвАдрМЖ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвАдрМЖ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвАдрМЖ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвАдрМЖ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/zvipip-types/4.0.6")]
	public partial class АдрРФТипВып
	{

		private РегионТип регионField;

		private РайонТип районField;

		private ГородТип городField;

		private НаселПунктТип населПунктField;

		private УлицаТип улицаField;

		private string индексField;

		private string кодРегионField;

		private string кодАдрКладрField;

		private string домField;

		private string корпусField;

		private string квартField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public АдрРФТипВып()
		{
			this.улицаField = new УлицаТип();
			this.населПунктField = new НаселПунктТип();
			this.городField = new ГородТип();
			this.районField = new РайонТип();
			this.регионField = new РегионТип();
		}

		public РегионТип Регион
		{
			get
			{
				return this.регионField;
			}
			set
			{
				this.регионField = value;
			}
		}

		public РайонТип Район
		{
			get
			{
				return this.районField;
			}
			set
			{
				this.районField = value;
			}
		}

		public ГородТип Город
		{
			get
			{
				return this.городField;
			}
			set
			{
				this.городField = value;
			}
		}

		public НаселПунктТип НаселПункт
		{
			get
			{
				return this.населПунктField;
			}
			set
			{
				this.населПунктField = value;
			}
		}

		public УлицаТип Улица
		{
			get
			{
				return this.улицаField;
			}
			set
			{
				this.улицаField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string Индекс
		{
			get
			{
				return this.индексField;
			}
			set
			{
				this.индексField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодРегион
		{
			get
			{
				return this.кодРегионField;
			}
			set
			{
				this.кодРегионField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодАдрКладр
		{
			get
			{
				return this.кодАдрКладрField;
			}
			set
			{
				this.кодАдрКладрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string Дом
		{
			get
			{
				return this.домField;
			}
			set
			{
				this.домField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string Корпус
		{
			get
			{
				return this.корпусField;
			}
			set
			{
				this.корпусField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string Кварт
		{
			get
			{
				return this.квартField;
			}
			set
			{
				this.квартField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(АдрРФТипВып));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current АдрРФТипВып object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an АдрРФТипВып object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output АдрРФТипВып object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out АдрРФТипВып obj, out System.Exception exception)
		{
			exception = null;
			obj = default(АдрРФТипВып);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out АдрРФТипВып obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static АдрРФТипВып Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((АдрРФТипВып)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current АдрРФТипВып object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an АдрРФТипВып object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output АдрРФТипВып object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out АдрРФТипВып obj, out System.Exception exception)
		{
			exception = null;
			obj = default(АдрРФТипВып);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out АдрРФТипВып obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static АдрРФТипВып LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/zvipip-types/4.0.6")]
	public partial class РегионТип
	{

		private string типРегионField;

		private string наимРегионField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ТипРегион
		{
			get
			{
				return this.типРегионField;
			}
			set
			{
				this.типРегионField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимРегион
		{
			get
			{
				return this.наимРегионField;
			}
			set
			{
				this.наимРегионField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(РегионТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current РегионТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an РегионТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output РегионТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out РегионТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(РегионТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out РегионТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static РегионТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((РегионТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current РегионТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an РегионТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output РегионТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out РегионТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(РегионТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out РегионТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static РегионТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/zvipip-types/4.0.6")]
	public partial class РайонТип
	{

		private string типРайонField;

		private string наимРайонField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ТипРайон
		{
			get
			{
				return this.типРайонField;
			}
			set
			{
				this.типРайонField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимРайон
		{
			get
			{
				return this.наимРайонField;
			}
			set
			{
				this.наимРайонField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(РайонТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current РайонТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an РайонТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output РайонТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out РайонТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(РайонТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out РайонТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static РайонТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((РайонТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current РайонТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an РайонТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output РайонТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out РайонТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(РайонТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out РайонТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static РайонТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/zvipip-types/4.0.6")]
	public partial class ГородТип
	{

		private string типГородField;

		private string наимГородField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ТипГород
		{
			get
			{
				return this.типГородField;
			}
			set
			{
				this.типГородField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимГород
		{
			get
			{
				return this.наимГородField;
			}
			set
			{
				this.наимГородField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(ГородТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current ГородТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an ГородТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output ГородТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out ГородТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ГородТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out ГородТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static ГородТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((ГородТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current ГородТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an ГородТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output ГородТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out ГородТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ГородТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out ГородТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static ГородТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/zvipip-types/4.0.6")]
	public partial class НаселПунктТип
	{

		private string типНаселПунктField;

		private string наимНаселПунктField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ТипНаселПункт
		{
			get
			{
				return this.типНаселПунктField;
			}
			set
			{
				this.типНаселПунктField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимНаселПункт
		{
			get
			{
				return this.наимНаселПунктField;
			}
			set
			{
				this.наимНаселПунктField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(НаселПунктТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current НаселПунктТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an НаселПунктТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output НаселПунктТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out НаселПунктТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(НаселПунктТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out НаселПунктТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static НаселПунктТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((НаселПунктТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current НаселПунктТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an НаселПунктТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output НаселПунктТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out НаселПунктТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(НаселПунктТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out НаселПунктТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static НаселПунктТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/zvipip-types/4.0.6")]
	public partial class УлицаТип
	{

		private string типУлицаField;

		private string наимУлицаField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ТипУлица
		{
			get
			{
				return this.типУлицаField;
			}
			set
			{
				this.типУлицаField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимУлица
		{
			get
			{
				return this.наимУлицаField;
			}
			set
			{
				this.наимУлицаField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(УлицаТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current УлицаТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an УлицаТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output УлицаТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out УлицаТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(УлицаТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out УлицаТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static УлицаТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((УлицаТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current УлицаТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an УлицаТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output УлицаТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out УлицаТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(УлицаТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out УлицаТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static УлицаТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public partial class FNSZvipIPResponseСвИПСвАдрЭлПочты
	{

		private ГРНИПДатаТип гРНИПДатаField;

		private ГРНИПДатаТип гРНИПДатаИспрField;

		private string emailField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSZvipIPResponseСвИПСвАдрЭлПочты()
		{
			this.гРНИПДатаИспрField = new ГРНИПДатаТип();
			this.гРНИПДатаField = new ГРНИПДатаТип();
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДатаИспр
		{
			get
			{
				return this.гРНИПДатаИспрField;
			}
			set
			{
				this.гРНИПДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute("E-mail")]
		public string Email
		{
			get
			{
				return this.emailField;
			}
			set
			{
				this.emailField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPResponseСвИПСвАдрЭлПочты));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвАдрЭлПочты object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPResponseСвИПСвАдрЭлПочты object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвАдрЭлПочты object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвАдрЭлПочты obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвАдрЭлПочты);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвАдрЭлПочты obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвАдрЭлПочты Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPResponseСвИПСвАдрЭлПочты)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвАдрЭлПочты object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPResponseСвИПСвАдрЭлПочты object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвАдрЭлПочты object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвАдрЭлПочты obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвАдрЭлПочты);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвАдрЭлПочты obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвАдрЭлПочты LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public partial class FNSZvipIPResponseСвИПСвРегИП
	{

		private FNSZvipIPResponseСвИПСвРегИПСвКФХ свКФХField;

		private string оГРНИПField;

		private System.DateTime датаОГРНИПField;

		private string регНомField;

		private System.DateTime датаРегField;

		private bool датаРегFieldSpecified;

		private string наимРОField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSZvipIPResponseСвИПСвРегИП()
		{
			this.свКФХField = new FNSZvipIPResponseСвИПСвРегИПСвКФХ();
		}

		public FNSZvipIPResponseСвИПСвРегИПСвКФХ СвКФХ
		{
			get
			{
				return this.свКФХField;
			}
			set
			{
				this.свКФХField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ОГРНИП
		{
			get
			{
				return this.оГРНИПField;
			}
			set
			{
				this.оГРНИПField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаОГРНИП
		{
			get
			{
				return this.датаОГРНИПField;
			}
			set
			{
				this.датаОГРНИПField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string РегНом
		{
			get
			{
				return this.регНомField;
			}
			set
			{
				this.регНомField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаРег
		{
			get
			{
				return this.датаРегField;
			}
			set
			{
				this.датаРегField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool ДатаРегSpecified
		{
			get
			{
				return this.датаРегFieldSpecified;
			}
			set
			{
				this.датаРегFieldSpecified = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимРО
		{
			get
			{
				return this.наимРОField;
			}
			set
			{
				this.наимРОField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPResponseСвИПСвРегИП));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвРегИП object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPResponseСвИПСвРегИП object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвРегИП object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвРегИП obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвРегИП);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвРегИП obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвРегИП Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPResponseСвИПСвРегИП)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвРегИП object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPResponseСвИПСвРегИП object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвРегИП object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвРегИП obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвРегИП);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвРегИП obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвРегИП LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public partial class FNSZvipIPResponseСвИПСвРегИПСвКФХ
	{

		private ГРНИПДатаТип гРНИПДатаField;

		private ГРНИПДатаТип гРНИПДатаИспрField;

		private string оГРНField;

		private string иННField;

		private string наимЮЛПолнField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSZvipIPResponseСвИПСвРегИПСвКФХ()
		{
			this.гРНИПДатаИспрField = new ГРНИПДатаТип();
			this.гРНИПДатаField = new ГРНИПДатаТип();
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДатаИспр
		{
			get
			{
				return this.гРНИПДатаИспрField;
			}
			set
			{
				this.гРНИПДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ОГРН
		{
			get
			{
				return this.оГРНField;
			}
			set
			{
				this.оГРНField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ИНН
		{
			get
			{
				return this.иННField;
			}
			set
			{
				this.иННField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимЮЛПолн
		{
			get
			{
				return this.наимЮЛПолнField;
			}
			set
			{
				this.наимЮЛПолнField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPResponseСвИПСвРегИПСвКФХ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвРегИПСвКФХ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPResponseСвИПСвРегИПСвКФХ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвРегИПСвКФХ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвРегИПСвКФХ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвРегИПСвКФХ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвРегИПСвКФХ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвРегИПСвКФХ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPResponseСвИПСвРегИПСвКФХ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвРегИПСвКФХ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPResponseСвИПСвРегИПСвКФХ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвРегИПСвКФХ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвРегИПСвКФХ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвРегИПСвКФХ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвРегИПСвКФХ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвРегИПСвКФХ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public partial class FNSZvipIPResponseСвИПСвРегОрг
	{

		private ГРНИПДатаТип гРНИПДатаField;

		private string кодНОField;

		private string наимНОField;

		private string адрРОField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSZvipIPResponseСвИПСвРегОрг()
		{
			this.гРНИПДатаField = new ГРНИПДатаТип();
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодНО
		{
			get
			{
				return this.кодНОField;
			}
			set
			{
				this.кодНОField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимНО
		{
			get
			{
				return this.наимНОField;
			}
			set
			{
				this.наимНОField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string АдрРО
		{
			get
			{
				return this.адрРОField;
			}
			set
			{
				this.адрРОField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPResponseСвИПСвРегОрг));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвРегОрг object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPResponseСвИПСвРегОрг object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвРегОрг object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвРегОрг obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвРегОрг);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвРегОрг obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвРегОрг Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPResponseСвИПСвРегОрг)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвРегОрг object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPResponseСвИПСвРегОрг object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвРегОрг object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвРегОрг obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвРегОрг);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвРегОрг obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвРегОрг LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public partial class FNSZvipIPResponseСвИПСвСтатус
	{

		private FNSZvipIPResponseСвИПСвСтатусСвСтатус свСтатусField;

		private ГРНИПДатаТип гРНИПДатаField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSZvipIPResponseСвИПСвСтатус()
		{
			this.гРНИПДатаField = new ГРНИПДатаТип();
			this.свСтатусField = new FNSZvipIPResponseСвИПСвСтатусСвСтатус();
		}

		public FNSZvipIPResponseСвИПСвСтатусСвСтатус СвСтатус
		{
			get
			{
				return this.свСтатусField;
			}
			set
			{
				this.свСтатусField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPResponseСвИПСвСтатус));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвСтатус object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPResponseСвИПСвСтатус object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвСтатус object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвСтатус obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвСтатус);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвСтатус obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвСтатус Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPResponseСвИПСвСтатус)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвСтатус object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPResponseСвИПСвСтатус object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвСтатус object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвСтатус obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвСтатус);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвСтатус obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвСтатус LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public partial class FNSZvipIPResponseСвИПСвСтатусСвСтатус
	{

		private FNSZvipIPResponseСвИПСвСтатусСвСтатусКодСтатус кодСтатусField;

		private string наимСтатусField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public FNSZvipIPResponseСвИПСвСтатусСвСтатусКодСтатус КодСтатус
		{
			get
			{
				return this.кодСтатусField;
			}
			set
			{
				this.кодСтатусField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимСтатус
		{
			get
			{
				return this.наимСтатусField;
			}
			set
			{
				this.наимСтатусField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPResponseСвИПСвСтатусСвСтатус));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвСтатусСвСтатус object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPResponseСвИПСвСтатусСвСтатус object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвСтатусСвСтатус object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвСтатусСвСтатус obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвСтатусСвСтатус);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвСтатусСвСтатус obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвСтатусСвСтатус Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPResponseСвИПСвСтатусСвСтатус)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвСтатусСвСтатус object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPResponseСвИПСвСтатусСвСтатус object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвСтатусСвСтатус object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвСтатусСвСтатус obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвСтатусСвСтатус);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвСтатусСвСтатус obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвСтатусСвСтатус LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public enum FNSZvipIPResponseСвИПСвСтатусСвСтатусКодСтатус
	{

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("101")]
		Item101,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("102")]
		Item102,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("103")]
		Item103,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("104")]
		Item104,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public partial class FNSZvipIPResponseСвИПСвПрекращ
	{

		private FNSZvipIPResponseСвИПСвПрекращСвСтатус свСтатусField;

		private ГРНИПДатаТип гРНИПДатаField;

		private FNSZvipIPResponseСвИПСвПрекращСвНовЮЛ свНовЮЛField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSZvipIPResponseСвИПСвПрекращ()
		{
			this.свНовЮЛField = new FNSZvipIPResponseСвИПСвПрекращСвНовЮЛ();
			this.гРНИПДатаField = new ГРНИПДатаТип();
			this.свСтатусField = new FNSZvipIPResponseСвИПСвПрекращСвСтатус();
		}

		public FNSZvipIPResponseСвИПСвПрекращСвСтатус СвСтатус
		{
			get
			{
				return this.свСтатусField;
			}
			set
			{
				this.свСтатусField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		public FNSZvipIPResponseСвИПСвПрекращСвНовЮЛ СвНовЮЛ
		{
			get
			{
				return this.свНовЮЛField;
			}
			set
			{
				this.свНовЮЛField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPResponseСвИПСвПрекращ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвПрекращ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPResponseСвИПСвПрекращ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвПрекращ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвПрекращ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвПрекращ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвПрекращ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвПрекращ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPResponseСвИПСвПрекращ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвПрекращ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPResponseСвИПСвПрекращ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвПрекращ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвПрекращ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвПрекращ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвПрекращ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвПрекращ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public partial class FNSZvipIPResponseСвИПСвПрекращСвСтатус
	{

		private string кодСтатусField;

		private string наимСтатусField;

		private System.DateTime датаПрекращField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодСтатус
		{
			get
			{
				return this.кодСтатусField;
			}
			set
			{
				this.кодСтатусField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимСтатус
		{
			get
			{
				return this.наимСтатусField;
			}
			set
			{
				this.наимСтатусField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаПрекращ
		{
			get
			{
				return this.датаПрекращField;
			}
			set
			{
				this.датаПрекращField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPResponseСвИПСвПрекращСвСтатус));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвПрекращСвСтатус object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPResponseСвИПСвПрекращСвСтатус object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвПрекращСвСтатус object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвПрекращСвСтатус obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвПрекращСвСтатус);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвПрекращСвСтатус obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвПрекращСвСтатус Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPResponseСвИПСвПрекращСвСтатус)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвПрекращСвСтатус object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPResponseСвИПСвПрекращСвСтатус object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвПрекращСвСтатус object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвПрекращСвСтатус obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвПрекращСвСтатус);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвПрекращСвСтатус obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвПрекращСвСтатус LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public partial class FNSZvipIPResponseСвИПСвПрекращСвНовЮЛ
	{

		private ГРНИПДатаТип гРНИПДатаField;

		private ГРНИПДатаТип гРНИПДатаИспрField;

		private string оГРНField;

		private string иННField;

		private string наимЮЛПолнField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSZvipIPResponseСвИПСвПрекращСвНовЮЛ()
		{
			this.гРНИПДатаИспрField = new ГРНИПДатаТип();
			this.гРНИПДатаField = new ГРНИПДатаТип();
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДатаИспр
		{
			get
			{
				return this.гРНИПДатаИспрField;
			}
			set
			{
				this.гРНИПДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ОГРН
		{
			get
			{
				return this.оГРНField;
			}
			set
			{
				this.оГРНField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ИНН
		{
			get
			{
				return this.иННField;
			}
			set
			{
				this.иННField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимЮЛПолн
		{
			get
			{
				return this.наимЮЛПолнField;
			}
			set
			{
				this.наимЮЛПолнField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPResponseСвИПСвПрекращСвНовЮЛ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвПрекращСвНовЮЛ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPResponseСвИПСвПрекращСвНовЮЛ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвПрекращСвНовЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвПрекращСвНовЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвПрекращСвНовЮЛ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвПрекращСвНовЮЛ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвПрекращСвНовЮЛ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPResponseСвИПСвПрекращСвНовЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвПрекращСвНовЮЛ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPResponseСвИПСвПрекращСвНовЮЛ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвПрекращСвНовЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвПрекращСвНовЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвПрекращСвНовЮЛ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвПрекращСвНовЮЛ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвПрекращСвНовЮЛ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public partial class FNSZvipIPResponseСвИПСвУчетНО
	{

		private FNSZvipIPResponseСвИПСвУчетНОСвНО свНОField;

		private ГРНИПДатаТип гРНИПДатаField;

		private ГРНИПДатаТип гРНИПДатаИспрField;

		private string иННФЛField;

		private System.DateTime датаПостУчField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSZvipIPResponseСвИПСвУчетНО()
		{
			this.гРНИПДатаИспрField = new ГРНИПДатаТип();
			this.гРНИПДатаField = new ГРНИПДатаТип();
			this.свНОField = new FNSZvipIPResponseСвИПСвУчетНОСвНО();
		}

		public FNSZvipIPResponseСвИПСвУчетНОСвНО СвНО
		{
			get
			{
				return this.свНОField;
			}
			set
			{
				this.свНОField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДатаИспр
		{
			get
			{
				return this.гРНИПДатаИспрField;
			}
			set
			{
				this.гРНИПДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ИННФЛ
		{
			get
			{
				return this.иННФЛField;
			}
			set
			{
				this.иННФЛField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаПостУч
		{
			get
			{
				return this.датаПостУчField;
			}
			set
			{
				this.датаПостУчField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPResponseСвИПСвУчетНО));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвУчетНО object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPResponseСвИПСвУчетНО object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвУчетНО object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвУчетНО obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвУчетНО);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвУчетНО obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвУчетНО Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPResponseСвИПСвУчетНО)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвУчетНО object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPResponseСвИПСвУчетНО object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвУчетНО object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвУчетНО obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвУчетНО);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвУчетНО obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвУчетНО LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public partial class FNSZvipIPResponseСвИПСвУчетНОСвНО
	{

		private string кодНОField;

		private string наимНОField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодНО
		{
			get
			{
				return this.кодНОField;
			}
			set
			{
				this.кодНОField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимНО
		{
			get
			{
				return this.наимНОField;
			}
			set
			{
				this.наимНОField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPResponseСвИПСвУчетНОСвНО));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвУчетНОСвНО object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPResponseСвИПСвУчетНОСвНО object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвУчетНОСвНО object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвУчетНОСвНО obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвУчетНОСвНО);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвУчетНОСвНО obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвУчетНОСвНО Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPResponseСвИПСвУчетНОСвНО)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвУчетНОСвНО object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPResponseСвИПСвУчетНОСвНО object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвУчетНОСвНО object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвУчетНОСвНО obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвУчетНОСвНО);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвУчетНОСвНО obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвУчетНОСвНО LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public partial class FNSZvipIPResponseСвИПСвРегПФ
	{

		private FNSZvipIPResponseСвИПСвРегПФСвОргПФ свОргПФField;

		private ГРНИПДатаТип гРНИПДатаField;

		private ГРНИПДатаТип гРНИПДатаИспрField;

		private string регНомПФField;

		private System.DateTime датаРегField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSZvipIPResponseСвИПСвРегПФ()
		{
			this.гРНИПДатаИспрField = new ГРНИПДатаТип();
			this.гРНИПДатаField = new ГРНИПДатаТип();
			this.свОргПФField = new FNSZvipIPResponseСвИПСвРегПФСвОргПФ();
		}

		public FNSZvipIPResponseСвИПСвРегПФСвОргПФ СвОргПФ
		{
			get
			{
				return this.свОргПФField;
			}
			set
			{
				this.свОргПФField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДатаИспр
		{
			get
			{
				return this.гРНИПДатаИспрField;
			}
			set
			{
				this.гРНИПДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string РегНомПФ
		{
			get
			{
				return this.регНомПФField;
			}
			set
			{
				this.регНомПФField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаРег
		{
			get
			{
				return this.датаРегField;
			}
			set
			{
				this.датаРегField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPResponseСвИПСвРегПФ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвРегПФ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPResponseСвИПСвРегПФ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвРегПФ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвРегПФ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвРегПФ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвРегПФ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвРегПФ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPResponseСвИПСвРегПФ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвРегПФ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPResponseСвИПСвРегПФ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвРегПФ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвРегПФ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвРегПФ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвРегПФ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвРегПФ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public partial class FNSZvipIPResponseСвИПСвРегПФСвОргПФ
	{

		private string кодПФField;

		private string наимПФField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодПФ
		{
			get
			{
				return this.кодПФField;
			}
			set
			{
				this.кодПФField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимПФ
		{
			get
			{
				return this.наимПФField;
			}
			set
			{
				this.наимПФField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPResponseСвИПСвРегПФСвОргПФ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвРегПФСвОргПФ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPResponseСвИПСвРегПФСвОргПФ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвРегПФСвОргПФ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвРегПФСвОргПФ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвРегПФСвОргПФ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвРегПФСвОргПФ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвРегПФСвОргПФ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPResponseСвИПСвРегПФСвОргПФ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвРегПФСвОргПФ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPResponseСвИПСвРегПФСвОргПФ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвРегПФСвОргПФ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвРегПФСвОргПФ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвРегПФСвОргПФ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвРегПФСвОргПФ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвРегПФСвОргПФ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public partial class FNSZvipIPResponseСвИПСвРегФСС
	{

		private FNSZvipIPResponseСвИПСвРегФСССвОргФСС свОргФССField;

		private ГРНИПДатаТип гРНИПДатаField;

		private ГРНИПДатаТип гРНИПДатаИспрField;

		private string регНомФССField;

		private System.DateTime датаРегField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSZvipIPResponseСвИПСвРегФСС()
		{
			this.гРНИПДатаИспрField = new ГРНИПДатаТип();
			this.гРНИПДатаField = new ГРНИПДатаТип();
			this.свОргФССField = new FNSZvipIPResponseСвИПСвРегФСССвОргФСС();
		}

		public FNSZvipIPResponseСвИПСвРегФСССвОргФСС СвОргФСС
		{
			get
			{
				return this.свОргФССField;
			}
			set
			{
				this.свОргФССField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДатаИспр
		{
			get
			{
				return this.гРНИПДатаИспрField;
			}
			set
			{
				this.гРНИПДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string РегНомФСС
		{
			get
			{
				return this.регНомФССField;
			}
			set
			{
				this.регНомФССField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаРег
		{
			get
			{
				return this.датаРегField;
			}
			set
			{
				this.датаРегField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPResponseСвИПСвРегФСС));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвРегФСС object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPResponseСвИПСвРегФСС object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвРегФСС object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвРегФСС obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвРегФСС);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвРегФСС obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвРегФСС Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPResponseСвИПСвРегФСС)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвРегФСС object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPResponseСвИПСвРегФСС object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвРегФСС object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвРегФСС obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвРегФСС);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвРегФСС obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвРегФСС LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public partial class FNSZvipIPResponseСвИПСвРегФСССвОргФСС
	{

		private string кодФССField;

		private string наимФССField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодФСС
		{
			get
			{
				return this.кодФССField;
			}
			set
			{
				this.кодФССField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимФСС
		{
			get
			{
				return this.наимФССField;
			}
			set
			{
				this.наимФССField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPResponseСвИПСвРегФСССвОргФСС));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвРегФСССвОргФСС object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPResponseСвИПСвРегФСССвОргФСС object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвРегФСССвОргФСС object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвРегФСССвОргФСС obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвРегФСССвОргФСС);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвРегФСССвОргФСС obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвРегФСССвОргФСС Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPResponseСвИПСвРегФСССвОргФСС)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвРегФСССвОргФСС object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPResponseСвИПСвРегФСССвОргФСС object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвРегФСССвОргФСС object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвРегФСССвОргФСС obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвРегФСССвОргФСС);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвРегФСССвОргФСС obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвРегФСССвОргФСС LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public partial class FNSZvipIPResponseСвИПСвОКВЭД
	{

		private СвОКВЭДТип свОКВЭДОснField;

		private List<СвОКВЭДТип> свОКВЭДДопField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSZvipIPResponseСвИПСвОКВЭД()
		{
			this.свОКВЭДДопField = new List<СвОКВЭДТип>();
			this.свОКВЭДОснField = new СвОКВЭДТип();
		}

		public СвОКВЭДТип СвОКВЭДОсн
		{
			get
			{
				return this.свОКВЭДОснField;
			}
			set
			{
				this.свОКВЭДОснField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвОКВЭДДоп")]
		public List<СвОКВЭДТип> СвОКВЭДДоп
		{
			get
			{
				return this.свОКВЭДДопField;
			}
			set
			{
				this.свОКВЭДДопField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPResponseСвИПСвОКВЭД));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвОКВЭД object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPResponseСвИПСвОКВЭД object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвОКВЭД object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвОКВЭД obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвОКВЭД);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвОКВЭД obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвОКВЭД Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPResponseСвИПСвОКВЭД)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвОКВЭД object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPResponseСвИПСвОКВЭД object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвОКВЭД object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвОКВЭД obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвОКВЭД);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвОКВЭД obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвОКВЭД LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/zvipip-types/4.0.6")]
	public partial class СвОКВЭДТип
	{

		private ГРНИПДатаТип гРНИПДатаField;

		private ГРНИПДатаТип гРНИПДатаИспрField;

		private string кодОКВЭДField;

		private string наимОКВЭДField;

		private СвОКВЭДТипПрВерсОКВЭД прВерсОКВЭДField;

		private bool прВерсОКВЭДFieldSpecified;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public СвОКВЭДТип()
		{
			this.гРНИПДатаИспрField = new ГРНИПДатаТип();
			this.гРНИПДатаField = new ГРНИПДатаТип();
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДатаИспр
		{
			get
			{
				return this.гРНИПДатаИспрField;
			}
			set
			{
				this.гРНИПДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодОКВЭД
		{
			get
			{
				return this.кодОКВЭДField;
			}
			set
			{
				this.кодОКВЭДField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимОКВЭД
		{
			get
			{
				return this.наимОКВЭДField;
			}
			set
			{
				this.наимОКВЭДField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public СвОКВЭДТипПрВерсОКВЭД ПрВерсОКВЭД
		{
			get
			{
				return this.прВерсОКВЭДField;
			}
			set
			{
				this.прВерсОКВЭДField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool ПрВерсОКВЭДSpecified
		{
			get
			{
				return this.прВерсОКВЭДFieldSpecified;
			}
			set
			{
				this.прВерсОКВЭДFieldSpecified = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвОКВЭДТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current СвОКВЭДТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an СвОКВЭДТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output СвОКВЭДТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out СвОКВЭДТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвОКВЭДТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out СвОКВЭДТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static СвОКВЭДТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((СвОКВЭДТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current СвОКВЭДТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an СвОКВЭДТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output СвОКВЭДТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out СвОКВЭДТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвОКВЭДТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out СвОКВЭДТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static СвОКВЭДТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns/zvipip-types/4.0.6")]
	public enum СвОКВЭДТипПрВерсОКВЭД
	{

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("2001")]
		Item2001,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("2014")]
		Item2014,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public partial class FNSZvipIPResponseСвИПСвЛицензия
	{

		private List<string> наимЛицВидДеятField;

		private List<string> местоДейстЛицField;

		private string лицОргВыдЛицField;

		private ГРНИПДатаТип гРНИПДатаField;

		private ГРНИПДатаТип гРНИПДатаИспрField;

		private FNSZvipIPResponseСвИПСвЛицензияСвПриостЛиц свПриостЛицField;

		private string номЛицField;

		private System.DateTime датаЛицField;

		private System.DateTime датаНачЛицField;

		private System.DateTime датаОкончЛицField;

		private bool датаОкончЛицFieldSpecified;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSZvipIPResponseСвИПСвЛицензия()
		{
			this.свПриостЛицField = new FNSZvipIPResponseСвИПСвЛицензияСвПриостЛиц();
			this.гРНИПДатаИспрField = new ГРНИПДатаТип();
			this.гРНИПДатаField = new ГРНИПДатаТип();
			this.местоДейстЛицField = new List<string>();
			this.наимЛицВидДеятField = new List<string>();
		}

		[System.Xml.Serialization.XmlElementAttribute("НаимЛицВидДеят")]
		public List<string> НаимЛицВидДеят
		{
			get
			{
				return this.наимЛицВидДеятField;
			}
			set
			{
				this.наимЛицВидДеятField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("МестоДейстЛиц")]
		public List<string> МестоДейстЛиц
		{
			get
			{
				return this.местоДейстЛицField;
			}
			set
			{
				this.местоДейстЛицField = value;
			}
		}

		public string ЛицОргВыдЛиц
		{
			get
			{
				return this.лицОргВыдЛицField;
			}
			set
			{
				this.лицОргВыдЛицField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДатаИспр
		{
			get
			{
				return this.гРНИПДатаИспрField;
			}
			set
			{
				this.гРНИПДатаИспрField = value;
			}
		}

		public FNSZvipIPResponseСвИПСвЛицензияСвПриостЛиц СвПриостЛиц
		{
			get
			{
				return this.свПриостЛицField;
			}
			set
			{
				this.свПриостЛицField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НомЛиц
		{
			get
			{
				return this.номЛицField;
			}
			set
			{
				this.номЛицField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаЛиц
		{
			get
			{
				return this.датаЛицField;
			}
			set
			{
				this.датаЛицField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаНачЛиц
		{
			get
			{
				return this.датаНачЛицField;
			}
			set
			{
				this.датаНачЛицField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаОкончЛиц
		{
			get
			{
				return this.датаОкончЛицField;
			}
			set
			{
				this.датаОкончЛицField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool ДатаОкончЛицSpecified
		{
			get
			{
				return this.датаОкончЛицFieldSpecified;
			}
			set
			{
				this.датаОкончЛицFieldSpecified = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPResponseСвИПСвЛицензия));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвЛицензия object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPResponseСвИПСвЛицензия object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвЛицензия object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвЛицензия obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвЛицензия);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвЛицензия obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвЛицензия Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPResponseСвИПСвЛицензия)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвЛицензия object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPResponseСвИПСвЛицензия object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвЛицензия object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвЛицензия obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвЛицензия);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвЛицензия obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвЛицензия LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public partial class FNSZvipIPResponseСвИПСвЛицензияСвПриостЛиц
	{

		private ГРНИПДатаТип гРНИПДатаField;

		private ГРНИПДатаТип гРНИПДатаИспрField;

		private System.DateTime датаПриостЛицField;

		private string лицОргПриостЛицField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSZvipIPResponseСвИПСвЛицензияСвПриостЛиц()
		{
			this.гРНИПДатаИспрField = new ГРНИПДатаТип();
			this.гРНИПДатаField = new ГРНИПДатаТип();
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДатаИспр
		{
			get
			{
				return this.гРНИПДатаИспрField;
			}
			set
			{
				this.гРНИПДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаПриостЛиц
		{
			get
			{
				return this.датаПриостЛицField;
			}
			set
			{
				this.датаПриостЛицField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ЛицОргПриостЛиц
		{
			get
			{
				return this.лицОргПриостЛицField;
			}
			set
			{
				this.лицОргПриостЛицField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPResponseСвИПСвЛицензияСвПриостЛиц));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвЛицензияСвПриостЛиц object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPResponseСвИПСвЛицензияСвПриостЛиц object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвЛицензияСвПриостЛиц object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвЛицензияСвПриостЛиц obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвЛицензияСвПриостЛиц);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвЛицензияСвПриостЛиц obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвЛицензияСвПриостЛиц Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPResponseСвИПСвЛицензияСвПриостЛиц)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвЛицензияСвПриостЛиц object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPResponseСвИПСвЛицензияСвПриостЛиц object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвЛицензияСвПриостЛиц object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвЛицензияСвПриостЛиц obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвЛицензияСвПриостЛиц);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвЛицензияСвПриостЛиц obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвЛицензияСвПриостЛиц LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public partial class FNSZvipIPResponseСвИПСвЗапЕГРИП
	{

		private ВидЗапТип видЗапField;

		private СвРегОргТип свРегОргField;

		private List<FNSZvipIPResponseСвИПСвЗапЕГРИПСведПредДок> сведПредДокField;

		private List<FNSZvipIPResponseСвИПСвЗапЕГРИПСвСвид> свСвидField;

		private ИдГРНИПДатаТип гРНИПДатаИспрПредField;

		private ИдГРНИПДатаТип гРНИПДатаНедПредField;

		private FNSZvipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап свСтатусЗапField;

		private string идЗапField;

		private string гРНИПField;

		private System.DateTime датаЗапField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSZvipIPResponseСвИПСвЗапЕГРИП()
		{
			this.свСтатусЗапField = new FNSZvipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап();
			this.гРНИПДатаНедПредField = new ИдГРНИПДатаТип();
			this.гРНИПДатаИспрПредField = new ИдГРНИПДатаТип();
			this.свСвидField = new List<FNSZvipIPResponseСвИПСвЗапЕГРИПСвСвид>();
			this.сведПредДокField = new List<FNSZvipIPResponseСвИПСвЗапЕГРИПСведПредДок>();
			this.свРегОргField = new СвРегОргТип();
			this.видЗапField = new ВидЗапТип();
		}

		public ВидЗапТип ВидЗап
		{
			get
			{
				return this.видЗапField;
			}
			set
			{
				this.видЗапField = value;
			}
		}

		public СвРегОргТип СвРегОрг
		{
			get
			{
				return this.свРегОргField;
			}
			set
			{
				this.свРегОргField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СведПредДок")]
		public List<FNSZvipIPResponseСвИПСвЗапЕГРИПСведПредДок> СведПредДок
		{
			get
			{
				return this.сведПредДокField;
			}
			set
			{
				this.сведПредДокField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвСвид")]
		public List<FNSZvipIPResponseСвИПСвЗапЕГРИПСвСвид> СвСвид
		{
			get
			{
				return this.свСвидField;
			}
			set
			{
				this.свСвидField = value;
			}
		}

		public ИдГРНИПДатаТип ГРНИПДатаИспрПред
		{
			get
			{
				return this.гРНИПДатаИспрПредField;
			}
			set
			{
				this.гРНИПДатаИспрПредField = value;
			}
		}

		public ИдГРНИПДатаТип ГРНИПДатаНедПред
		{
			get
			{
				return this.гРНИПДатаНедПредField;
			}
			set
			{
				this.гРНИПДатаНедПредField = value;
			}
		}

		public FNSZvipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап СвСтатусЗап
		{
			get
			{
				return this.свСтатусЗапField;
			}
			set
			{
				this.свСтатусЗапField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
		public string ИдЗап
		{
			get
			{
				return this.идЗапField;
			}
			set
			{
				this.идЗапField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ГРНИП
		{
			get
			{
				return this.гРНИПField;
			}
			set
			{
				this.гРНИПField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаЗап
		{
			get
			{
				return this.датаЗапField;
			}
			set
			{
				this.датаЗапField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPResponseСвИПСвЗапЕГРИП));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвЗапЕГРИП object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPResponseСвИПСвЗапЕГРИП object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвЗапЕГРИП object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвЗапЕГРИП obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвЗапЕГРИП);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвЗапЕГРИП obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвЗапЕГРИП Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPResponseСвИПСвЗапЕГРИП)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвЗапЕГРИП object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPResponseСвИПСвЗапЕГРИП object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвЗапЕГРИП object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвЗапЕГРИП obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвЗапЕГРИП);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвЗапЕГРИП obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвЗапЕГРИП LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/zvipip-types/4.0.6")]
	public partial class ВидЗапТип
	{

		private string кодСПВЗField;

		private string наимВидЗапField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодСПВЗ
		{
			get
			{
				return this.кодСПВЗField;
			}
			set
			{
				this.кодСПВЗField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимВидЗап
		{
			get
			{
				return this.наимВидЗапField;
			}
			set
			{
				this.наимВидЗапField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(ВидЗапТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current ВидЗапТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an ВидЗапТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output ВидЗапТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out ВидЗапТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ВидЗапТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out ВидЗапТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static ВидЗапТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((ВидЗапТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current ВидЗапТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an ВидЗапТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output ВидЗапТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out ВидЗапТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ВидЗапТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out ВидЗапТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static ВидЗапТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/zvipip-types/4.0.6")]
	public partial class СвРегОргТип
	{

		private string кодНОField;

		private string наимНОField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодНО
		{
			get
			{
				return this.кодНОField;
			}
			set
			{
				this.кодНОField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимНО
		{
			get
			{
				return this.наимНОField;
			}
			set
			{
				this.наимНОField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвРегОргТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current СвРегОргТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an СвРегОргТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output СвРегОргТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out СвРегОргТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвРегОргТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out СвРегОргТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static СвРегОргТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((СвРегОргТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current СвРегОргТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an СвРегОргТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output СвРегОргТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out СвРегОргТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвРегОргТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out СвРегОргТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static СвРегОргТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public partial class FNSZvipIPResponseСвИПСвЗапЕГРИПСведПредДок
	{

		private string наимДокField;

		private string номДокField;

		private System.DateTime датаДокField;

		private bool датаДокFieldSpecified;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public string НаимДок
		{
			get
			{
				return this.наимДокField;
			}
			set
			{
				this.наимДокField = value;
			}
		}

		public string НомДок
		{
			get
			{
				return this.номДокField;
			}
			set
			{
				this.номДокField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute(DataType = "date")]
		public System.DateTime ДатаДок
		{
			get
			{
				return this.датаДокField;
			}
			set
			{
				this.датаДокField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool ДатаДокSpecified
		{
			get
			{
				return this.датаДокFieldSpecified;
			}
			set
			{
				this.датаДокFieldSpecified = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPResponseСвИПСвЗапЕГРИПСведПредДок));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвЗапЕГРИПСведПредДок object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPResponseСвИПСвЗапЕГРИПСведПредДок object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвЗапЕГРИПСведПредДок object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвЗапЕГРИПСведПредДок obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвЗапЕГРИПСведПредДок);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвЗапЕГРИПСведПредДок obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвЗапЕГРИПСведПредДок Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPResponseСвИПСвЗапЕГРИПСведПредДок)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвЗапЕГРИПСведПредДок object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPResponseСвИПСвЗапЕГРИПСведПредДок object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвЗапЕГРИПСведПредДок object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвЗапЕГРИПСведПредДок obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвЗапЕГРИПСведПредДок);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвЗапЕГРИПСведПредДок obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвЗапЕГРИПСведПредДок LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public partial class FNSZvipIPResponseСвИПСвЗапЕГРИПСвСвид
	{

		private ГРНИПДатаТип гРНИПДатаСвидНедField;

		private string серияField;

		private string номерField;

		private System.DateTime датаВыдСвидField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSZvipIPResponseСвИПСвЗапЕГРИПСвСвид()
		{
			this.гРНИПДатаСвидНедField = new ГРНИПДатаТип();
		}

		public ГРНИПДатаТип ГРНИПДатаСвидНед
		{
			get
			{
				return this.гРНИПДатаСвидНедField;
			}
			set
			{
				this.гРНИПДатаСвидНедField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string Серия
		{
			get
			{
				return this.серияField;
			}
			set
			{
				this.серияField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string Номер
		{
			get
			{
				return this.номерField;
			}
			set
			{
				this.номерField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаВыдСвид
		{
			get
			{
				return this.датаВыдСвидField;
			}
			set
			{
				this.датаВыдСвидField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPResponseСвИПСвЗапЕГРИПСвСвид));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвЗапЕГРИПСвСвид object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPResponseСвИПСвЗапЕГРИПСвСвид object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвЗапЕГРИПСвСвид object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвЗапЕГРИПСвСвид obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвЗапЕГРИПСвСвид);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвЗапЕГРИПСвСвид obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвЗапЕГРИПСвСвид Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPResponseСвИПСвЗапЕГРИПСвСвид)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвЗапЕГРИПСвСвид object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPResponseСвИПСвЗапЕГРИПСвСвид object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвЗапЕГРИПСвСвид object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвЗапЕГРИПСвСвид obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвЗапЕГРИПСвСвид);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвЗапЕГРИПСвСвид obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвЗапЕГРИПСвСвид LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/zvipip-types/4.0.6")]
	public partial class ИдГРНИПДатаТип
	{

		private string идЗапField;

		private string гРНИПField;

		private System.DateTime датаЗапField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
		public string ИдЗап
		{
			get
			{
				return this.идЗапField;
			}
			set
			{
				this.идЗапField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ГРНИП
		{
			get
			{
				return this.гРНИПField;
			}
			set
			{
				this.гРНИПField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаЗап
		{
			get
			{
				return this.датаЗапField;
			}
			set
			{
				this.датаЗапField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(ИдГРНИПДатаТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current ИдГРНИПДатаТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an ИдГРНИПДатаТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output ИдГРНИПДатаТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out ИдГРНИПДатаТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ИдГРНИПДатаТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out ИдГРНИПДатаТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static ИдГРНИПДатаТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((ИдГРНИПДатаТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current ИдГРНИПДатаТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an ИдГРНИПДатаТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output ИдГРНИПДатаТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out ИдГРНИПДатаТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ИдГРНИПДатаТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out ИдГРНИПДатаТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static ИдГРНИПДатаТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public partial class FNSZvipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап
	{

		private ИдГРНИПДатаТип гРНИПДатаНедField;

		private List<ИдГРНИПДатаТип> гРНИПДатаИспрField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSZvipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап()
		{
			this.гРНИПДатаИспрField = new List<ИдГРНИПДатаТип>();
			this.гРНИПДатаНедField = new ИдГРНИПДатаТип();
		}

		public ИдГРНИПДатаТип ГРНИПДатаНед
		{
			get
			{
				return this.гРНИПДатаНедField;
			}
			set
			{
				this.гРНИПДатаНедField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("ГРНИПДатаИспр")]
		public List<ИдГРНИПДатаТип> ГРНИПДатаИспр
		{
			get
			{
				return this.гРНИПДатаИспрField;
			}
			set
			{
				this.гРНИПДатаИспрField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSZvipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSZvipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSZvipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSZvipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSZvipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSZvipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSZvipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSZvipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSZvipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSZvipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-zvipip-tosmv-ru/311-15/4.0.6")]
	public enum FNSZvipIPResponseСвИПКодВидИП
	{

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("1")]
		Item1,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("2")]
		Item2,
	}
}

// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.32989
//    <NameSpace>SMEV3.FNS001.fnsvipul</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>True</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace SMEV3.FNS001.fnsvipul
{
	using System;
	using System.Diagnostics;
	using System.Xml.Serialization;
	using System.Collections;
	using System.Xml.Schema;
	using System.ComponentModel;
	using System.IO;
	using System.Text;
	using System.Collections.Generic;


	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5", IsNullable = false)]
	public partial class FNSVipULRequest
	{

		private FNSVipULRequestЗапросЮЛ запросЮЛField;

		private string идДокField;

		private string номерДелаField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULRequest()
		{
			this.запросЮЛField = new FNSVipULRequestЗапросЮЛ();
		}

		public FNSVipULRequestЗапросЮЛ ЗапросЮЛ
		{
			get
			{
				return this.запросЮЛField;
			}
			set
			{
				this.запросЮЛField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ИдДок
		{
			get
			{
				return this.идДокField;
			}
			set
			{
				this.идДокField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НомерДела
		{
			get
			{
				return this.номерДелаField;
			}
			set
			{
				this.номерДелаField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULRequest));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULRequest object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULRequest object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULRequest object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULRequest obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULRequest);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULRequest obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULRequest Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULRequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULRequest object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULRequest object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULRequest object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULRequest obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULRequest);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULRequest obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULRequest LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULRequestЗапросЮЛ
	{

		private string itemField;

		private ItemChoiceType itemElementNameField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlElementAttribute("ИННЮЛ", typeof(string))]
		[System.Xml.Serialization.XmlElementAttribute("ОГРН", typeof(string))]
		[System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
		public string Item
		{
			get
			{
				return this.itemField;
			}
			set
			{
				this.itemField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public ItemChoiceType ItemElementName
		{
			get
			{
				return this.itemElementNameField;
			}
			set
			{
				this.itemElementNameField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULRequestЗапросЮЛ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULRequestЗапросЮЛ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULRequestЗапросЮЛ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULRequestЗапросЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULRequestЗапросЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULRequestЗапросЮЛ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULRequestЗапросЮЛ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULRequestЗапросЮЛ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULRequestЗапросЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULRequestЗапросЮЛ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULRequestЗапросЮЛ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULRequestЗапросЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULRequestЗапросЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULRequestЗапросЮЛ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULRequestЗапросЮЛ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULRequestЗапросЮЛ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5", IncludeInSchema = false)]
	public enum ItemChoiceType
	{

		/// <remarks/>
		ИННЮЛ,

		/// <remarks/>
		ОГРН,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5", IsNullable = false)]
	public partial class FNSVipULResponse
	{

		private object itemField;

		private string идДокField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlElementAttribute("КодОбр", typeof(string))]
		[System.Xml.Serialization.XmlElementAttribute("СвЮЛ", typeof(FNSVipULResponseСвЮЛ))]
		public object Item
		{
			get
			{
				return this.itemField;
			}
			set
			{
				this.itemField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ИдДок
		{
			get
			{
				return this.идДокField;
			}
			set
			{
				this.идДокField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponse));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponse object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponse object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponse object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponse obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponse);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponse obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponse Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponse object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponse object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponse object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponse obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponse);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponse obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponse LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛ
	{

		private FNSVipULResponseСвЮЛСвНаимЮЛ свНаимЮЛField;

		private FNSVipULResponseСвЮЛСвАдресЮЛ свАдресЮЛField;

		private FNSVipULResponseСвЮЛСвАдрЭлПочты свАдрЭлПочтыField;

		private FNSVipULResponseСвЮЛСвОбрЮЛ свОбрЮЛField;

		private FNSVipULResponseСвЮЛСвРегОрг свРегОргField;

		private List<FNSVipULResponseСвЮЛСвСтатус> свСтатусField;

		private FNSVipULResponseСвЮЛСвПрекрЮЛ свПрекрЮЛField;

		private FNSVipULResponseСвЮЛСвУчетНО свУчетНОField;

		private FNSVipULResponseСвЮЛСвРегПФ свРегПФField;

		private FNSVipULResponseСвЮЛСвРегФСС свРегФССField;

		private FNSVipULResponseСвЮЛСвУстКап свУстКапField;

		private FNSVipULResponseСвЮЛСвТипУстав свТипУставField;

		private List<FNSVipULResponseСвЮЛСвУпрОрг> свУпрОргField;

		private List<FNSVipULResponseСвЮЛСведДолжнФЛ> сведДолжнФЛField;

		private FNSVipULResponseСвЮЛСвУчредит свУчредитField;

		private ДоляУстКапЕГРЮЛТип свДоляОООField;

		private FNSVipULResponseСвЮЛСвДержРеестрАО свДержРеестрАОField;

		private FNSVipULResponseСвЮЛСвОКВЭД свОКВЭДField;

		private List<FNSVipULResponseСвЮЛСвЛицензия> свЛицензияField;

		private FNSVipULResponseСвЮЛСвПодразд свПодраздField;

		private List<FNSVipULResponseСвЮЛСвРеорг> свРеоргField;

		private List<FNSVipULResponseСвЮЛСвПредш> свПредшField;

		private List<FNSVipULResponseСвЮЛСвКФХПредш> свКФХПредшField;

		private List<FNSVipULResponseСвЮЛСвПреем> свПреемField;

		private FNSVipULResponseСвЮЛСвКФХПреем свКФХПреемField;

		private List<FNSVipULResponseСвЮЛСвЗапЕГРЮЛ> свЗапЕГРЮЛField;

		private System.DateTime датаВыпField;

		private string оГРНField;

		private System.DateTime датаОГРНField;

		private string иННField;

		private string кППField;

		private FNSVipULResponseСвЮЛСпрОПФ спрОПФField;

		private bool спрОПФFieldSpecified;

		private string кодОПФField;

		private string полнНаимОПФField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛ()
		{
			this.свЗапЕГРЮЛField = new List<FNSVipULResponseСвЮЛСвЗапЕГРЮЛ>();
			this.свКФХПреемField = new FNSVipULResponseСвЮЛСвКФХПреем();
			this.свПреемField = new List<FNSVipULResponseСвЮЛСвПреем>();
			this.свКФХПредшField = new List<FNSVipULResponseСвЮЛСвКФХПредш>();
			this.свПредшField = new List<FNSVipULResponseСвЮЛСвПредш>();
			this.свРеоргField = new List<FNSVipULResponseСвЮЛСвРеорг>();
			this.свПодраздField = new FNSVipULResponseСвЮЛСвПодразд();
			this.свЛицензияField = new List<FNSVipULResponseСвЮЛСвЛицензия>();
			this.свОКВЭДField = new FNSVipULResponseСвЮЛСвОКВЭД();
			this.свДержРеестрАОField = new FNSVipULResponseСвЮЛСвДержРеестрАО();
			this.свДоляОООField = new ДоляУстКапЕГРЮЛТип();
			this.свУчредитField = new FNSVipULResponseСвЮЛСвУчредит();
			this.сведДолжнФЛField = new List<FNSVipULResponseСвЮЛСведДолжнФЛ>();
			this.свУпрОргField = new List<FNSVipULResponseСвЮЛСвУпрОрг>();
			this.свТипУставField = new FNSVipULResponseСвЮЛСвТипУстав();
			this.свУстКапField = new FNSVipULResponseСвЮЛСвУстКап();
			this.свРегФССField = new FNSVipULResponseСвЮЛСвРегФСС();
			this.свРегПФField = new FNSVipULResponseСвЮЛСвРегПФ();
			this.свУчетНОField = new FNSVipULResponseСвЮЛСвУчетНО();
			this.свПрекрЮЛField = new FNSVipULResponseСвЮЛСвПрекрЮЛ();
			this.свСтатусField = new List<FNSVipULResponseСвЮЛСвСтатус>();
			this.свРегОргField = new FNSVipULResponseСвЮЛСвРегОрг();
			this.свОбрЮЛField = new FNSVipULResponseСвЮЛСвОбрЮЛ();
			this.свАдрЭлПочтыField = new FNSVipULResponseСвЮЛСвАдрЭлПочты();
			this.свАдресЮЛField = new FNSVipULResponseСвЮЛСвАдресЮЛ();
			this.свНаимЮЛField = new FNSVipULResponseСвЮЛСвНаимЮЛ();
		}

		public FNSVipULResponseСвЮЛСвНаимЮЛ СвНаимЮЛ
		{
			get
			{
				return this.свНаимЮЛField;
			}
			set
			{
				this.свНаимЮЛField = value;
			}
		}

		public FNSVipULResponseСвЮЛСвАдресЮЛ СвАдресЮЛ
		{
			get
			{
				return this.свАдресЮЛField;
			}
			set
			{
				this.свАдресЮЛField = value;
			}
		}

		public FNSVipULResponseСвЮЛСвАдрЭлПочты СвАдрЭлПочты
		{
			get
			{
				return this.свАдрЭлПочтыField;
			}
			set
			{
				this.свАдрЭлПочтыField = value;
			}
		}

		public FNSVipULResponseСвЮЛСвОбрЮЛ СвОбрЮЛ
		{
			get
			{
				return this.свОбрЮЛField;
			}
			set
			{
				this.свОбрЮЛField = value;
			}
		}

		public FNSVipULResponseСвЮЛСвРегОрг СвРегОрг
		{
			get
			{
				return this.свРегОргField;
			}
			set
			{
				this.свРегОргField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвСтатус")]
		public List<FNSVipULResponseСвЮЛСвСтатус> СвСтатус
		{
			get
			{
				return this.свСтатусField;
			}
			set
			{
				this.свСтатусField = value;
			}
		}

		public FNSVipULResponseСвЮЛСвПрекрЮЛ СвПрекрЮЛ
		{
			get
			{
				return this.свПрекрЮЛField;
			}
			set
			{
				this.свПрекрЮЛField = value;
			}
		}

		public FNSVipULResponseСвЮЛСвУчетНО СвУчетНО
		{
			get
			{
				return this.свУчетНОField;
			}
			set
			{
				this.свУчетНОField = value;
			}
		}

		public FNSVipULResponseСвЮЛСвРегПФ СвРегПФ
		{
			get
			{
				return this.свРегПФField;
			}
			set
			{
				this.свРегПФField = value;
			}
		}

		public FNSVipULResponseСвЮЛСвРегФСС СвРегФСС
		{
			get
			{
				return this.свРегФССField;
			}
			set
			{
				this.свРегФССField = value;
			}
		}

		public FNSVipULResponseСвЮЛСвУстКап СвУстКап
		{
			get
			{
				return this.свУстКапField;
			}
			set
			{
				this.свУстКапField = value;
			}
		}

		public FNSVipULResponseСвЮЛСвТипУстав СвТипУстав
		{
			get
			{
				return this.свТипУставField;
			}
			set
			{
				this.свТипУставField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвУпрОрг")]
		public List<FNSVipULResponseСвЮЛСвУпрОрг> СвУпрОрг
		{
			get
			{
				return this.свУпрОргField;
			}
			set
			{
				this.свУпрОргField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СведДолжнФЛ")]
		public List<FNSVipULResponseСвЮЛСведДолжнФЛ> СведДолжнФЛ
		{
			get
			{
				return this.сведДолжнФЛField;
			}
			set
			{
				this.сведДолжнФЛField = value;
			}
		}

		public FNSVipULResponseСвЮЛСвУчредит СвУчредит
		{
			get
			{
				return this.свУчредитField;
			}
			set
			{
				this.свУчредитField = value;
			}
		}

		public ДоляУстКапЕГРЮЛТип СвДоляООО
		{
			get
			{
				return this.свДоляОООField;
			}
			set
			{
				this.свДоляОООField = value;
			}
		}

		public FNSVipULResponseСвЮЛСвДержРеестрАО СвДержРеестрАО
		{
			get
			{
				return this.свДержРеестрАОField;
			}
			set
			{
				this.свДержРеестрАОField = value;
			}
		}

		public FNSVipULResponseСвЮЛСвОКВЭД СвОКВЭД
		{
			get
			{
				return this.свОКВЭДField;
			}
			set
			{
				this.свОКВЭДField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвЛицензия")]
		public List<FNSVipULResponseСвЮЛСвЛицензия> СвЛицензия
		{
			get
			{
				return this.свЛицензияField;
			}
			set
			{
				this.свЛицензияField = value;
			}
		}

		public FNSVipULResponseСвЮЛСвПодразд СвПодразд
		{
			get
			{
				return this.свПодраздField;
			}
			set
			{
				this.свПодраздField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвРеорг")]
		public List<FNSVipULResponseСвЮЛСвРеорг> СвРеорг
		{
			get
			{
				return this.свРеоргField;
			}
			set
			{
				this.свРеоргField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвПредш")]
		public List<FNSVipULResponseСвЮЛСвПредш> СвПредш
		{
			get
			{
				return this.свПредшField;
			}
			set
			{
				this.свПредшField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвКФХПредш")]
		public List<FNSVipULResponseСвЮЛСвКФХПредш> СвКФХПредш
		{
			get
			{
				return this.свКФХПредшField;
			}
			set
			{
				this.свКФХПредшField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвПреем")]
		public List<FNSVipULResponseСвЮЛСвПреем> СвПреем
		{
			get
			{
				return this.свПреемField;
			}
			set
			{
				this.свПреемField = value;
			}
		}

		public FNSVipULResponseСвЮЛСвКФХПреем СвКФХПреем
		{
			get
			{
				return this.свКФХПреемField;
			}
			set
			{
				this.свКФХПреемField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвЗапЕГРЮЛ")]
		public List<FNSVipULResponseСвЮЛСвЗапЕГРЮЛ> СвЗапЕГРЮЛ
		{
			get
			{
				return this.свЗапЕГРЮЛField;
			}
			set
			{
				this.свЗапЕГРЮЛField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаВып
		{
			get
			{
				return this.датаВыпField;
			}
			set
			{
				this.датаВыпField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ОГРН
		{
			get
			{
				return this.оГРНField;
			}
			set
			{
				this.оГРНField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаОГРН
		{
			get
			{
				return this.датаОГРНField;
			}
			set
			{
				this.датаОГРНField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ИНН
		{
			get
			{
				return this.иННField;
			}
			set
			{
				this.иННField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КПП
		{
			get
			{
				return this.кППField;
			}
			set
			{
				this.кППField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public FNSVipULResponseСвЮЛСпрОПФ СпрОПФ
		{
			get
			{
				return this.спрОПФField;
			}
			set
			{
				this.спрОПФField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool СпрОПФSpecified
		{
			get
			{
				return this.спрОПФFieldSpecified;
			}
			set
			{
				this.спрОПФFieldSpecified = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодОПФ
		{
			get
			{
				return this.кодОПФField;
			}
			set
			{
				this.кодОПФField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ПолнНаимОПФ
		{
			get
			{
				return this.полнНаимОПФField;
			}
			set
			{
				this.полнНаимОПФField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвНаимЮЛ
	{

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private string наимЮЛПолнField;

		private string наимЮЛСокрField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвНаимЮЛ()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимЮЛПолн
		{
			get
			{
				return this.наимЮЛПолнField;
			}
			set
			{
				this.наимЮЛПолнField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимЮЛСокр
		{
			get
			{
				return this.наимЮЛСокрField;
			}
			set
			{
				this.наимЮЛСокрField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвНаимЮЛ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвНаимЮЛ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвНаимЮЛ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвНаимЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвНаимЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвНаимЮЛ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвНаимЮЛ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвНаимЮЛ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвНаимЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвНаимЮЛ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвНаимЮЛ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвНаимЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвНаимЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвНаимЮЛ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвНаимЮЛ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвНаимЮЛ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public partial class ГРНДатаТип
	{

		private string гРНField;

		private System.DateTime датаЗаписиField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ГРН
		{
			get
			{
				return this.гРНField;
			}
			set
			{
				this.гРНField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаЗаписи
		{
			get
			{
				return this.датаЗаписиField;
			}
			set
			{
				this.датаЗаписиField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(ГРНДатаТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current ГРНДатаТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an ГРНДатаТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output ГРНДатаТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out ГРНДатаТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ГРНДатаТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out ГРНДатаТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static ГРНДатаТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((ГРНДатаТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current ГРНДатаТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an ГРНДатаТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output ГРНДатаТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out ГРНДатаТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ГРНДатаТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out ГРНДатаТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static ГРНДатаТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвАдресЮЛ
	{

		private АдрРФЕГРЮЛТип адресРФField;

		private List<FNSVipULResponseСвЮЛСвАдресЮЛСвНедАдресЮЛ> свНедАдресЮЛField;

		private FNSVipULResponseСвЮЛСвАдресЮЛСвРешИзмМН свРешИзмМНField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвАдресЮЛ()
		{
			this.свРешИзмМНField = new FNSVipULResponseСвЮЛСвАдресЮЛСвРешИзмМН();
			this.свНедАдресЮЛField = new List<FNSVipULResponseСвЮЛСвАдресЮЛСвНедАдресЮЛ>();
			this.адресРФField = new АдрРФЕГРЮЛТип();
		}

		public АдрРФЕГРЮЛТип АдресРФ
		{
			get
			{
				return this.адресРФField;
			}
			set
			{
				this.адресРФField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвНедАдресЮЛ")]
		public List<FNSVipULResponseСвЮЛСвАдресЮЛСвНедАдресЮЛ> СвНедАдресЮЛ
		{
			get
			{
				return this.свНедАдресЮЛField;
			}
			set
			{
				this.свНедАдресЮЛField = value;
			}
		}

		public FNSVipULResponseСвЮЛСвАдресЮЛСвРешИзмМН СвРешИзмМН
		{
			get
			{
				return this.свРешИзмМНField;
			}
			set
			{
				this.свРешИзмМНField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвАдресЮЛ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвАдресЮЛ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвАдресЮЛ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвАдресЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвАдресЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвАдресЮЛ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвАдресЮЛ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвАдресЮЛ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвАдресЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвАдресЮЛ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвАдресЮЛ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвАдресЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвАдресЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвАдресЮЛ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвАдресЮЛ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвАдресЮЛ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public partial class АдрРФЕГРЮЛТип
	{

		private РегионТип регионField;

		private РайонТип районField;

		private ГородТип городField;

		private НаселПунктТип населПунктField;

		private УлицаТип улицаField;

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private string индексField;

		private string кодРегионField;

		private string кодАдрКладрField;

		private string домField;

		private string корпусField;

		private string квартField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public АдрРФЕГРЮЛТип()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
			this.улицаField = new УлицаТип();
			this.населПунктField = new НаселПунктТип();
			this.городField = new ГородТип();
			this.районField = new РайонТип();
			this.регионField = new РегионТип();
		}

		public РегионТип Регион
		{
			get
			{
				return this.регионField;
			}
			set
			{
				this.регионField = value;
			}
		}

		public РайонТип Район
		{
			get
			{
				return this.районField;
			}
			set
			{
				this.районField = value;
			}
		}

		public ГородТип Город
		{
			get
			{
				return this.городField;
			}
			set
			{
				this.городField = value;
			}
		}

		public НаселПунктТип НаселПункт
		{
			get
			{
				return this.населПунктField;
			}
			set
			{
				this.населПунктField = value;
			}
		}

		public УлицаТип Улица
		{
			get
			{
				return this.улицаField;
			}
			set
			{
				this.улицаField = value;
			}
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string Индекс
		{
			get
			{
				return this.индексField;
			}
			set
			{
				this.индексField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодРегион
		{
			get
			{
				return this.кодРегионField;
			}
			set
			{
				this.кодРегионField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодАдрКладр
		{
			get
			{
				return this.кодАдрКладрField;
			}
			set
			{
				this.кодАдрКладрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string Дом
		{
			get
			{
				return this.домField;
			}
			set
			{
				this.домField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string Корпус
		{
			get
			{
				return this.корпусField;
			}
			set
			{
				this.корпусField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string Кварт
		{
			get
			{
				return this.квартField;
			}
			set
			{
				this.квартField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(АдрРФЕГРЮЛТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current АдрРФЕГРЮЛТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an АдрРФЕГРЮЛТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output АдрРФЕГРЮЛТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out АдрРФЕГРЮЛТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(АдрРФЕГРЮЛТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out АдрРФЕГРЮЛТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static АдрРФЕГРЮЛТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((АдрРФЕГРЮЛТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current АдрРФЕГРЮЛТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an АдрРФЕГРЮЛТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output АдрРФЕГРЮЛТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out АдрРФЕГРЮЛТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(АдрРФЕГРЮЛТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out АдрРФЕГРЮЛТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static АдрРФЕГРЮЛТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public partial class РегионТип
	{

		private string типРегионField;

		private string наимРегионField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ТипРегион
		{
			get
			{
				return this.типРегионField;
			}
			set
			{
				this.типРегионField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимРегион
		{
			get
			{
				return this.наимРегионField;
			}
			set
			{
				this.наимРегионField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(РегионТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current РегионТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an РегионТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output РегионТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out РегионТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(РегионТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out РегионТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static РегионТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((РегионТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current РегионТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an РегионТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output РегионТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out РегионТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(РегионТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out РегионТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static РегионТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public partial class РайонТип
	{

		private string типРайонField;

		private string наимРайонField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ТипРайон
		{
			get
			{
				return this.типРайонField;
			}
			set
			{
				this.типРайонField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимРайон
		{
			get
			{
				return this.наимРайонField;
			}
			set
			{
				this.наимРайонField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(РайонТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current РайонТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an РайонТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output РайонТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out РайонТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(РайонТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out РайонТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static РайонТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((РайонТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current РайонТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an РайонТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output РайонТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out РайонТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(РайонТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out РайонТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static РайонТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public partial class ГородТип
	{

		private string типГородField;

		private string наимГородField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ТипГород
		{
			get
			{
				return this.типГородField;
			}
			set
			{
				this.типГородField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимГород
		{
			get
			{
				return this.наимГородField;
			}
			set
			{
				this.наимГородField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(ГородТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current ГородТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an ГородТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output ГородТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out ГородТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ГородТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out ГородТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static ГородТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((ГородТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current ГородТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an ГородТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output ГородТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out ГородТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ГородТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out ГородТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static ГородТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public partial class НаселПунктТип
	{

		private string типНаселПунктField;

		private string наимНаселПунктField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ТипНаселПункт
		{
			get
			{
				return this.типНаселПунктField;
			}
			set
			{
				this.типНаселПунктField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимНаселПункт
		{
			get
			{
				return this.наимНаселПунктField;
			}
			set
			{
				this.наимНаселПунктField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(НаселПунктТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current НаселПунктТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an НаселПунктТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output НаселПунктТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out НаселПунктТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(НаселПунктТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out НаселПунктТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static НаселПунктТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((НаселПунктТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current НаселПунктТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an НаселПунктТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output НаселПунктТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out НаселПунктТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(НаселПунктТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out НаселПунктТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static НаселПунктТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public partial class УлицаТип
	{

		private string типУлицаField;

		private string наимУлицаField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ТипУлица
		{
			get
			{
				return this.типУлицаField;
			}
			set
			{
				this.типУлицаField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимУлица
		{
			get
			{
				return this.наимУлицаField;
			}
			set
			{
				this.наимУлицаField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(УлицаТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current УлицаТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an УлицаТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output УлицаТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out УлицаТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(УлицаТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out УлицаТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static УлицаТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((УлицаТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current УлицаТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an УлицаТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output УлицаТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out УлицаТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(УлицаТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out УлицаТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static УлицаТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвАдресЮЛСвНедАдресЮЛ
	{

		private РешСудТип решСудНедАдрField;

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private FNSVipULResponseСвЮЛСвАдресЮЛСвНедАдресЮЛПризнНедАдресЮЛ признНедАдресЮЛField;

		private string текстНедАдресЮЛField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвАдресЮЛСвНедАдресЮЛ()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
			this.решСудНедАдрField = new РешСудТип();
		}

		public РешСудТип РешСудНедАдр
		{
			get
			{
				return this.решСудНедАдрField;
			}
			set
			{
				this.решСудНедАдрField = value;
			}
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public FNSVipULResponseСвЮЛСвАдресЮЛСвНедАдресЮЛПризнНедАдресЮЛ ПризнНедАдресЮЛ
		{
			get
			{
				return this.признНедАдресЮЛField;
			}
			set
			{
				this.признНедАдресЮЛField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ТекстНедАдресЮЛ
		{
			get
			{
				return this.текстНедАдресЮЛField;
			}
			set
			{
				this.текстНедАдресЮЛField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвАдресЮЛСвНедАдресЮЛ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвАдресЮЛСвНедАдресЮЛ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвАдресЮЛСвНедАдресЮЛ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвАдресЮЛСвНедАдресЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвАдресЮЛСвНедАдресЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвАдресЮЛСвНедАдресЮЛ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвАдресЮЛСвНедАдресЮЛ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвАдресЮЛСвНедАдресЮЛ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвАдресЮЛСвНедАдресЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвАдресЮЛСвНедАдресЮЛ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвАдресЮЛСвНедАдресЮЛ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвАдресЮЛСвНедАдресЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвАдресЮЛСвНедАдресЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвАдресЮЛСвНедАдресЮЛ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвАдресЮЛСвНедАдресЮЛ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвАдресЮЛСвНедАдресЮЛ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public partial class РешСудТип
	{

		private string наимСудаField;

		private string номерField;

		private System.DateTime датаField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимСуда
		{
			get
			{
				return this.наимСудаField;
			}
			set
			{
				this.наимСудаField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string Номер
		{
			get
			{
				return this.номерField;
			}
			set
			{
				this.номерField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime Дата
		{
			get
			{
				return this.датаField;
			}
			set
			{
				this.датаField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(РешСудТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current РешСудТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an РешСудТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output РешСудТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out РешСудТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(РешСудТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out РешСудТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static РешСудТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((РешСудТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current РешСудТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an РешСудТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output РешСудТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out РешСудТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(РешСудТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out РешСудТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static РешСудТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public enum FNSVipULResponseСвЮЛСвАдресЮЛСвНедАдресЮЛПризнНедАдресЮЛ
	{

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("2")]
		Item2,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("3")]
		Item3,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвАдресЮЛСвРешИзмМН
	{

		private РегионТип регионField;

		private РайонТип районField;

		private ГородТип городField;

		private НаселПунктТип населПунктField;

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private string текстРешИзмМНField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвАдресЮЛСвРешИзмМН()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
			this.населПунктField = new НаселПунктТип();
			this.городField = new ГородТип();
			this.районField = new РайонТип();
			this.регионField = new РегионТип();
		}

		public РегионТип Регион
		{
			get
			{
				return this.регионField;
			}
			set
			{
				this.регионField = value;
			}
		}

		public РайонТип Район
		{
			get
			{
				return this.районField;
			}
			set
			{
				this.районField = value;
			}
		}

		public ГородТип Город
		{
			get
			{
				return this.городField;
			}
			set
			{
				this.городField = value;
			}
		}

		public НаселПунктТип НаселПункт
		{
			get
			{
				return this.населПунктField;
			}
			set
			{
				this.населПунктField = value;
			}
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ТекстРешИзмМН
		{
			get
			{
				return this.текстРешИзмМНField;
			}
			set
			{
				this.текстРешИзмМНField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвАдресЮЛСвРешИзмМН));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвАдресЮЛСвРешИзмМН object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвАдресЮЛСвРешИзмМН object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвАдресЮЛСвРешИзмМН object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвАдресЮЛСвРешИзмМН obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвАдресЮЛСвРешИзмМН);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвАдресЮЛСвРешИзмМН obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвАдресЮЛСвРешИзмМН Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвАдресЮЛСвРешИзмМН)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвАдресЮЛСвРешИзмМН object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвАдресЮЛСвРешИзмМН object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвАдресЮЛСвРешИзмМН object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвАдресЮЛСвРешИзмМН obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвАдресЮЛСвРешИзмМН);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвАдресЮЛСвРешИзмМН obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвАдресЮЛСвРешИзмМН LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвАдрЭлПочты
	{

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private string emailField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвАдрЭлПочты()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute("E-mail")]
		public string Email
		{
			get
			{
				return this.emailField;
			}
			set
			{
				this.emailField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвАдрЭлПочты));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвАдрЭлПочты object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвАдрЭлПочты object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвАдрЭлПочты object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвАдрЭлПочты obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвАдрЭлПочты);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвАдрЭлПочты obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвАдрЭлПочты Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвАдрЭлПочты)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвАдрЭлПочты object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвАдрЭлПочты object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвАдрЭлПочты object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвАдрЭлПочты obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвАдрЭлПочты);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвАдрЭлПочты obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвАдрЭлПочты LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвОбрЮЛ
	{

		private FNSVipULResponseСвЮЛСвОбрЮЛСпОбрЮЛ спОбрЮЛField;

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private string оГРНField;

		private System.DateTime датаОГРНField;

		private string регНомField;

		private System.DateTime датаРегField;

		private bool датаРегFieldSpecified;

		private string наимРОField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвОбрЮЛ()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
			this.спОбрЮЛField = new FNSVipULResponseСвЮЛСвОбрЮЛСпОбрЮЛ();
		}

		public FNSVipULResponseСвЮЛСвОбрЮЛСпОбрЮЛ СпОбрЮЛ
		{
			get
			{
				return this.спОбрЮЛField;
			}
			set
			{
				this.спОбрЮЛField = value;
			}
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ОГРН
		{
			get
			{
				return this.оГРНField;
			}
			set
			{
				this.оГРНField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаОГРН
		{
			get
			{
				return this.датаОГРНField;
			}
			set
			{
				this.датаОГРНField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string РегНом
		{
			get
			{
				return this.регНомField;
			}
			set
			{
				this.регНомField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаРег
		{
			get
			{
				return this.датаРегField;
			}
			set
			{
				this.датаРегField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool ДатаРегSpecified
		{
			get
			{
				return this.датаРегFieldSpecified;
			}
			set
			{
				this.датаРегFieldSpecified = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимРО
		{
			get
			{
				return this.наимРОField;
			}
			set
			{
				this.наимРОField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвОбрЮЛ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвОбрЮЛ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвОбрЮЛ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвОбрЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвОбрЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвОбрЮЛ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвОбрЮЛ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвОбрЮЛ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвОбрЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвОбрЮЛ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвОбрЮЛ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвОбрЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвОбрЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвОбрЮЛ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвОбрЮЛ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвОбрЮЛ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвОбрЮЛСпОбрЮЛ
	{

		private string кодСпОбрЮЛField;

		private string наимСпОбрЮЛField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодСпОбрЮЛ
		{
			get
			{
				return this.кодСпОбрЮЛField;
			}
			set
			{
				this.кодСпОбрЮЛField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимСпОбрЮЛ
		{
			get
			{
				return this.наимСпОбрЮЛField;
			}
			set
			{
				this.наимСпОбрЮЛField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвОбрЮЛСпОбрЮЛ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвОбрЮЛСпОбрЮЛ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвОбрЮЛСпОбрЮЛ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвОбрЮЛСпОбрЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвОбрЮЛСпОбрЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвОбрЮЛСпОбрЮЛ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвОбрЮЛСпОбрЮЛ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвОбрЮЛСпОбрЮЛ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвОбрЮЛСпОбрЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвОбрЮЛСпОбрЮЛ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвОбрЮЛСпОбрЮЛ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвОбрЮЛСпОбрЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвОбрЮЛСпОбрЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвОбрЮЛСпОбрЮЛ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвОбрЮЛСпОбрЮЛ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвОбрЮЛСпОбрЮЛ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвРегОрг
	{

		private ГРНДатаТип гРНДатаField;

		private string кодНОField;

		private string наимНОField;

		private string адрРОField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвРегОрг()
		{
			this.гРНДатаField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодНО
		{
			get
			{
				return this.кодНОField;
			}
			set
			{
				this.кодНОField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимНО
		{
			get
			{
				return this.наимНОField;
			}
			set
			{
				this.наимНОField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string АдрРО
		{
			get
			{
				return this.адрРОField;
			}
			set
			{
				this.адрРОField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвРегОрг));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвРегОрг object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвРегОрг object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвРегОрг object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвРегОрг obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвРегОрг);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвРегОрг obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвРегОрг Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвРегОрг)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвРегОрг object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвРегОрг object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвРегОрг object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвРегОрг obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвРегОрг);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвРегОрг obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвРегОрг LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвСтатус
	{

		private FNSVipULResponseСвЮЛСвСтатусСвСтатус свСтатусField;

		private FNSVipULResponseСвЮЛСвСтатусСвРешИсклЮЛ свРешИсклЮЛField;

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвСтатус()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
			this.свРешИсклЮЛField = new FNSVipULResponseСвЮЛСвСтатусСвРешИсклЮЛ();
			this.свСтатусField = new FNSVipULResponseСвЮЛСвСтатусСвСтатус();
		}

		public FNSVipULResponseСвЮЛСвСтатусСвСтатус СвСтатус
		{
			get
			{
				return this.свСтатусField;
			}
			set
			{
				this.свСтатусField = value;
			}
		}

		public FNSVipULResponseСвЮЛСвСтатусСвРешИсклЮЛ СвРешИсклЮЛ
		{
			get
			{
				return this.свРешИсклЮЛField;
			}
			set
			{
				this.свРешИсклЮЛField = value;
			}
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвСтатус));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвСтатус object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвСтатус object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвСтатус object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвСтатус obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвСтатус);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвСтатус obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвСтатус Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвСтатус)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвСтатус object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвСтатус object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвСтатус object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвСтатус obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвСтатус);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвСтатус obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвСтатус LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвСтатусСвСтатус
	{

		private string кодСтатусЮЛField;

		private string наимСтатусЮЛField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодСтатусЮЛ
		{
			get
			{
				return this.кодСтатусЮЛField;
			}
			set
			{
				this.кодСтатусЮЛField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимСтатусЮЛ
		{
			get
			{
				return this.наимСтатусЮЛField;
			}
			set
			{
				this.наимСтатусЮЛField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвСтатусСвСтатус));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвСтатусСвСтатус object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвСтатусСвСтатус object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвСтатусСвСтатус object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвСтатусСвСтатус obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвСтатусСвСтатус);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвСтатусСвСтатус obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвСтатусСвСтатус Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвСтатусСвСтатус)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвСтатусСвСтатус object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвСтатусСвСтатус object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвСтатусСвСтатус object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвСтатусСвСтатус obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвСтатусСвСтатус);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвСтатусСвСтатус obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвСтатусСвСтатус LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвСтатусСвРешИсклЮЛ
	{

		private System.DateTime датаРешField;

		private string номерРешField;

		private System.DateTime датаПубликацииField;

		private string номерЖурналаField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаРеш
		{
			get
			{
				return this.датаРешField;
			}
			set
			{
				this.датаРешField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НомерРеш
		{
			get
			{
				return this.номерРешField;
			}
			set
			{
				this.номерРешField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаПубликации
		{
			get
			{
				return this.датаПубликацииField;
			}
			set
			{
				this.датаПубликацииField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НомерЖурнала
		{
			get
			{
				return this.номерЖурналаField;
			}
			set
			{
				this.номерЖурналаField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвСтатусСвРешИсклЮЛ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвСтатусСвРешИсклЮЛ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвСтатусСвРешИсклЮЛ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвСтатусСвРешИсклЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвСтатусСвРешИсклЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвСтатусСвРешИсклЮЛ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвСтатусСвРешИсклЮЛ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвСтатусСвРешИсклЮЛ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвСтатусСвРешИсклЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвСтатусСвРешИсклЮЛ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвСтатусСвРешИсклЮЛ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвСтатусСвРешИсклЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвСтатусСвРешИсклЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвСтатусСвРешИсклЮЛ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвСтатусСвРешИсклЮЛ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвСтатусСвРешИсклЮЛ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвПрекрЮЛ
	{

		private FNSVipULResponseСвЮЛСвПрекрЮЛСпПрекрЮЛ спПрекрЮЛField;

		private СвРегОргТип свРегОргField;

		private ГРНДатаТип гРНДатаField;

		private System.DateTime датаПрекрЮЛField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвПрекрЮЛ()
		{
			this.гРНДатаField = new ГРНДатаТип();
			this.свРегОргField = new СвРегОргТип();
			this.спПрекрЮЛField = new FNSVipULResponseСвЮЛСвПрекрЮЛСпПрекрЮЛ();
		}

		public FNSVipULResponseСвЮЛСвПрекрЮЛСпПрекрЮЛ СпПрекрЮЛ
		{
			get
			{
				return this.спПрекрЮЛField;
			}
			set
			{
				this.спПрекрЮЛField = value;
			}
		}

		public СвРегОргТип СвРегОрг
		{
			get
			{
				return this.свРегОргField;
			}
			set
			{
				this.свРегОргField = value;
			}
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаПрекрЮЛ
		{
			get
			{
				return this.датаПрекрЮЛField;
			}
			set
			{
				this.датаПрекрЮЛField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвПрекрЮЛ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвПрекрЮЛ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвПрекрЮЛ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвПрекрЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвПрекрЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвПрекрЮЛ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвПрекрЮЛ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвПрекрЮЛ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвПрекрЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвПрекрЮЛ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвПрекрЮЛ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвПрекрЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвПрекрЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвПрекрЮЛ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвПрекрЮЛ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвПрекрЮЛ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвПрекрЮЛСпПрекрЮЛ
	{

		private string кодСпПрекрЮЛField;

		private string наимСпПрекрЮЛField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодСпПрекрЮЛ
		{
			get
			{
				return this.кодСпПрекрЮЛField;
			}
			set
			{
				this.кодСпПрекрЮЛField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимСпПрекрЮЛ
		{
			get
			{
				return this.наимСпПрекрЮЛField;
			}
			set
			{
				this.наимСпПрекрЮЛField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвПрекрЮЛСпПрекрЮЛ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвПрекрЮЛСпПрекрЮЛ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвПрекрЮЛСпПрекрЮЛ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвПрекрЮЛСпПрекрЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвПрекрЮЛСпПрекрЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвПрекрЮЛСпПрекрЮЛ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвПрекрЮЛСпПрекрЮЛ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвПрекрЮЛСпПрекрЮЛ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвПрекрЮЛСпПрекрЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвПрекрЮЛСпПрекрЮЛ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвПрекрЮЛСпПрекрЮЛ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвПрекрЮЛСпПрекрЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвПрекрЮЛСпПрекрЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвПрекрЮЛСпПрекрЮЛ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвПрекрЮЛСпПрекрЮЛ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвПрекрЮЛСпПрекрЮЛ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public partial class СвРегОргТип
	{

		private string кодНОField;

		private string наимНОField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодНО
		{
			get
			{
				return this.кодНОField;
			}
			set
			{
				this.кодНОField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимНО
		{
			get
			{
				return this.наимНОField;
			}
			set
			{
				this.наимНОField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвРегОргТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current СвРегОргТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an СвРегОргТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output СвРегОргТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out СвРегОргТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвРегОргТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out СвРегОргТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static СвРегОргТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((СвРегОргТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current СвРегОргТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an СвРегОргТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output СвРегОргТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out СвРегОргТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвРегОргТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out СвРегОргТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static СвРегОргТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвУчетНО
	{

		private СвНОТип свНОField;

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private string иННField;

		private string кППField;

		private System.DateTime датаПостУчField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвУчетНО()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
			this.свНОField = new СвНОТип();
		}

		public СвНОТип СвНО
		{
			get
			{
				return this.свНОField;
			}
			set
			{
				this.свНОField = value;
			}
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ИНН
		{
			get
			{
				return this.иННField;
			}
			set
			{
				this.иННField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КПП
		{
			get
			{
				return this.кППField;
			}
			set
			{
				this.кППField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаПостУч
		{
			get
			{
				return this.датаПостУчField;
			}
			set
			{
				this.датаПостУчField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвУчетНО));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчетНО object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвУчетНО object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчетНО object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчетНО obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчетНО);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчетНО obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчетНО Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвУчетНО)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчетНО object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвУчетНО object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчетНО object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчетНО obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчетНО);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчетНО obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчетНО LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public partial class СвНОТип
	{

		private string кодНОField;

		private string наимНОField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодНО
		{
			get
			{
				return this.кодНОField;
			}
			set
			{
				this.кодНОField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимНО
		{
			get
			{
				return this.наимНОField;
			}
			set
			{
				this.наимНОField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвНОТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current СвНОТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an СвНОТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output СвНОТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out СвНОТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвНОТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out СвНОТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static СвНОТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((СвНОТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current СвНОТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an СвНОТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output СвНОТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out СвНОТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвНОТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out СвНОТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static СвНОТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвРегПФ
	{

		private FNSVipULResponseСвЮЛСвРегПФСвОргПФ свОргПФField;

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private string регНомПФField;

		private System.DateTime датаРегField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвРегПФ()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
			this.свОргПФField = new FNSVipULResponseСвЮЛСвРегПФСвОргПФ();
		}

		public FNSVipULResponseСвЮЛСвРегПФСвОргПФ СвОргПФ
		{
			get
			{
				return this.свОргПФField;
			}
			set
			{
				this.свОргПФField = value;
			}
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string РегНомПФ
		{
			get
			{
				return this.регНомПФField;
			}
			set
			{
				this.регНомПФField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаРег
		{
			get
			{
				return this.датаРегField;
			}
			set
			{
				this.датаРегField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвРегПФ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвРегПФ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвРегПФ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвРегПФ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвРегПФ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвРегПФ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвРегПФ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвРегПФ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвРегПФ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвРегПФ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвРегПФ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвРегПФ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвРегПФ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвРегПФ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвРегПФ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвРегПФ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвРегПФСвОргПФ
	{

		private string кодПФField;

		private string наимПФField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодПФ
		{
			get
			{
				return this.кодПФField;
			}
			set
			{
				this.кодПФField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимПФ
		{
			get
			{
				return this.наимПФField;
			}
			set
			{
				this.наимПФField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвРегПФСвОргПФ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвРегПФСвОргПФ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвРегПФСвОргПФ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвРегПФСвОргПФ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвРегПФСвОргПФ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвРегПФСвОргПФ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвРегПФСвОргПФ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвРегПФСвОргПФ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвРегПФСвОргПФ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвРегПФСвОргПФ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвРегПФСвОргПФ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвРегПФСвОргПФ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвРегПФСвОргПФ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвРегПФСвОргПФ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвРегПФСвОргПФ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвРегПФСвОргПФ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвРегФСС
	{

		private FNSVipULResponseСвЮЛСвРегФСССвОргФСС свОргФССField;

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private string регНомФССField;

		private System.DateTime датаРегField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвРегФСС()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
			this.свОргФССField = new FNSVipULResponseСвЮЛСвРегФСССвОргФСС();
		}

		public FNSVipULResponseСвЮЛСвРегФСССвОргФСС СвОргФСС
		{
			get
			{
				return this.свОргФССField;
			}
			set
			{
				this.свОргФССField = value;
			}
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string РегНомФСС
		{
			get
			{
				return this.регНомФССField;
			}
			set
			{
				this.регНомФССField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаРег
		{
			get
			{
				return this.датаРегField;
			}
			set
			{
				this.датаРегField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвРегФСС));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвРегФСС object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвРегФСС object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвРегФСС object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвРегФСС obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвРегФСС);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвРегФСС obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвРегФСС Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвРегФСС)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвРегФСС object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвРегФСС object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвРегФСС object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвРегФСС obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвРегФСС);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвРегФСС obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвРегФСС LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвРегФСССвОргФСС
	{

		private string кодФССField;

		private string наимФССField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодФСС
		{
			get
			{
				return this.кодФССField;
			}
			set
			{
				this.кодФССField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимФСС
		{
			get
			{
				return this.наимФССField;
			}
			set
			{
				this.наимФССField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвРегФСССвОргФСС));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвРегФСССвОргФСС object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвРегФСССвОргФСС object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвРегФСССвОргФСС object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвРегФСССвОргФСС obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвРегФСССвОргФСС);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвРегФСССвОргФСС obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвРегФСССвОргФСС Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвРегФСССвОргФСС)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвРегФСССвОргФСС object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвРегФСССвОргФСС object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвРегФСССвОргФСС object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвРегФСССвОргФСС obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвРегФСССвОргФСС);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвРегФСССвОргФСС obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвРегФСССвОргФСС LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвУстКап
	{

		private ДробьТип доляРубляField;

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private FNSVipULResponseСвЮЛСвУстКапСведУмУК сведУмУКField;

		private FNSVipULResponseСвЮЛСвУстКапНаимВидКап наимВидКапField;

		private decimal сумКапField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвУстКап()
		{
			this.сведУмУКField = new FNSVipULResponseСвЮЛСвУстКапСведУмУК();
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
			this.доляРубляField = new ДробьТип();
		}

		public ДробьТип ДоляРубля
		{
			get
			{
				return this.доляРубляField;
			}
			set
			{
				this.доляРубляField = value;
			}
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		public FNSVipULResponseСвЮЛСвУстКапСведУмУК СведУмУК
		{
			get
			{
				return this.сведУмУКField;
			}
			set
			{
				this.сведУмУКField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public FNSVipULResponseСвЮЛСвУстКапНаимВидКап НаимВидКап
		{
			get
			{
				return this.наимВидКапField;
			}
			set
			{
				this.наимВидКапField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public decimal СумКап
		{
			get
			{
				return this.сумКапField;
			}
			set
			{
				this.сумКапField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвУстКап));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУстКап object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвУстКап object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУстКап object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУстКап obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУстКап);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУстКап obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУстКап Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвУстКап)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУстКап object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвУстКап object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУстКап object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУстКап obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУстКап);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУстКап obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУстКап LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public partial class ДробьТип
	{

		private string числитField;

		private string знаменатField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
		public string Числит
		{
			get
			{
				return this.числитField;
			}
			set
			{
				this.числитField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
		public string Знаменат
		{
			get
			{
				return this.знаменатField;
			}
			set
			{
				this.знаменатField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДробьТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current ДробьТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an ДробьТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output ДробьТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out ДробьТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ДробьТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out ДробьТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static ДробьТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((ДробьТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current ДробьТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an ДробьТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output ДробьТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out ДробьТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ДробьТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out ДробьТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static ДробьТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвУстКапСведУмУК
	{

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private decimal велУмУКField;

		private System.DateTime датаРешField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвУстКапСведУмУК()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public decimal ВелУмУК
		{
			get
			{
				return this.велУмУКField;
			}
			set
			{
				this.велУмУКField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаРеш
		{
			get
			{
				return this.датаРешField;
			}
			set
			{
				this.датаРешField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвУстКапСведУмУК));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУстКапСведУмУК object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвУстКапСведУмУК object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУстКапСведУмУК object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУстКапСведУмУК obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУстКапСведУмУК);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУстКапСведУмУК obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУстКапСведУмУК Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвУстКапСведУмУК)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУстКапСведУмУК object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвУстКапСведУмУК object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУстКапСведУмУК object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУстКапСведУмУК obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУстКапСведУмУК);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУстКапСведУмУК obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУстКапСведУмУК LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public enum FNSVipULResponseСвЮЛСвУстКапНаимВидКап
	{

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("УСТАВНЫЙ КАПИТАЛ")]
		УСТАВНЫЙКАПИТАЛ,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("СКЛАДОЧНЫЙ КАПИТАЛ")]
		СКЛАДОЧНЫЙКАПИТАЛ,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("УСТАВНЫЙ ФОНД")]
		УСТАВНЫЙФОНД,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("ПАЕВЫЕ ВЗНОСЫ")]
		ПАЕВЫЕВЗНОСЫ,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("ПАЕВОЙ ФОНД")]
		ПАЕВОЙФОНД,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвТипУстав
	{

		private FNSVipULResponseСвЮЛСвТипУставСвНПАУтвТУ свНПАУтвТУField;

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвТипУстав()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
			this.свНПАУтвТУField = new FNSVipULResponseСвЮЛСвТипУставСвНПАУтвТУ();
		}

		public FNSVipULResponseСвЮЛСвТипУставСвНПАУтвТУ СвНПАУтвТУ
		{
			get
			{
				return this.свНПАУтвТУField;
			}
			set
			{
				this.свНПАУтвТУField = value;
			}
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвТипУстав));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвТипУстав object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвТипУстав object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвТипУстав object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвТипУстав obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвТипУстав);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвТипУстав obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвТипУстав Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвТипУстав)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвТипУстав object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвТипУстав object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвТипУстав object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвТипУстав obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвТипУстав);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвТипУстав obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвТипУстав LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвТипУставСвНПАУтвТУ
	{

		private string наимГОУтвТУField;

		private string видНПАField;

		private string наимНПАField;

		private string номерНПАField;

		private System.DateTime датаНПАField;

		private string номерПрилField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимГОУтвТУ
		{
			get
			{
				return this.наимГОУтвТУField;
			}
			set
			{
				this.наимГОУтвТУField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ВидНПА
		{
			get
			{
				return this.видНПАField;
			}
			set
			{
				this.видНПАField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимНПА
		{
			get
			{
				return this.наимНПАField;
			}
			set
			{
				this.наимНПАField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НомерНПА
		{
			get
			{
				return this.номерНПАField;
			}
			set
			{
				this.номерНПАField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаНПА
		{
			get
			{
				return this.датаНПАField;
			}
			set
			{
				this.датаНПАField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НомерПрил
		{
			get
			{
				return this.номерПрилField;
			}
			set
			{
				this.номерПрилField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвТипУставСвНПАУтвТУ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвТипУставСвНПАУтвТУ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвТипУставСвНПАУтвТУ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвТипУставСвНПАУтвТУ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвТипУставСвНПАУтвТУ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвТипУставСвНПАУтвТУ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвТипУставСвНПАУтвТУ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвТипУставСвНПАУтвТУ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвТипУставСвНПАУтвТУ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвТипУставСвНПАУтвТУ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвТипУставСвНПАУтвТУ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвТипУставСвНПАУтвТУ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвТипУставСвНПАУтвТУ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвТипУставСвНПАУтвТУ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвТипУставСвНПАУтвТУ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвТипУставСвНПАУтвТУ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвУпрОрг
	{

		private ГРНДатаТип гРНДатаПервField;

		private СвЮЛЕГРЮЛТип наимИННЮЛField;

		private СвРегИнЮЛЕГРЮЛТип свРегИнField;

		private List<FNSVipULResponseСвЮЛСвУпрОргСвНедДанУпрОрг> свНедДанУпрОргField;

		private FNSVipULResponseСвЮЛСвУпрОргСвПредЮЛ свПредЮЛField;

		private АдрРФЕГРЮЛТип свАдрРФField;

		private СвНомТелТип свНомТелField;

		private FNSVipULResponseСвЮЛСвУпрОргПредИнЮЛ предИнЮЛField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвУпрОрг()
		{
			this.предИнЮЛField = new FNSVipULResponseСвЮЛСвУпрОргПредИнЮЛ();
			this.свНомТелField = new СвНомТелТип();
			this.свАдрРФField = new АдрРФЕГРЮЛТип();
			this.свПредЮЛField = new FNSVipULResponseСвЮЛСвУпрОргСвПредЮЛ();
			this.свНедДанУпрОргField = new List<FNSVipULResponseСвЮЛСвУпрОргСвНедДанУпрОрг>();
			this.свРегИнField = new СвРегИнЮЛЕГРЮЛТип();
			this.наимИННЮЛField = new СвЮЛЕГРЮЛТип();
			this.гРНДатаПервField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДатаПерв
		{
			get
			{
				return this.гРНДатаПервField;
			}
			set
			{
				this.гРНДатаПервField = value;
			}
		}

		public СвЮЛЕГРЮЛТип НаимИННЮЛ
		{
			get
			{
				return this.наимИННЮЛField;
			}
			set
			{
				this.наимИННЮЛField = value;
			}
		}

		public СвРегИнЮЛЕГРЮЛТип СвРегИн
		{
			get
			{
				return this.свРегИнField;
			}
			set
			{
				this.свРегИнField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвНедДанУпрОрг")]
		public List<FNSVipULResponseСвЮЛСвУпрОргСвНедДанУпрОрг> СвНедДанУпрОрг
		{
			get
			{
				return this.свНедДанУпрОргField;
			}
			set
			{
				this.свНедДанУпрОргField = value;
			}
		}

		public FNSVipULResponseСвЮЛСвУпрОргСвПредЮЛ СвПредЮЛ
		{
			get
			{
				return this.свПредЮЛField;
			}
			set
			{
				this.свПредЮЛField = value;
			}
		}

		public АдрРФЕГРЮЛТип СвАдрРФ
		{
			get
			{
				return this.свАдрРФField;
			}
			set
			{
				this.свАдрРФField = value;
			}
		}

		public СвНомТелТип СвНомТел
		{
			get
			{
				return this.свНомТелField;
			}
			set
			{
				this.свНомТелField = value;
			}
		}

		public FNSVipULResponseСвЮЛСвУпрОргПредИнЮЛ ПредИнЮЛ
		{
			get
			{
				return this.предИнЮЛField;
			}
			set
			{
				this.предИнЮЛField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвУпрОрг));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУпрОрг object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвУпрОрг object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУпрОрг object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУпрОрг obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУпрОрг);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУпрОрг obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУпрОрг Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвУпрОрг)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУпрОрг object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвУпрОрг object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУпрОрг object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУпрОрг obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУпрОрг);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУпрОрг obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУпрОрг LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public partial class СвЮЛЕГРЮЛТип
	{

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private string оГРНField;

		private string иННField;

		private string наимЮЛПолнField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public СвЮЛЕГРЮЛТип()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ОГРН
		{
			get
			{
				return this.оГРНField;
			}
			set
			{
				this.оГРНField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ИНН
		{
			get
			{
				return this.иННField;
			}
			set
			{
				this.иННField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимЮЛПолн
		{
			get
			{
				return this.наимЮЛПолнField;
			}
			set
			{
				this.наимЮЛПолнField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвЮЛЕГРЮЛТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current СвЮЛЕГРЮЛТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an СвЮЛЕГРЮЛТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output СвЮЛЕГРЮЛТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out СвЮЛЕГРЮЛТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвЮЛЕГРЮЛТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out СвЮЛЕГРЮЛТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static СвЮЛЕГРЮЛТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((СвЮЛЕГРЮЛТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current СвЮЛЕГРЮЛТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an СвЮЛЕГРЮЛТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output СвЮЛЕГРЮЛТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out СвЮЛЕГРЮЛТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвЮЛЕГРЮЛТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out СвЮЛЕГРЮЛТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static СвЮЛЕГРЮЛТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public partial class СвРегИнЮЛЕГРЮЛТип
	{

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private string оКСМField;

		private string наимСтранField;

		private System.DateTime датаРегField;

		private bool датаРегFieldSpecified;

		private string регНомерField;

		private string наимРегОргField;

		private string адрСтрField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public СвРегИнЮЛЕГРЮЛТип()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ОКСМ
		{
			get
			{
				return this.оКСМField;
			}
			set
			{
				this.оКСМField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимСтран
		{
			get
			{
				return this.наимСтранField;
			}
			set
			{
				this.наимСтранField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаРег
		{
			get
			{
				return this.датаРегField;
			}
			set
			{
				this.датаРегField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool ДатаРегSpecified
		{
			get
			{
				return this.датаРегFieldSpecified;
			}
			set
			{
				this.датаРегFieldSpecified = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string РегНомер
		{
			get
			{
				return this.регНомерField;
			}
			set
			{
				this.регНомерField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимРегОрг
		{
			get
			{
				return this.наимРегОргField;
			}
			set
			{
				this.наимРегОргField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string АдрСтр
		{
			get
			{
				return this.адрСтрField;
			}
			set
			{
				this.адрСтрField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвРегИнЮЛЕГРЮЛТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current СвРегИнЮЛЕГРЮЛТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an СвРегИнЮЛЕГРЮЛТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output СвРегИнЮЛЕГРЮЛТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out СвРегИнЮЛЕГРЮЛТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвРегИнЮЛЕГРЮЛТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out СвРегИнЮЛЕГРЮЛТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static СвРегИнЮЛЕГРЮЛТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((СвРегИнЮЛЕГРЮЛТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current СвРегИнЮЛЕГРЮЛТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an СвРегИнЮЛЕГРЮЛТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output СвРегИнЮЛЕГРЮЛТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out СвРегИнЮЛЕГРЮЛТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвРегИнЮЛЕГРЮЛТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out СвРегИнЮЛЕГРЮЛТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static СвРегИнЮЛЕГРЮЛТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвУпрОргСвНедДанУпрОрг
	{

		private РешСудТип решСудНедДанУпрОргField;

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private FNSVipULResponseСвЮЛСвУпрОргСвНедДанУпрОргПризнНедДанУпрОрг признНедДанУпрОргField;

		private string текстНедДанУпрОргField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвУпрОргСвНедДанУпрОрг()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
			this.решСудНедДанУпрОргField = new РешСудТип();
		}

		public РешСудТип РешСудНедДанУпрОрг
		{
			get
			{
				return this.решСудНедДанУпрОргField;
			}
			set
			{
				this.решСудНедДанУпрОргField = value;
			}
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public FNSVipULResponseСвЮЛСвУпрОргСвНедДанУпрОргПризнНедДанУпрОрг ПризнНедДанУпрОрг
		{
			get
			{
				return this.признНедДанУпрОргField;
			}
			set
			{
				this.признНедДанУпрОргField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ТекстНедДанУпрОрг
		{
			get
			{
				return this.текстНедДанУпрОргField;
			}
			set
			{
				this.текстНедДанУпрОргField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвУпрОргСвНедДанУпрОрг));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУпрОргСвНедДанУпрОрг object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвУпрОргСвНедДанУпрОрг object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУпрОргСвНедДанУпрОрг object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУпрОргСвНедДанУпрОрг obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУпрОргСвНедДанУпрОрг);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУпрОргСвНедДанУпрОрг obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУпрОргСвНедДанУпрОрг Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвУпрОргСвНедДанУпрОрг)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУпрОргСвНедДанУпрОрг object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвУпрОргСвНедДанУпрОрг object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУпрОргСвНедДанУпрОрг object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУпрОргСвНедДанУпрОрг obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУпрОргСвНедДанУпрОрг);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУпрОргСвНедДанУпрОрг obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУпрОргСвНедДанУпрОрг LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public enum FNSVipULResponseСвЮЛСвУпрОргСвНедДанУпрОргПризнНедДанУпрОрг
	{

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("2")]
		Item2,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("3")]
		Item3,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвУпрОргСвПредЮЛ
	{

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private string наимПредЮЛField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвУпрОргСвПредЮЛ()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимПредЮЛ
		{
			get
			{
				return this.наимПредЮЛField;
			}
			set
			{
				this.наимПредЮЛField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвУпрОргСвПредЮЛ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУпрОргСвПредЮЛ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвУпрОргСвПредЮЛ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУпрОргСвПредЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУпрОргСвПредЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУпрОргСвПредЮЛ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУпрОргСвПредЮЛ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУпрОргСвПредЮЛ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвУпрОргСвПредЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУпрОргСвПредЮЛ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвУпрОргСвПредЮЛ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУпрОргСвПредЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУпрОргСвПредЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУпрОргСвПредЮЛ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУпрОргСвПредЮЛ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУпрОргСвПредЮЛ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public partial class СвНомТелТип
	{

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private string номТелField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public СвНомТелТип()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НомТел
		{
			get
			{
				return this.номТелField;
			}
			set
			{
				this.номТелField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвНомТелТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current СвНомТелТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an СвНомТелТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output СвНомТелТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out СвНомТелТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвНомТелТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out СвНомТелТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static СвНомТелТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((СвНомТелТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current СвНомТелТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an СвНомТелТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output СвНомТелТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out СвНомТелТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвНомТелТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out СвНомТелТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static СвНомТелТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвУпрОргПредИнЮЛ
	{

		private ГРНДатаТип гРНДатаПервField;

		private СвФЛЕГРЮЛТип свФЛField;

		private СвНомТелТип свНомТелField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвУпрОргПредИнЮЛ()
		{
			this.свНомТелField = new СвНомТелТип();
			this.свФЛField = new СвФЛЕГРЮЛТип();
			this.гРНДатаПервField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДатаПерв
		{
			get
			{
				return this.гРНДатаПервField;
			}
			set
			{
				this.гРНДатаПервField = value;
			}
		}

		public СвФЛЕГРЮЛТип СвФЛ
		{
			get
			{
				return this.свФЛField;
			}
			set
			{
				this.свФЛField = value;
			}
		}

		public СвНомТелТип СвНомТел
		{
			get
			{
				return this.свНомТелField;
			}
			set
			{
				this.свНомТелField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвУпрОргПредИнЮЛ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУпрОргПредИнЮЛ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвУпрОргПредИнЮЛ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУпрОргПредИнЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУпрОргПредИнЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУпрОргПредИнЮЛ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУпрОргПредИнЮЛ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУпрОргПредИнЮЛ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвУпрОргПредИнЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУпрОргПредИнЮЛ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвУпрОргПредИнЮЛ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУпрОргПредИнЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУпрОргПредИнЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУпрОргПредИнЮЛ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУпрОргПредИнЮЛ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУпрОргПредИнЮЛ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public partial class СвФЛЕГРЮЛТип
	{

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private string фамилияField;

		private string имяField;

		private string отчествоField;

		private string иННФЛField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public СвФЛЕГРЮЛТип()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string Фамилия
		{
			get
			{
				return this.фамилияField;
			}
			set
			{
				this.фамилияField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string Имя
		{
			get
			{
				return this.имяField;
			}
			set
			{
				this.имяField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string Отчество
		{
			get
			{
				return this.отчествоField;
			}
			set
			{
				this.отчествоField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ИННФЛ
		{
			get
			{
				return this.иННФЛField;
			}
			set
			{
				this.иННФЛField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвФЛЕГРЮЛТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current СвФЛЕГРЮЛТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an СвФЛЕГРЮЛТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output СвФЛЕГРЮЛТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out СвФЛЕГРЮЛТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвФЛЕГРЮЛТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out СвФЛЕГРЮЛТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static СвФЛЕГРЮЛТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((СвФЛЕГРЮЛТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current СвФЛЕГРЮЛТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an СвФЛЕГРЮЛТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output СвФЛЕГРЮЛТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out СвФЛЕГРЮЛТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвФЛЕГРЮЛТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out СвФЛЕГРЮЛТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static СвФЛЕГРЮЛТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСведДолжнФЛ
	{

		private ГРНДатаТип гРНДатаПервField;

		private СвФЛЕГРЮЛТип свФЛField;

		private FNSVipULResponseСвЮЛСведДолжнФЛСвДолжн свДолжнField;

		private СвНомТелТип свНомТелField;

		private List<FNSVipULResponseСвЮЛСведДолжнФЛСвНедДанДолжнФЛ> свНедДанДолжнФЛField;

		private List<FNSVipULResponseСвЮЛСведДолжнФЛСвДискв> свДисквField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСведДолжнФЛ()
		{
			this.свДисквField = new List<FNSVipULResponseСвЮЛСведДолжнФЛСвДискв>();
			this.свНедДанДолжнФЛField = new List<FNSVipULResponseСвЮЛСведДолжнФЛСвНедДанДолжнФЛ>();
			this.свНомТелField = new СвНомТелТип();
			this.свДолжнField = new FNSVipULResponseСвЮЛСведДолжнФЛСвДолжн();
			this.свФЛField = new СвФЛЕГРЮЛТип();
			this.гРНДатаПервField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДатаПерв
		{
			get
			{
				return this.гРНДатаПервField;
			}
			set
			{
				this.гРНДатаПервField = value;
			}
		}

		public СвФЛЕГРЮЛТип СвФЛ
		{
			get
			{
				return this.свФЛField;
			}
			set
			{
				this.свФЛField = value;
			}
		}

		public FNSVipULResponseСвЮЛСведДолжнФЛСвДолжн СвДолжн
		{
			get
			{
				return this.свДолжнField;
			}
			set
			{
				this.свДолжнField = value;
			}
		}

		public СвНомТелТип СвНомТел
		{
			get
			{
				return this.свНомТелField;
			}
			set
			{
				this.свНомТелField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвНедДанДолжнФЛ")]
		public List<FNSVipULResponseСвЮЛСведДолжнФЛСвНедДанДолжнФЛ> СвНедДанДолжнФЛ
		{
			get
			{
				return this.свНедДанДолжнФЛField;
			}
			set
			{
				this.свНедДанДолжнФЛField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвДискв")]
		public List<FNSVipULResponseСвЮЛСведДолжнФЛСвДискв> СвДискв
		{
			get
			{
				return this.свДисквField;
			}
			set
			{
				this.свДисквField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСведДолжнФЛ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСведДолжнФЛ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСведДолжнФЛ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСведДолжнФЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСведДолжнФЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСведДолжнФЛ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСведДолжнФЛ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСведДолжнФЛ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСведДолжнФЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСведДолжнФЛ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСведДолжнФЛ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСведДолжнФЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСведДолжнФЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСведДолжнФЛ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСведДолжнФЛ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСведДолжнФЛ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСведДолжнФЛСвДолжн
	{

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private string оГРНИПField;

		private string видДолжнField;

		private string наимВидДолжнField;

		private string наимДолжнField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСведДолжнФЛСвДолжн()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ОГРНИП
		{
			get
			{
				return this.оГРНИПField;
			}
			set
			{
				this.оГРНИПField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ВидДолжн
		{
			get
			{
				return this.видДолжнField;
			}
			set
			{
				this.видДолжнField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимВидДолжн
		{
			get
			{
				return this.наимВидДолжнField;
			}
			set
			{
				this.наимВидДолжнField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимДолжн
		{
			get
			{
				return this.наимДолжнField;
			}
			set
			{
				this.наимДолжнField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСведДолжнФЛСвДолжн));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСведДолжнФЛСвДолжн object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСведДолжнФЛСвДолжн object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСведДолжнФЛСвДолжн object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСведДолжнФЛСвДолжн obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСведДолжнФЛСвДолжн);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСведДолжнФЛСвДолжн obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСведДолжнФЛСвДолжн Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСведДолжнФЛСвДолжн)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСведДолжнФЛСвДолжн object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСведДолжнФЛСвДолжн object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСведДолжнФЛСвДолжн object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСведДолжнФЛСвДолжн obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСведДолжнФЛСвДолжн);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСведДолжнФЛСвДолжн obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСведДолжнФЛСвДолжн LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСведДолжнФЛСвНедДанДолжнФЛ
	{

		private РешСудТип решСудНедДанДолжнФЛField;

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private FNSVipULResponseСвЮЛСведДолжнФЛСвНедДанДолжнФЛПризнНедДанДолжнФЛ признНедДанДолжнФЛField;

		private string текстНедДанДолжнФЛField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСведДолжнФЛСвНедДанДолжнФЛ()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
			this.решСудНедДанДолжнФЛField = new РешСудТип();
		}

		public РешСудТип РешСудНедДанДолжнФЛ
		{
			get
			{
				return this.решСудНедДанДолжнФЛField;
			}
			set
			{
				this.решСудНедДанДолжнФЛField = value;
			}
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public FNSVipULResponseСвЮЛСведДолжнФЛСвНедДанДолжнФЛПризнНедДанДолжнФЛ ПризнНедДанДолжнФЛ
		{
			get
			{
				return this.признНедДанДолжнФЛField;
			}
			set
			{
				this.признНедДанДолжнФЛField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ТекстНедДанДолжнФЛ
		{
			get
			{
				return this.текстНедДанДолжнФЛField;
			}
			set
			{
				this.текстНедДанДолжнФЛField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСведДолжнФЛСвНедДанДолжнФЛ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСведДолжнФЛСвНедДанДолжнФЛ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСведДолжнФЛСвНедДанДолжнФЛ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСведДолжнФЛСвНедДанДолжнФЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСведДолжнФЛСвНедДанДолжнФЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСведДолжнФЛСвНедДанДолжнФЛ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСведДолжнФЛСвНедДанДолжнФЛ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСведДолжнФЛСвНедДанДолжнФЛ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСведДолжнФЛСвНедДанДолжнФЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСведДолжнФЛСвНедДанДолжнФЛ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСведДолжнФЛСвНедДанДолжнФЛ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСведДолжнФЛСвНедДанДолжнФЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСведДолжнФЛСвНедДанДолжнФЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСведДолжнФЛСвНедДанДолжнФЛ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСведДолжнФЛСвНедДанДолжнФЛ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСведДолжнФЛСвНедДанДолжнФЛ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public enum FNSVipULResponseСвЮЛСведДолжнФЛСвНедДанДолжнФЛПризнНедДанДолжнФЛ
	{

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("1")]
		Item1,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("2")]
		Item2,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("3")]
		Item3,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСведДолжнФЛСвДискв
	{

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private System.DateTime датаНачДисквField;

		private System.DateTime датаОкончДисквField;

		private System.DateTime датаРешField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСведДолжнФЛСвДискв()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаНачДискв
		{
			get
			{
				return this.датаНачДисквField;
			}
			set
			{
				this.датаНачДисквField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаОкончДискв
		{
			get
			{
				return this.датаОкончДисквField;
			}
			set
			{
				this.датаОкончДисквField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаРеш
		{
			get
			{
				return this.датаРешField;
			}
			set
			{
				this.датаРешField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСведДолжнФЛСвДискв));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСведДолжнФЛСвДискв object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСведДолжнФЛСвДискв object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСведДолжнФЛСвДискв object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСведДолжнФЛСвДискв obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСведДолжнФЛСвДискв);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСведДолжнФЛСвДискв obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСведДолжнФЛСвДискв Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСведДолжнФЛСвДискв)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСведДолжнФЛСвДискв object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСведДолжнФЛСвДискв object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСведДолжнФЛСвДискв object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСведДолжнФЛСвДискв obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСведДолжнФЛСвДискв);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСведДолжнФЛСвДискв obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСведДолжнФЛСвДискв LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвУчредит
	{

		private List<FNSVipULResponseСвЮЛСвУчредитУчрЮЛРос> учрЮЛРосField;

		private List<FNSVipULResponseСвЮЛСвУчредитУчрЮЛИн> учрЮЛИнField;

		private List<FNSVipULResponseСвЮЛСвУчредитУчрФЛ> учрФЛField;

		private List<FNSVipULResponseСвЮЛСвУчредитУчрРФСубМО> учрРФСубМОField;

		private List<FNSVipULResponseСвЮЛСвУчредитУчрПИФ> учрПИФField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвУчредит()
		{
			this.учрПИФField = new List<FNSVipULResponseСвЮЛСвУчредитУчрПИФ>();
			this.учрРФСубМОField = new List<FNSVipULResponseСвЮЛСвУчредитУчрРФСубМО>();
			this.учрФЛField = new List<FNSVipULResponseСвЮЛСвУчредитУчрФЛ>();
			this.учрЮЛИнField = new List<FNSVipULResponseСвЮЛСвУчредитУчрЮЛИн>();
			this.учрЮЛРосField = new List<FNSVipULResponseСвЮЛСвУчредитУчрЮЛРос>();
		}

		[System.Xml.Serialization.XmlElementAttribute("УчрЮЛРос")]
		public List<FNSVipULResponseСвЮЛСвУчредитУчрЮЛРос> УчрЮЛРос
		{
			get
			{
				return this.учрЮЛРосField;
			}
			set
			{
				this.учрЮЛРосField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("УчрЮЛИн")]
		public List<FNSVipULResponseСвЮЛСвУчредитУчрЮЛИн> УчрЮЛИн
		{
			get
			{
				return this.учрЮЛИнField;
			}
			set
			{
				this.учрЮЛИнField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("УчрФЛ")]
		public List<FNSVipULResponseСвЮЛСвУчредитУчрФЛ> УчрФЛ
		{
			get
			{
				return this.учрФЛField;
			}
			set
			{
				this.учрФЛField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("УчрРФСубМО")]
		public List<FNSVipULResponseСвЮЛСвУчредитУчрРФСубМО> УчрРФСубМО
		{
			get
			{
				return this.учрРФСубМОField;
			}
			set
			{
				this.учрРФСубМОField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("УчрПИФ")]
		public List<FNSVipULResponseСвЮЛСвУчредитУчрПИФ> УчрПИФ
		{
			get
			{
				return this.учрПИФField;
			}
			set
			{
				this.учрПИФField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвУчредит));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчредит object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвУчредит object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчредит object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчредит obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчредит);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчредит obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчредит Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвУчредит)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчредит object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвУчредит object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчредит object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчредит obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчредит);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчредит obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчредит LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвУчредитУчрЮЛРос
	{

		private ГРНДатаТип гРНДатаПервField;

		private СвЮЛЕГРЮЛТип наимИННЮЛField;

		private FNSVipULResponseСвЮЛСвУчредитУчрЮЛРосСвРегСтарые свРегСтарыеField;

		private List<СвНедДанУчрТип> свНедДанУчрField;

		private ДоляУстКапЕГРЮЛТип доляУстКапField;

		private List<СвОбремОткрТип> свОбремField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвУчредитУчрЮЛРос()
		{
			this.свОбремField = new List<СвОбремОткрТип>();
			this.доляУстКапField = new ДоляУстКапЕГРЮЛТип();
			this.свНедДанУчрField = new List<СвНедДанУчрТип>();
			this.свРегСтарыеField = new FNSVipULResponseСвЮЛСвУчредитУчрЮЛРосСвРегСтарые();
			this.наимИННЮЛField = new СвЮЛЕГРЮЛТип();
			this.гРНДатаПервField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДатаПерв
		{
			get
			{
				return this.гРНДатаПервField;
			}
			set
			{
				this.гРНДатаПервField = value;
			}
		}

		public СвЮЛЕГРЮЛТип НаимИННЮЛ
		{
			get
			{
				return this.наимИННЮЛField;
			}
			set
			{
				this.наимИННЮЛField = value;
			}
		}

		public FNSVipULResponseСвЮЛСвУчредитУчрЮЛРосСвРегСтарые СвРегСтарые
		{
			get
			{
				return this.свРегСтарыеField;
			}
			set
			{
				this.свРегСтарыеField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвНедДанУчр")]
		public List<СвНедДанУчрТип> СвНедДанУчр
		{
			get
			{
				return this.свНедДанУчрField;
			}
			set
			{
				this.свНедДанУчрField = value;
			}
		}

		public ДоляУстКапЕГРЮЛТип ДоляУстКап
		{
			get
			{
				return this.доляУстКапField;
			}
			set
			{
				this.доляУстКапField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвОбрем")]
		public List<СвОбремОткрТип> СвОбрем
		{
			get
			{
				return this.свОбремField;
			}
			set
			{
				this.свОбремField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвУчредитУчрЮЛРос));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчредитУчрЮЛРос object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвУчредитУчрЮЛРос object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчредитУчрЮЛРос object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчредитУчрЮЛРос obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчредитУчрЮЛРос);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчредитУчрЮЛРос obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчредитУчрЮЛРос Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвУчредитУчрЮЛРос)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчредитУчрЮЛРос object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвУчредитУчрЮЛРос object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчредитУчрЮЛРос object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчредитУчрЮЛРос obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчредитУчрЮЛРос);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчредитУчрЮЛРос obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчредитУчрЮЛРос LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвУчредитУчрЮЛРосСвРегСтарые
	{

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private string регНомField;

		private System.DateTime датаРегField;

		private bool датаРегFieldSpecified;

		private string наимРОField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвУчредитУчрЮЛРосСвРегСтарые()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string РегНом
		{
			get
			{
				return this.регНомField;
			}
			set
			{
				this.регНомField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаРег
		{
			get
			{
				return this.датаРегField;
			}
			set
			{
				this.датаРегField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool ДатаРегSpecified
		{
			get
			{
				return this.датаРегFieldSpecified;
			}
			set
			{
				this.датаРегFieldSpecified = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимРО
		{
			get
			{
				return this.наимРОField;
			}
			set
			{
				this.наимРОField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвУчредитУчрЮЛРосСвРегСтарые));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчредитУчрЮЛРосСвРегСтарые object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвУчредитУчрЮЛРосСвРегСтарые object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчредитУчрЮЛРосСвРегСтарые object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчредитУчрЮЛРосСвРегСтарые obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчредитУчрЮЛРосСвРегСтарые);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчредитУчрЮЛРосСвРегСтарые obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчредитУчрЮЛРосСвРегСтарые Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвУчредитУчрЮЛРосСвРегСтарые)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчредитУчрЮЛРосСвРегСтарые object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвУчредитУчрЮЛРосСвРегСтарые object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчредитУчрЮЛРосСвРегСтарые object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчредитУчрЮЛРосСвРегСтарые obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчредитУчрЮЛРосСвРегСтарые);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчредитУчрЮЛРосСвРегСтарые obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчредитУчрЮЛРосСвРегСтарые LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public partial class СвНедДанУчрТип
	{

		private РешСудТип решСудНедДанУчрField;

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private СвНедДанУчрТипПризнНедДанУчр признНедДанУчрField;

		private string текстНедДанУчрField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public СвНедДанУчрТип()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
			this.решСудНедДанУчрField = new РешСудТип();
		}

		public РешСудТип РешСудНедДанУчр
		{
			get
			{
				return this.решСудНедДанУчрField;
			}
			set
			{
				this.решСудНедДанУчрField = value;
			}
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public СвНедДанУчрТипПризнНедДанУчр ПризнНедДанУчр
		{
			get
			{
				return this.признНедДанУчрField;
			}
			set
			{
				this.признНедДанУчрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ТекстНедДанУчр
		{
			get
			{
				return this.текстНедДанУчрField;
			}
			set
			{
				this.текстНедДанУчрField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвНедДанУчрТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current СвНедДанУчрТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an СвНедДанУчрТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output СвНедДанУчрТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out СвНедДанУчрТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвНедДанУчрТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out СвНедДанУчрТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static СвНедДанУчрТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((СвНедДанУчрТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current СвНедДанУчрТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an СвНедДанУчрТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output СвНедДанУчрТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out СвНедДанУчрТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвНедДанУчрТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out СвНедДанУчрТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static СвНедДанУчрТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public enum СвНедДанУчрТипПризнНедДанУчр
	{

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("1")]
		Item1,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("2")]
		Item2,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("3")]
		Item3,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public partial class ДоляУстКапЕГРЮЛТип
	{

		private ДоляУстКапЕГРЮЛТипРазмерДоли размерДолиField;

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private decimal номинСтоимField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public ДоляУстКапЕГРЮЛТип()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
			this.размерДолиField = new ДоляУстКапЕГРЮЛТипРазмерДоли();
		}

		public ДоляУстКапЕГРЮЛТипРазмерДоли РазмерДоли
		{
			get
			{
				return this.размерДолиField;
			}
			set
			{
				this.размерДолиField = value;
			}
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public decimal НоминСтоим
		{
			get
			{
				return this.номинСтоимField;
			}
			set
			{
				this.номинСтоимField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДоляУстКапЕГРЮЛТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current ДоляУстКапЕГРЮЛТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an ДоляУстКапЕГРЮЛТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output ДоляУстКапЕГРЮЛТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out ДоляУстКапЕГРЮЛТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ДоляУстКапЕГРЮЛТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out ДоляУстКапЕГРЮЛТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static ДоляУстКапЕГРЮЛТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((ДоляУстКапЕГРЮЛТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current ДоляУстКапЕГРЮЛТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an ДоляУстКапЕГРЮЛТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output ДоляУстКапЕГРЮЛТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out ДоляУстКапЕГРЮЛТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ДоляУстКапЕГРЮЛТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out ДоляУстКапЕГРЮЛТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static ДоляУстКапЕГРЮЛТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public partial class ДоляУстКапЕГРЮЛТипРазмерДоли
	{

		private object itemField;

		private ItemChoiceType1 itemElementNameField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlElementAttribute("ДробДесят", typeof(decimal))]
		[System.Xml.Serialization.XmlElementAttribute("ДробПрост", typeof(ДробьТип))]
		[System.Xml.Serialization.XmlElementAttribute("Процент", typeof(decimal))]
		[System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
		public object Item
		{
			get
			{
				return this.itemField;
			}
			set
			{
				this.itemField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public ItemChoiceType1 ItemElementName
		{
			get
			{
				return this.itemElementNameField;
			}
			set
			{
				this.itemElementNameField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДоляУстКапЕГРЮЛТипРазмерДоли));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current ДоляУстКапЕГРЮЛТипРазмерДоли object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an ДоляУстКапЕГРЮЛТипРазмерДоли object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output ДоляУстКапЕГРЮЛТипРазмерДоли object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out ДоляУстКапЕГРЮЛТипРазмерДоли obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ДоляУстКапЕГРЮЛТипРазмерДоли);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out ДоляУстКапЕГРЮЛТипРазмерДоли obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static ДоляУстКапЕГРЮЛТипРазмерДоли Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((ДоляУстКапЕГРЮЛТипРазмерДоли)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current ДоляУстКапЕГРЮЛТипРазмерДоли object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an ДоляУстКапЕГРЮЛТипРазмерДоли object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output ДоляУстКапЕГРЮЛТипРазмерДоли object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out ДоляУстКапЕГРЮЛТипРазмерДоли obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ДоляУстКапЕГРЮЛТипРазмерДоли);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out ДоляУстКапЕГРЮЛТипРазмерДоли obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static ДоляУстКапЕГРЮЛТипРазмерДоли LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5", IncludeInSchema = false)]
	public enum ItemChoiceType1
	{

		/// <remarks/>
		ДробДесят,

		/// <remarks/>
		ДробПрост,

		/// <remarks/>
		Процент,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public partial class СвОбремОткрТип
	{

		private РешСудТип решСудField;

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private СвОбремОткрТипСвЗалогДержФЛ свЗалогДержФЛField;

		private СвОбремОткрТипСвЗалогДержЮЛ свЗалогДержЮЛField;

		private СвОбремОткрТипВидОбрем видОбремField;

		private string срокОбремененияField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public СвОбремОткрТип()
		{
			this.свЗалогДержЮЛField = new СвОбремОткрТипСвЗалогДержЮЛ();
			this.свЗалогДержФЛField = new СвОбремОткрТипСвЗалогДержФЛ();
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
			this.решСудField = new РешСудТип();
		}

		public РешСудТип РешСуд
		{
			get
			{
				return this.решСудField;
			}
			set
			{
				this.решСудField = value;
			}
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		public СвОбремОткрТипСвЗалогДержФЛ СвЗалогДержФЛ
		{
			get
			{
				return this.свЗалогДержФЛField;
			}
			set
			{
				this.свЗалогДержФЛField = value;
			}
		}

		public СвОбремОткрТипСвЗалогДержЮЛ СвЗалогДержЮЛ
		{
			get
			{
				return this.свЗалогДержЮЛField;
			}
			set
			{
				this.свЗалогДержЮЛField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public СвОбремОткрТипВидОбрем ВидОбрем
		{
			get
			{
				return this.видОбремField;
			}
			set
			{
				this.видОбремField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string СрокОбременения
		{
			get
			{
				return this.срокОбремененияField;
			}
			set
			{
				this.срокОбремененияField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвОбремОткрТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current СвОбремОткрТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an СвОбремОткрТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output СвОбремОткрТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out СвОбремОткрТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвОбремОткрТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out СвОбремОткрТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static СвОбремОткрТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((СвОбремОткрТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current СвОбремОткрТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an СвОбремОткрТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output СвОбремОткрТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out СвОбремОткрТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвОбремОткрТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out СвОбремОткрТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static СвОбремОткрТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public partial class СвОбремОткрТипСвЗалогДержФЛ
	{

		private ГРНДатаТип гРНДатаПервField;

		private СвФЛЕГРЮЛТип свФЛField;

		private СвНотУдДогЗалТип свНотУдДогЗалField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public СвОбремОткрТипСвЗалогДержФЛ()
		{
			this.свНотУдДогЗалField = new СвНотУдДогЗалТип();
			this.свФЛField = new СвФЛЕГРЮЛТип();
			this.гРНДатаПервField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДатаПерв
		{
			get
			{
				return this.гРНДатаПервField;
			}
			set
			{
				this.гРНДатаПервField = value;
			}
		}

		public СвФЛЕГРЮЛТип СвФЛ
		{
			get
			{
				return this.свФЛField;
			}
			set
			{
				this.свФЛField = value;
			}
		}

		public СвНотУдДогЗалТип СвНотУдДогЗал
		{
			get
			{
				return this.свНотУдДогЗалField;
			}
			set
			{
				this.свНотУдДогЗалField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвОбремОткрТипСвЗалогДержФЛ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current СвОбремОткрТипСвЗалогДержФЛ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an СвОбремОткрТипСвЗалогДержФЛ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output СвОбремОткрТипСвЗалогДержФЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out СвОбремОткрТипСвЗалогДержФЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвОбремОткрТипСвЗалогДержФЛ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out СвОбремОткрТипСвЗалогДержФЛ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static СвОбремОткрТипСвЗалогДержФЛ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((СвОбремОткрТипСвЗалогДержФЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current СвОбремОткрТипСвЗалогДержФЛ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an СвОбремОткрТипСвЗалогДержФЛ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output СвОбремОткрТипСвЗалогДержФЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out СвОбремОткрТипСвЗалогДержФЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвОбремОткрТипСвЗалогДержФЛ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out СвОбремОткрТипСвЗалогДержФЛ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static СвОбремОткрТипСвЗалогДержФЛ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public partial class СвНотУдДогЗалТип
	{

		private СвФЛЕГРЮЛТип свНотариусField;

		private string номерField;

		private System.DateTime датаField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public СвНотУдДогЗалТип()
		{
			this.свНотариусField = new СвФЛЕГРЮЛТип();
		}

		public СвФЛЕГРЮЛТип СвНотариус
		{
			get
			{
				return this.свНотариусField;
			}
			set
			{
				this.свНотариусField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string Номер
		{
			get
			{
				return this.номерField;
			}
			set
			{
				this.номерField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime Дата
		{
			get
			{
				return this.датаField;
			}
			set
			{
				this.датаField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвНотУдДогЗалТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current СвНотУдДогЗалТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an СвНотУдДогЗалТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output СвНотУдДогЗалТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out СвНотУдДогЗалТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвНотУдДогЗалТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out СвНотУдДогЗалТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static СвНотУдДогЗалТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((СвНотУдДогЗалТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current СвНотУдДогЗалТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an СвНотУдДогЗалТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output СвНотУдДогЗалТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out СвНотУдДогЗалТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвНотУдДогЗалТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out СвНотУдДогЗалТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static СвНотУдДогЗалТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public partial class СвОбремОткрТипСвЗалогДержЮЛ
	{

		private ГРНДатаТип гРНДатаПервField;

		private СвЮЛЕГРЮЛТип наимИННЮЛField;

		private СвРегИнЮЛЕГРЮЛТип свРегИнField;

		private СвНотУдДогЗалТип свНотУдДогЗалField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public СвОбремОткрТипСвЗалогДержЮЛ()
		{
			this.свНотУдДогЗалField = new СвНотУдДогЗалТип();
			this.свРегИнField = new СвРегИнЮЛЕГРЮЛТип();
			this.наимИННЮЛField = new СвЮЛЕГРЮЛТип();
			this.гРНДатаПервField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДатаПерв
		{
			get
			{
				return this.гРНДатаПервField;
			}
			set
			{
				this.гРНДатаПервField = value;
			}
		}

		public СвЮЛЕГРЮЛТип НаимИННЮЛ
		{
			get
			{
				return this.наимИННЮЛField;
			}
			set
			{
				this.наимИННЮЛField = value;
			}
		}

		public СвРегИнЮЛЕГРЮЛТип СвРегИн
		{
			get
			{
				return this.свРегИнField;
			}
			set
			{
				this.свРегИнField = value;
			}
		}

		public СвНотУдДогЗалТип СвНотУдДогЗал
		{
			get
			{
				return this.свНотУдДогЗалField;
			}
			set
			{
				this.свНотУдДогЗалField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвОбремОткрТипСвЗалогДержЮЛ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current СвОбремОткрТипСвЗалогДержЮЛ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an СвОбремОткрТипСвЗалогДержЮЛ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output СвОбремОткрТипСвЗалогДержЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out СвОбремОткрТипСвЗалогДержЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвОбремОткрТипСвЗалогДержЮЛ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out СвОбремОткрТипСвЗалогДержЮЛ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static СвОбремОткрТипСвЗалогДержЮЛ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((СвОбремОткрТипСвЗалогДержЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current СвОбремОткрТипСвЗалогДержЮЛ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an СвОбремОткрТипСвЗалогДержЮЛ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output СвОбремОткрТипСвЗалогДержЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out СвОбремОткрТипСвЗалогДержЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвОбремОткрТипСвЗалогДержЮЛ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out СвОбремОткрТипСвЗалогДержЮЛ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static СвОбремОткрТипСвЗалогДержЮЛ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public enum СвОбремОткрТипВидОбрем
	{

		/// <remarks/>
		ЗАЛОГ,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("ИНОЕ ОБРЕМЕНЕНИЕ")]
		ИНОЕОБРЕМЕНЕНИЕ,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвУчредитУчрЮЛИн
	{

		private ГРНДатаТип гРНДатаПервField;

		private СвЮЛЕГРЮЛТип наимИННЮЛField;

		private СвРегИнЮЛЕГРЮЛТип свРегИнField;

		private List<СвНедДанУчрТип> свНедДанУчрField;

		private ДоляУстКапЕГРЮЛТип доляУстКапField;

		private List<СвОбремОткрТип> свОбремField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвУчредитУчрЮЛИн()
		{
			this.свОбремField = new List<СвОбремОткрТип>();
			this.доляУстКапField = new ДоляУстКапЕГРЮЛТип();
			this.свНедДанУчрField = new List<СвНедДанУчрТип>();
			this.свРегИнField = new СвРегИнЮЛЕГРЮЛТип();
			this.наимИННЮЛField = new СвЮЛЕГРЮЛТип();
			this.гРНДатаПервField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДатаПерв
		{
			get
			{
				return this.гРНДатаПервField;
			}
			set
			{
				this.гРНДатаПервField = value;
			}
		}

		public СвЮЛЕГРЮЛТип НаимИННЮЛ
		{
			get
			{
				return this.наимИННЮЛField;
			}
			set
			{
				this.наимИННЮЛField = value;
			}
		}

		public СвРегИнЮЛЕГРЮЛТип СвРегИн
		{
			get
			{
				return this.свРегИнField;
			}
			set
			{
				this.свРегИнField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвНедДанУчр")]
		public List<СвНедДанУчрТип> СвНедДанУчр
		{
			get
			{
				return this.свНедДанУчрField;
			}
			set
			{
				this.свНедДанУчрField = value;
			}
		}

		public ДоляУстКапЕГРЮЛТип ДоляУстКап
		{
			get
			{
				return this.доляУстКапField;
			}
			set
			{
				this.доляУстКапField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвОбрем")]
		public List<СвОбремОткрТип> СвОбрем
		{
			get
			{
				return this.свОбремField;
			}
			set
			{
				this.свОбремField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвУчредитУчрЮЛИн));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчредитУчрЮЛИн object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвУчредитУчрЮЛИн object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчредитУчрЮЛИн object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчредитУчрЮЛИн obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчредитУчрЮЛИн);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчредитУчрЮЛИн obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчредитУчрЮЛИн Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвУчредитУчрЮЛИн)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчредитУчрЮЛИн object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвУчредитУчрЮЛИн object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчредитУчрЮЛИн object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчредитУчрЮЛИн obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчредитУчрЮЛИн);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчредитУчрЮЛИн obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчредитУчрЮЛИн LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвУчредитУчрФЛ
	{

		private ГРНДатаТип гРНДатаПервField;

		private СвФЛЕГРЮЛТип свФЛField;

		private List<СвНедДанУчрТип> свНедДанУчрField;

		private ДоляУстКапЕГРЮЛТип доляУстКапField;

		private List<СвОбремОткрТип> свОбремField;

		private FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ свДовУпрЮЛField;

		private FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрФЛ свДовУпрФЛField;

		private FNSVipULResponseСвЮЛСвУчредитУчрФЛЛицоУпрНасл лицоУпрНаслField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвУчредитУчрФЛ()
		{
			this.лицоУпрНаслField = new FNSVipULResponseСвЮЛСвУчредитУчрФЛЛицоУпрНасл();
			this.свДовУпрФЛField = new FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрФЛ();
			this.свДовУпрЮЛField = new FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ();
			this.свОбремField = new List<СвОбремОткрТип>();
			this.доляУстКапField = new ДоляУстКапЕГРЮЛТип();
			this.свНедДанУчрField = new List<СвНедДанУчрТип>();
			this.свФЛField = new СвФЛЕГРЮЛТип();
			this.гРНДатаПервField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДатаПерв
		{
			get
			{
				return this.гРНДатаПервField;
			}
			set
			{
				this.гРНДатаПервField = value;
			}
		}

		public СвФЛЕГРЮЛТип СвФЛ
		{
			get
			{
				return this.свФЛField;
			}
			set
			{
				this.свФЛField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвНедДанУчр")]
		public List<СвНедДанУчрТип> СвНедДанУчр
		{
			get
			{
				return this.свНедДанУчрField;
			}
			set
			{
				this.свНедДанУчрField = value;
			}
		}

		public ДоляУстКапЕГРЮЛТип ДоляУстКап
		{
			get
			{
				return this.доляУстКапField;
			}
			set
			{
				this.доляУстКапField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвОбрем")]
		public List<СвОбремОткрТип> СвОбрем
		{
			get
			{
				return this.свОбремField;
			}
			set
			{
				this.свОбремField = value;
			}
		}

		public FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ СвДовУпрЮЛ
		{
			get
			{
				return this.свДовУпрЮЛField;
			}
			set
			{
				this.свДовУпрЮЛField = value;
			}
		}

		public FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрФЛ СвДовУпрФЛ
		{
			get
			{
				return this.свДовУпрФЛField;
			}
			set
			{
				this.свДовУпрФЛField = value;
			}
		}

		public FNSVipULResponseСвЮЛСвУчредитУчрФЛЛицоУпрНасл ЛицоУпрНасл
		{
			get
			{
				return this.лицоУпрНаслField;
			}
			set
			{
				this.лицоУпрНаслField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвУчредитУчрФЛ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчредитУчрФЛ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвУчредитУчрФЛ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчредитУчрФЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчредитУчрФЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчредитУчрФЛ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчредитУчрФЛ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчредитУчрФЛ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвУчредитУчрФЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчредитУчрФЛ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвУчредитУчрФЛ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчредитУчрФЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчредитУчрФЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчредитУчрФЛ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчредитУчрФЛ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчредитУчрФЛ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ
	{

		private ГРНДатаТип гРНДатаПервField;

		private СвЮЛЕГРЮЛТип наимИННДовУпрField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ()
		{
			this.наимИННДовУпрField = new СвЮЛЕГРЮЛТип();
			this.гРНДатаПервField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДатаПерв
		{
			get
			{
				return this.гРНДатаПервField;
			}
			set
			{
				this.гРНДатаПервField = value;
			}
		}

		public СвЮЛЕГРЮЛТип НаимИННДовУпр
		{
			get
			{
				return this.наимИННДовУпрField;
			}
			set
			{
				this.наимИННДовУпрField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрФЛ
	{

		private ГРНДатаТип гРНДатаПервField;

		private СвФЛЕГРЮЛТип свФЛField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрФЛ()
		{
			this.свФЛField = new СвФЛЕГРЮЛТип();
			this.гРНДатаПервField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДатаПерв
		{
			get
			{
				return this.гРНДатаПервField;
			}
			set
			{
				this.гРНДатаПервField = value;
			}
		}

		public СвФЛЕГРЮЛТип СвФЛ
		{
			get
			{
				return this.свФЛField;
			}
			set
			{
				this.свФЛField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрФЛ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрФЛ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрФЛ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрФЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрФЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрФЛ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрФЛ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрФЛ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрФЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрФЛ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрФЛ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрФЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрФЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрФЛ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрФЛ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчредитУчрФЛСвДовУпрФЛ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвУчредитУчрФЛЛицоУпрНасл
	{

		private ГРНДатаТип гРНДатаПервField;

		private СвФЛЕГРЮЛТип свФЛField;

		private System.DateTime датаОткрНаслField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвУчредитУчрФЛЛицоУпрНасл()
		{
			this.свФЛField = new СвФЛЕГРЮЛТип();
			this.гРНДатаПервField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДатаПерв
		{
			get
			{
				return this.гРНДатаПервField;
			}
			set
			{
				this.гРНДатаПервField = value;
			}
		}

		public СвФЛЕГРЮЛТип СвФЛ
		{
			get
			{
				return this.свФЛField;
			}
			set
			{
				this.свФЛField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаОткрНасл
		{
			get
			{
				return this.датаОткрНаслField;
			}
			set
			{
				this.датаОткрНаслField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвУчредитУчрФЛЛицоУпрНасл));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчредитУчрФЛЛицоУпрНасл object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвУчредитУчрФЛЛицоУпрНасл object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчредитУчрФЛЛицоУпрНасл object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчредитУчрФЛЛицоУпрНасл obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчредитУчрФЛЛицоУпрНасл);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчредитУчрФЛЛицоУпрНасл obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчредитУчрФЛЛицоУпрНасл Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвУчредитУчрФЛЛицоУпрНасл)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчредитУчрФЛЛицоУпрНасл object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвУчредитУчрФЛЛицоУпрНасл object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчредитУчрФЛЛицоУпрНасл object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчредитУчрФЛЛицоУпрНасл obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчредитУчрФЛЛицоУпрНасл);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчредитУчрФЛЛицоУпрНасл obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчредитУчрФЛЛицоУпрНасл LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвУчредитУчрРФСубМО
	{

		private ГРНДатаТип гРНДатаПервField;

		private FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОВидНаимУчр видНаимУчрField;

		private List<СвНедДанУчрТип> свНедДанУчрField;

		private ДоляУстКапЕГРЮЛТип доляУстКапField;

		private List<FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр> свОргОсущПрField;

		private List<FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр> свФЛОсущПрField;

		private List<СвОбремОткрТип> свОбремField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвУчредитУчрРФСубМО()
		{
			this.свОбремField = new List<СвОбремОткрТип>();
			this.свФЛОсущПрField = new List<FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр>();
			this.свОргОсущПрField = new List<FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр>();
			this.доляУстКапField = new ДоляУстКапЕГРЮЛТип();
			this.свНедДанУчрField = new List<СвНедДанУчрТип>();
			this.видНаимУчрField = new FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОВидНаимУчр();
			this.гРНДатаПервField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДатаПерв
		{
			get
			{
				return this.гРНДатаПервField;
			}
			set
			{
				this.гРНДатаПервField = value;
			}
		}

		public FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОВидНаимУчр ВидНаимУчр
		{
			get
			{
				return this.видНаимУчрField;
			}
			set
			{
				this.видНаимУчрField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвНедДанУчр")]
		public List<СвНедДанУчрТип> СвНедДанУчр
		{
			get
			{
				return this.свНедДанУчрField;
			}
			set
			{
				this.свНедДанУчрField = value;
			}
		}

		public ДоляУстКапЕГРЮЛТип ДоляУстКап
		{
			get
			{
				return this.доляУстКапField;
			}
			set
			{
				this.доляУстКапField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвОргОсущПр")]
		public List<FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр> СвОргОсущПр
		{
			get
			{
				return this.свОргОсущПрField;
			}
			set
			{
				this.свОргОсущПрField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвФЛОсущПр")]
		public List<FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр> СвФЛОсущПр
		{
			get
			{
				return this.свФЛОсущПрField;
			}
			set
			{
				this.свФЛОсущПрField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвОбрем")]
		public List<СвОбремОткрТип> СвОбрем
		{
			get
			{
				return this.свОбремField;
			}
			set
			{
				this.свОбремField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвУчредитУчрРФСубМО));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчредитУчрРФСубМО object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвУчредитУчрРФСубМО object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчредитУчрРФСубМО object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчредитУчрРФСубМО obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчредитУчрРФСубМО);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчредитУчрРФСубМО obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчредитУчрРФСубМО Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвУчредитУчрРФСубМО)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчредитУчрРФСубМО object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвУчредитУчрРФСубМО object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчредитУчрРФСубМО object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчредитУчрРФСубМО obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчредитУчрРФСубМО);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчредитУчрРФСубМО obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчредитУчрРФСубМО LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОВидНаимУчр
	{

		private FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОВидНаимУчрКодУчрРФСубМО кодУчрРФСубМОField;

		private string наимМОField;

		private string кодРегионField;

		private string наимРегионField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОВидНаимУчрКодУчрРФСубМО КодУчрРФСубМО
		{
			get
			{
				return this.кодУчрРФСубМОField;
			}
			set
			{
				this.кодУчрРФСубМОField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимМО
		{
			get
			{
				return this.наимМОField;
			}
			set
			{
				this.наимМОField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодРегион
		{
			get
			{
				return this.кодРегионField;
			}
			set
			{
				this.кодРегионField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимРегион
		{
			get
			{
				return this.наимРегионField;
			}
			set
			{
				this.наимРегионField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОВидНаимУчр));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОВидНаимУчр object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОВидНаимУчр object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОВидНаимУчр object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОВидНаимУчр obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОВидНаимУчр);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОВидНаимУчр obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОВидНаимУчр Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОВидНаимУчр)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОВидНаимУчр object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОВидНаимУчр object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОВидНаимУчр object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОВидНаимУчр obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОВидНаимУчр);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОВидНаимУчр obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОВидНаимУчр LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public enum FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОВидНаимУчрКодУчрРФСубМО
	{

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("1")]
		Item1,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("2")]
		Item2,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("3")]
		Item3,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр
	{

		private ГРНДатаТип гРНДатаПервField;

		private СвЮЛЕГРЮЛТип наимИННЮЛField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр()
		{
			this.наимИННЮЛField = new СвЮЛЕГРЮЛТип();
			this.гРНДатаПервField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДатаПерв
		{
			get
			{
				return this.гРНДатаПервField;
			}
			set
			{
				this.гРНДатаПервField = value;
			}
		}

		public СвЮЛЕГРЮЛТип НаимИННЮЛ
		{
			get
			{
				return this.наимИННЮЛField;
			}
			set
			{
				this.наимИННЮЛField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр
	{

		private ГРНДатаТип гРНДатаПервField;

		private СвФЛЕГРЮЛТип свФЛField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр()
		{
			this.свФЛField = new СвФЛЕГРЮЛТип();
			this.гРНДатаПервField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДатаПерв
		{
			get
			{
				return this.гРНДатаПервField;
			}
			set
			{
				this.гРНДатаПервField = value;
			}
		}

		public СвФЛЕГРЮЛТип СвФЛ
		{
			get
			{
				return this.свФЛField;
			}
			set
			{
				this.свФЛField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвУчредитУчрПИФ
	{

		private ГРНДатаТип гРНДатаПервField;

		private FNSVipULResponseСвЮЛСвУчредитУчрПИФСвНаимПИФ свНаимПИФField;

		private List<СвНедДанУчрТип> свНедДанУчрField;

		private FNSVipULResponseСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ свУпрКомпПИФField;

		private ДоляУстКапЕГРЮЛТип доляУстКапField;

		private List<СвОбремОткрТип> свОбремField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвУчредитУчрПИФ()
		{
			this.свОбремField = new List<СвОбремОткрТип>();
			this.доляУстКапField = new ДоляУстКапЕГРЮЛТип();
			this.свУпрКомпПИФField = new FNSVipULResponseСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ();
			this.свНедДанУчрField = new List<СвНедДанУчрТип>();
			this.свНаимПИФField = new FNSVipULResponseСвЮЛСвУчредитУчрПИФСвНаимПИФ();
			this.гРНДатаПервField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДатаПерв
		{
			get
			{
				return this.гРНДатаПервField;
			}
			set
			{
				this.гРНДатаПервField = value;
			}
		}

		public FNSVipULResponseСвЮЛСвУчредитУчрПИФСвНаимПИФ СвНаимПИФ
		{
			get
			{
				return this.свНаимПИФField;
			}
			set
			{
				this.свНаимПИФField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвНедДанУчр")]
		public List<СвНедДанУчрТип> СвНедДанУчр
		{
			get
			{
				return this.свНедДанУчрField;
			}
			set
			{
				this.свНедДанУчрField = value;
			}
		}

		public FNSVipULResponseСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ СвУпрКомпПИФ
		{
			get
			{
				return this.свУпрКомпПИФField;
			}
			set
			{
				this.свУпрКомпПИФField = value;
			}
		}

		public ДоляУстКапЕГРЮЛТип ДоляУстКап
		{
			get
			{
				return this.доляУстКапField;
			}
			set
			{
				this.доляУстКапField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвОбрем")]
		public List<СвОбремОткрТип> СвОбрем
		{
			get
			{
				return this.свОбремField;
			}
			set
			{
				this.свОбремField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвУчредитУчрПИФ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчредитУчрПИФ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвУчредитУчрПИФ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчредитУчрПИФ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчредитУчрПИФ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчредитУчрПИФ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчредитУчрПИФ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчредитУчрПИФ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвУчредитУчрПИФ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчредитУчрПИФ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвУчредитУчрПИФ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчредитУчрПИФ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчредитУчрПИФ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчредитУчрПИФ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчредитУчрПИФ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчредитУчрПИФ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвУчредитУчрПИФСвНаимПИФ
	{

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private string наимПИФField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвУчредитУчрПИФСвНаимПИФ()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимПИФ
		{
			get
			{
				return this.наимПИФField;
			}
			set
			{
				this.наимПИФField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвУчредитУчрПИФСвНаимПИФ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчредитУчрПИФСвНаимПИФ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвУчредитУчрПИФСвНаимПИФ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчредитУчрПИФСвНаимПИФ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчредитУчрПИФСвНаимПИФ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчредитУчрПИФСвНаимПИФ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчредитУчрПИФСвНаимПИФ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчредитУчрПИФСвНаимПИФ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвУчредитУчрПИФСвНаимПИФ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчредитУчрПИФСвНаимПИФ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвУчредитУчрПИФСвНаимПИФ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчредитУчрПИФСвНаимПИФ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчредитУчрПИФСвНаимПИФ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчредитУчрПИФСвНаимПИФ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчредитУчрПИФСвНаимПИФ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчредитУчрПИФСвНаимПИФ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ
	{

		private ГРНДатаТип гРНДатаПервField;

		private СвЮЛЕГРЮЛТип упрКомпПифField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ()
		{
			this.упрКомпПифField = new СвЮЛЕГРЮЛТип();
			this.гРНДатаПервField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДатаПерв
		{
			get
			{
				return this.гРНДатаПервField;
			}
			set
			{
				this.гРНДатаПервField = value;
			}
		}

		public СвЮЛЕГРЮЛТип УпрКомпПиф
		{
			get
			{
				return this.упрКомпПифField;
			}
			set
			{
				this.упрКомпПифField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвДержРеестрАО
	{

		private ГРНДатаТип гРНДатаПервField;

		private СвЮЛЕГРЮЛТип держРеестрАОField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвДержРеестрАО()
		{
			this.держРеестрАОField = new СвЮЛЕГРЮЛТип();
			this.гРНДатаПервField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДатаПерв
		{
			get
			{
				return this.гРНДатаПервField;
			}
			set
			{
				this.гРНДатаПервField = value;
			}
		}

		public СвЮЛЕГРЮЛТип ДержРеестрАО
		{
			get
			{
				return this.держРеестрАОField;
			}
			set
			{
				this.держРеестрАОField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвДержРеестрАО));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвДержРеестрАО object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвДержРеестрАО object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвДержРеестрАО object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвДержРеестрАО obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвДержРеестрАО);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвДержРеестрАО obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвДержРеестрАО Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвДержРеестрАО)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвДержРеестрАО object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвДержРеестрАО object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвДержРеестрАО object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвДержРеестрАО obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвДержРеестрАО);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвДержРеестрАО obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвДержРеестрАО LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвОКВЭД
	{

		private СвОКВЭДТип свОКВЭДОснField;

		private List<СвОКВЭДТип> свОКВЭДДопField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвОКВЭД()
		{
			this.свОКВЭДДопField = new List<СвОКВЭДТип>();
			this.свОКВЭДОснField = new СвОКВЭДТип();
		}

		public СвОКВЭДТип СвОКВЭДОсн
		{
			get
			{
				return this.свОКВЭДОснField;
			}
			set
			{
				this.свОКВЭДОснField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвОКВЭДДоп")]
		public List<СвОКВЭДТип> СвОКВЭДДоп
		{
			get
			{
				return this.свОКВЭДДопField;
			}
			set
			{
				this.свОКВЭДДопField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвОКВЭД));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвОКВЭД object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвОКВЭД object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвОКВЭД object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвОКВЭД obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвОКВЭД);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвОКВЭД obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвОКВЭД Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвОКВЭД)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвОКВЭД object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвОКВЭД object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвОКВЭД object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвОКВЭД obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвОКВЭД);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвОКВЭД obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвОКВЭД LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public partial class СвОКВЭДТип
	{

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private string кодОКВЭДField;

		private string наимОКВЭДField;

		private СвОКВЭДТипПрВерсОКВЭД прВерсОКВЭДField;

		private bool прВерсОКВЭДFieldSpecified;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public СвОКВЭДТип()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодОКВЭД
		{
			get
			{
				return this.кодОКВЭДField;
			}
			set
			{
				this.кодОКВЭДField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимОКВЭД
		{
			get
			{
				return this.наимОКВЭДField;
			}
			set
			{
				this.наимОКВЭДField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public СвОКВЭДТипПрВерсОКВЭД ПрВерсОКВЭД
		{
			get
			{
				return this.прВерсОКВЭДField;
			}
			set
			{
				this.прВерсОКВЭДField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool ПрВерсОКВЭДSpecified
		{
			get
			{
				return this.прВерсОКВЭДFieldSpecified;
			}
			set
			{
				this.прВерсОКВЭДFieldSpecified = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвОКВЭДТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current СвОКВЭДТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an СвОКВЭДТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output СвОКВЭДТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out СвОКВЭДТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвОКВЭДТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out СвОКВЭДТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static СвОКВЭДТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((СвОКВЭДТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current СвОКВЭДТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an СвОКВЭДТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output СвОКВЭДТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out СвОКВЭДТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвОКВЭДТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out СвОКВЭДТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static СвОКВЭДТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public enum СвОКВЭДТипПрВерсОКВЭД
	{

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("2001")]
		Item2001,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("2014")]
		Item2014,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвЛицензия
	{

		private List<string> наимЛицВидДеятField;

		private List<string> местоДейстЛицField;

		private string лицОргВыдЛицField;

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private FNSVipULResponseСвЮЛСвЛицензияСвПриостЛиц свПриостЛицField;

		private string номЛицField;

		private System.DateTime датаЛицField;

		private System.DateTime датаНачЛицField;

		private System.DateTime датаОкончЛицField;

		private bool датаОкончЛицFieldSpecified;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвЛицензия()
		{
			this.свПриостЛицField = new FNSVipULResponseСвЮЛСвЛицензияСвПриостЛиц();
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
			this.местоДейстЛицField = new List<string>();
			this.наимЛицВидДеятField = new List<string>();
		}

		[System.Xml.Serialization.XmlElementAttribute("НаимЛицВидДеят")]
		public List<string> НаимЛицВидДеят
		{
			get
			{
				return this.наимЛицВидДеятField;
			}
			set
			{
				this.наимЛицВидДеятField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("МестоДейстЛиц")]
		public List<string> МестоДейстЛиц
		{
			get
			{
				return this.местоДейстЛицField;
			}
			set
			{
				this.местоДейстЛицField = value;
			}
		}

		public string ЛицОргВыдЛиц
		{
			get
			{
				return this.лицОргВыдЛицField;
			}
			set
			{
				this.лицОргВыдЛицField = value;
			}
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		public FNSVipULResponseСвЮЛСвЛицензияСвПриостЛиц СвПриостЛиц
		{
			get
			{
				return this.свПриостЛицField;
			}
			set
			{
				this.свПриостЛицField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НомЛиц
		{
			get
			{
				return this.номЛицField;
			}
			set
			{
				this.номЛицField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаЛиц
		{
			get
			{
				return this.датаЛицField;
			}
			set
			{
				this.датаЛицField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаНачЛиц
		{
			get
			{
				return this.датаНачЛицField;
			}
			set
			{
				this.датаНачЛицField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаОкончЛиц
		{
			get
			{
				return this.датаОкончЛицField;
			}
			set
			{
				this.датаОкончЛицField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool ДатаОкончЛицSpecified
		{
			get
			{
				return this.датаОкончЛицFieldSpecified;
			}
			set
			{
				this.датаОкончЛицFieldSpecified = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвЛицензия));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвЛицензия object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвЛицензия object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвЛицензия object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвЛицензия obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвЛицензия);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвЛицензия obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвЛицензия Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвЛицензия)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвЛицензия object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвЛицензия object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвЛицензия object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвЛицензия obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвЛицензия);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвЛицензия obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвЛицензия LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвЛицензияСвПриостЛиц
	{

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private System.DateTime датаПриостЛицField;

		private string лицОргПриостЛицField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвЛицензияСвПриостЛиц()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаПриостЛиц
		{
			get
			{
				return this.датаПриостЛицField;
			}
			set
			{
				this.датаПриостЛицField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ЛицОргПриостЛиц
		{
			get
			{
				return this.лицОргПриостЛицField;
			}
			set
			{
				this.лицОргПриостЛицField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвЛицензияСвПриостЛиц));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвЛицензияСвПриостЛиц object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвЛицензияСвПриостЛиц object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвЛицензияСвПриостЛиц object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвЛицензияСвПриостЛиц obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвЛицензияСвПриостЛиц);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвЛицензияСвПриостЛиц obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвЛицензияСвПриостЛиц Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвЛицензияСвПриостЛиц)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвЛицензияСвПриостЛиц object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвЛицензияСвПриостЛиц object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвЛицензияСвПриостЛиц object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвЛицензияСвПриостЛиц obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвЛицензияСвПриостЛиц);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвЛицензияСвПриостЛиц obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвЛицензияСвПриостЛиц LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвПодразд
	{

		private List<FNSVipULResponseСвЮЛСвПодраздСвФилиал> свФилиалField;

		private List<FNSVipULResponseСвЮЛСвПодраздСвПредстав> свПредставField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвПодразд()
		{
			this.свПредставField = new List<FNSVipULResponseСвЮЛСвПодраздСвПредстав>();
			this.свФилиалField = new List<FNSVipULResponseСвЮЛСвПодраздСвФилиал>();
		}

		[System.Xml.Serialization.XmlElementAttribute("СвФилиал")]
		public List<FNSVipULResponseСвЮЛСвПодраздСвФилиал> СвФилиал
		{
			get
			{
				return this.свФилиалField;
			}
			set
			{
				this.свФилиалField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвПредстав")]
		public List<FNSVipULResponseСвЮЛСвПодраздСвПредстав> СвПредстав
		{
			get
			{
				return this.свПредставField;
			}
			set
			{
				this.свПредставField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвПодразд));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвПодразд object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвПодразд object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвПодразд object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвПодразд obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвПодразд);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвПодразд obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвПодразд Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвПодразд)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвПодразд object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвПодразд object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвПодразд object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвПодразд obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвПодразд);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвПодразд obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвПодразд LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвПодраздСвФилиал
	{

		private ГРНДатаТип гРНДатаПервField;

		private СвНаимПодраздТип свНаимField;

		private АдрРФЕГРЮЛТип адрМНРФField;

		private АдрИнЕГРЮЛТип адрМНИнField;

		private СвУчетНОПодраздТип свУчетНОФилиалField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвПодраздСвФилиал()
		{
			this.свУчетНОФилиалField = new СвУчетНОПодраздТип();
			this.адрМНИнField = new АдрИнЕГРЮЛТип();
			this.адрМНРФField = new АдрРФЕГРЮЛТип();
			this.свНаимField = new СвНаимПодраздТип();
			this.гРНДатаПервField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДатаПерв
		{
			get
			{
				return this.гРНДатаПервField;
			}
			set
			{
				this.гРНДатаПервField = value;
			}
		}

		public СвНаимПодраздТип СвНаим
		{
			get
			{
				return this.свНаимField;
			}
			set
			{
				this.свНаимField = value;
			}
		}

		public АдрРФЕГРЮЛТип АдрМНРФ
		{
			get
			{
				return this.адрМНРФField;
			}
			set
			{
				this.адрМНРФField = value;
			}
		}

		public АдрИнЕГРЮЛТип АдрМНИн
		{
			get
			{
				return this.адрМНИнField;
			}
			set
			{
				this.адрМНИнField = value;
			}
		}

		public СвУчетНОПодраздТип СвУчетНОФилиал
		{
			get
			{
				return this.свУчетНОФилиалField;
			}
			set
			{
				this.свУчетНОФилиалField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвПодраздСвФилиал));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвПодраздСвФилиал object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвПодраздСвФилиал object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвПодраздСвФилиал object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвПодраздСвФилиал obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвПодраздСвФилиал);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвПодраздСвФилиал obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвПодраздСвФилиал Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвПодраздСвФилиал)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвПодраздСвФилиал object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвПодраздСвФилиал object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвПодраздСвФилиал object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвПодраздСвФилиал obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвПодраздСвФилиал);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвПодраздСвФилиал obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвПодраздСвФилиал LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public partial class СвНаимПодраздТип
	{

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private string наимПолнField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public СвНаимПодраздТип()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимПолн
		{
			get
			{
				return this.наимПолнField;
			}
			set
			{
				this.наимПолнField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвНаимПодраздТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current СвНаимПодраздТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an СвНаимПодраздТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output СвНаимПодраздТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out СвНаимПодраздТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвНаимПодраздТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out СвНаимПодраздТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static СвНаимПодраздТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((СвНаимПодраздТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current СвНаимПодраздТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an СвНаимПодраздТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output СвНаимПодраздТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out СвНаимПодраздТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвНаимПодраздТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out СвНаимПодраздТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static СвНаимПодраздТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public partial class АдрИнЕГРЮЛТип
	{

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private string оКСМField;

		private string наимСтранField;

		private string адрИнField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public АдрИнЕГРЮЛТип()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ОКСМ
		{
			get
			{
				return this.оКСМField;
			}
			set
			{
				this.оКСМField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимСтран
		{
			get
			{
				return this.наимСтранField;
			}
			set
			{
				this.наимСтранField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string АдрИн
		{
			get
			{
				return this.адрИнField;
			}
			set
			{
				this.адрИнField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(АдрИнЕГРЮЛТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current АдрИнЕГРЮЛТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an АдрИнЕГРЮЛТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output АдрИнЕГРЮЛТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out АдрИнЕГРЮЛТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(АдрИнЕГРЮЛТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out АдрИнЕГРЮЛТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static АдрИнЕГРЮЛТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((АдрИнЕГРЮЛТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current АдрИнЕГРЮЛТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an АдрИнЕГРЮЛТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output АдрИнЕГРЮЛТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out АдрИнЕГРЮЛТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(АдрИнЕГРЮЛТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out АдрИнЕГРЮЛТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static АдрИнЕГРЮЛТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public partial class СвУчетНОПодраздТип
	{

		private СвНОТип свНОField;

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private string кППField;

		private System.DateTime датаПостУчField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public СвУчетНОПодраздТип()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
			this.свНОField = new СвНОТип();
		}

		public СвНОТип СвНО
		{
			get
			{
				return this.свНОField;
			}
			set
			{
				this.свНОField = value;
			}
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КПП
		{
			get
			{
				return this.кППField;
			}
			set
			{
				this.кППField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаПостУч
		{
			get
			{
				return this.датаПостУчField;
			}
			set
			{
				this.датаПостУчField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвУчетНОПодраздТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current СвУчетНОПодраздТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an СвУчетНОПодраздТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output СвУчетНОПодраздТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out СвУчетНОПодраздТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвУчетНОПодраздТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out СвУчетНОПодраздТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static СвУчетНОПодраздТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((СвУчетНОПодраздТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current СвУчетНОПодраздТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an СвУчетНОПодраздТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output СвУчетНОПодраздТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out СвУчетНОПодраздТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвУчетНОПодраздТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out СвУчетНОПодраздТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static СвУчетНОПодраздТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвПодраздСвПредстав
	{

		private ГРНДатаТип гРНДатаПервField;

		private СвНаимПодраздТип свНаимField;

		private АдрРФЕГРЮЛТип адрМНРФField;

		private АдрИнЕГРЮЛТип адрМНИнField;

		private СвУчетНОПодраздТип свУчетНОПредставField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвПодраздСвПредстав()
		{
			this.свУчетНОПредставField = new СвУчетНОПодраздТип();
			this.адрМНИнField = new АдрИнЕГРЮЛТип();
			this.адрМНРФField = new АдрРФЕГРЮЛТип();
			this.свНаимField = new СвНаимПодраздТип();
			this.гРНДатаПервField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДатаПерв
		{
			get
			{
				return this.гРНДатаПервField;
			}
			set
			{
				this.гРНДатаПервField = value;
			}
		}

		public СвНаимПодраздТип СвНаим
		{
			get
			{
				return this.свНаимField;
			}
			set
			{
				this.свНаимField = value;
			}
		}

		public АдрРФЕГРЮЛТип АдрМНРФ
		{
			get
			{
				return this.адрМНРФField;
			}
			set
			{
				this.адрМНРФField = value;
			}
		}

		public АдрИнЕГРЮЛТип АдрМНИн
		{
			get
			{
				return this.адрМНИнField;
			}
			set
			{
				this.адрМНИнField = value;
			}
		}

		public СвУчетНОПодраздТип СвУчетНОПредстав
		{
			get
			{
				return this.свУчетНОПредставField;
			}
			set
			{
				this.свУчетНОПредставField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвПодраздСвПредстав));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвПодраздСвПредстав object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвПодраздСвПредстав object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвПодраздСвПредстав object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвПодраздСвПредстав obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвПодраздСвПредстав);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвПодраздСвПредстав obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвПодраздСвПредстав Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвПодраздСвПредстав)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвПодраздСвПредстав object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвПодраздСвПредстав object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвПодраздСвПредстав object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвПодраздСвПредстав obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвПодраздСвПредстав);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвПодраздСвПредстав obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвПодраздСвПредстав LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвРеорг
	{

		private FNSVipULResponseСвЮЛСвРеоргСвСтатус свСтатусField;

		private ГРНДатаТип гРНДатаField;

		private List<ГРНДатаТип> гРНДатаИзмСостРеоргЮЛField;

		private List<FNSVipULResponseСвЮЛСвРеоргСвРеоргЮЛ> свРеоргЮЛField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвРеорг()
		{
			this.свРеоргЮЛField = new List<FNSVipULResponseСвЮЛСвРеоргСвРеоргЮЛ>();
			this.гРНДатаИзмСостРеоргЮЛField = new List<ГРНДатаТип>();
			this.гРНДатаField = new ГРНДатаТип();
			this.свСтатусField = new FNSVipULResponseСвЮЛСвРеоргСвСтатус();
		}

		public FNSVipULResponseСвЮЛСвРеоргСвСтатус СвСтатус
		{
			get
			{
				return this.свСтатусField;
			}
			set
			{
				this.свСтатусField = value;
			}
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("ГРНДатаИзмСостРеоргЮЛ")]
		public List<ГРНДатаТип> ГРНДатаИзмСостРеоргЮЛ
		{
			get
			{
				return this.гРНДатаИзмСостРеоргЮЛField;
			}
			set
			{
				this.гРНДатаИзмСостРеоргЮЛField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвРеоргЮЛ")]
		public List<FNSVipULResponseСвЮЛСвРеоргСвРеоргЮЛ> СвРеоргЮЛ
		{
			get
			{
				return this.свРеоргЮЛField;
			}
			set
			{
				this.свРеоргЮЛField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвРеорг));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвРеорг object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвРеорг object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвРеорг object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвРеорг obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвРеорг);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвРеорг obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвРеорг Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвРеорг)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвРеорг object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвРеорг object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвРеорг object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвРеорг obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвРеорг);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвРеорг obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвРеорг LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвРеоргСвСтатус
	{

		private string кодСтатусЮЛField;

		private string наимСтатусЮЛField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодСтатусЮЛ
		{
			get
			{
				return this.кодСтатусЮЛField;
			}
			set
			{
				this.кодСтатусЮЛField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимСтатусЮЛ
		{
			get
			{
				return this.наимСтатусЮЛField;
			}
			set
			{
				this.наимСтатусЮЛField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвРеоргСвСтатус));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвРеоргСвСтатус object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвРеоргСвСтатус object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвРеоргСвСтатус object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвРеоргСвСтатус obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвРеоргСвСтатус);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвРеоргСвСтатус obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвРеоргСвСтатус Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвРеоргСвСтатус)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвРеоргСвСтатус object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвРеоргСвСтатус object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвРеоргСвСтатус object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвРеоргСвСтатус obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвРеоргСвСтатус);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвРеоргСвСтатус obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвРеоргСвСтатус LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвРеоргСвРеоргЮЛ
	{

		private ГРНДатаТип гРНДатаИспрField;

		private string оГРНField;

		private string иННField;

		private string наимЮЛПолнField;

		private string состЮЛпослеField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвРеоргСвРеоргЮЛ()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ОГРН
		{
			get
			{
				return this.оГРНField;
			}
			set
			{
				this.оГРНField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ИНН
		{
			get
			{
				return this.иННField;
			}
			set
			{
				this.иННField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимЮЛПолн
		{
			get
			{
				return this.наимЮЛПолнField;
			}
			set
			{
				this.наимЮЛПолнField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string СостЮЛпосле
		{
			get
			{
				return this.состЮЛпослеField;
			}
			set
			{
				this.состЮЛпослеField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвРеоргСвРеоргЮЛ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвРеоргСвРеоргЮЛ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвРеоргСвРеоргЮЛ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвРеоргСвРеоргЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвРеоргСвРеоргЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвРеоргСвРеоргЮЛ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвРеоргСвРеоргЮЛ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвРеоргСвРеоргЮЛ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвРеоргСвРеоргЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвРеоргСвРеоргЮЛ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвРеоргСвРеоргЮЛ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвРеоргСвРеоргЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвРеоргСвРеоргЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвРеоргСвРеоргЮЛ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвРеоргСвРеоргЮЛ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвРеоргСвРеоргЮЛ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвПредш
	{

		private FNSVipULResponseСвЮЛСвПредшСвЮЛсложнРеорг свЮЛсложнРеоргField;

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private string оГРНField;

		private string иННField;

		private string наимЮЛПолнField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвПредш()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
			this.свЮЛсложнРеоргField = new FNSVipULResponseСвЮЛСвПредшСвЮЛсложнРеорг();
		}

		public FNSVipULResponseСвЮЛСвПредшСвЮЛсложнРеорг СвЮЛсложнРеорг
		{
			get
			{
				return this.свЮЛсложнРеоргField;
			}
			set
			{
				this.свЮЛсложнРеоргField = value;
			}
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ОГРН
		{
			get
			{
				return this.оГРНField;
			}
			set
			{
				this.оГРНField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ИНН
		{
			get
			{
				return this.иННField;
			}
			set
			{
				this.иННField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимЮЛПолн
		{
			get
			{
				return this.наимЮЛПолнField;
			}
			set
			{
				this.наимЮЛПолнField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвПредш));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвПредш object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвПредш object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвПредш object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвПредш obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвПредш);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвПредш obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвПредш Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвПредш)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвПредш object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвПредш object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвПредш object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвПредш obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвПредш);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвПредш obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвПредш LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвПредшСвЮЛсложнРеорг
	{

		private string оГРНField;

		private string иННField;

		private string наимЮЛПолнField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ОГРН
		{
			get
			{
				return this.оГРНField;
			}
			set
			{
				this.оГРНField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ИНН
		{
			get
			{
				return this.иННField;
			}
			set
			{
				this.иННField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимЮЛПолн
		{
			get
			{
				return this.наимЮЛПолнField;
			}
			set
			{
				this.наимЮЛПолнField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвПредшСвЮЛсложнРеорг));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвПредшСвЮЛсложнРеорг object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвПредшСвЮЛсложнРеорг object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвПредшСвЮЛсложнРеорг object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвПредшСвЮЛсложнРеорг obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвПредшСвЮЛсложнРеорг);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвПредшСвЮЛсложнРеорг obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвПредшСвЮЛсложнРеорг Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвПредшСвЮЛсложнРеорг)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвПредшСвЮЛсложнРеорг object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвПредшСвЮЛсложнРеорг object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвПредшСвЮЛсложнРеорг object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвПредшСвЮЛсложнРеорг obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвПредшСвЮЛсложнРеорг);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвПредшСвЮЛсложнРеорг obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвПредшСвЮЛсложнРеорг LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвКФХПредш
	{

		private СвФЛЕГРЮЛТип свФЛField;

		private string оГРНИПField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвКФХПредш()
		{
			this.свФЛField = new СвФЛЕГРЮЛТип();
		}

		public СвФЛЕГРЮЛТип СвФЛ
		{
			get
			{
				return this.свФЛField;
			}
			set
			{
				this.свФЛField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ОГРНИП
		{
			get
			{
				return this.оГРНИПField;
			}
			set
			{
				this.оГРНИПField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвКФХПредш));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвКФХПредш object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвКФХПредш object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвКФХПредш object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвКФХПредш obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвКФХПредш);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвКФХПредш obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвКФХПредш Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвКФХПредш)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвКФХПредш object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвКФХПредш object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвКФХПредш object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвКФХПредш obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвКФХПредш);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвКФХПредш obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвКФХПредш LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвПреем
	{

		private FNSVipULResponseСвЮЛСвПреемСвЮЛсложнРеорг свЮЛсложнРеоргField;

		private ГРНДатаТип гРНДатаField;

		private ГРНДатаТип гРНДатаИспрField;

		private string оГРНField;

		private string иННField;

		private string наимЮЛПолнField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвПреем()
		{
			this.гРНДатаИспрField = new ГРНДатаТип();
			this.гРНДатаField = new ГРНДатаТип();
			this.свЮЛсложнРеоргField = new FNSVipULResponseСвЮЛСвПреемСвЮЛсложнРеорг();
		}

		public FNSVipULResponseСвЮЛСвПреемСвЮЛсложнРеорг СвЮЛсложнРеорг
		{
			get
			{
				return this.свЮЛсложнРеоргField;
			}
			set
			{
				this.свЮЛсложнРеоргField = value;
			}
		}

		public ГРНДатаТип ГРНДата
		{
			get
			{
				return this.гРНДатаField;
			}
			set
			{
				this.гРНДатаField = value;
			}
		}

		public ГРНДатаТип ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ОГРН
		{
			get
			{
				return this.оГРНField;
			}
			set
			{
				this.оГРНField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ИНН
		{
			get
			{
				return this.иННField;
			}
			set
			{
				this.иННField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимЮЛПолн
		{
			get
			{
				return this.наимЮЛПолнField;
			}
			set
			{
				this.наимЮЛПолнField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвПреем));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвПреем object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвПреем object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвПреем object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвПреем obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвПреем);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвПреем obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвПреем Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвПреем)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвПреем object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвПреем object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвПреем object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвПреем obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвПреем);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвПреем obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвПреем LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвПреемСвЮЛсложнРеорг
	{

		private string оГРНField;

		private string иННField;

		private string наимЮЛПолнField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ОГРН
		{
			get
			{
				return this.оГРНField;
			}
			set
			{
				this.оГРНField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ИНН
		{
			get
			{
				return this.иННField;
			}
			set
			{
				this.иННField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимЮЛПолн
		{
			get
			{
				return this.наимЮЛПолнField;
			}
			set
			{
				this.наимЮЛПолнField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвПреемСвЮЛсложнРеорг));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвПреемСвЮЛсложнРеорг object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвПреемСвЮЛсложнРеорг object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвПреемСвЮЛсложнРеорг object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвПреемСвЮЛсложнРеорг obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвПреемСвЮЛсложнРеорг);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвПреемСвЮЛсложнРеорг obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвПреемСвЮЛсложнРеорг Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвПреемСвЮЛсложнРеорг)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвПреемСвЮЛсложнРеорг object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвПреемСвЮЛсложнРеорг object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвПреемСвЮЛсложнРеорг object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвПреемСвЮЛсложнРеорг obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвПреемСвЮЛсложнРеорг);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвПреемСвЮЛсложнРеорг obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвПреемСвЮЛсложнРеорг LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвКФХПреем
	{

		private СвФЛЕГРЮЛТип свФЛField;

		private string оГРНИПField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвКФХПреем()
		{
			this.свФЛField = new СвФЛЕГРЮЛТип();
		}

		public СвФЛЕГРЮЛТип СвФЛ
		{
			get
			{
				return this.свФЛField;
			}
			set
			{
				this.свФЛField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ОГРНИП
		{
			get
			{
				return this.оГРНИПField;
			}
			set
			{
				this.оГРНИПField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвКФХПреем));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвКФХПреем object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвКФХПреем object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвКФХПреем object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвКФХПреем obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвКФХПреем);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвКФХПреем obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвКФХПреем Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвКФХПреем)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвКФХПреем object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвКФХПреем object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвКФХПреем object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвКФХПреем obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвКФХПреем);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвКФХПреем obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвКФХПреем LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвЗапЕГРЮЛ
	{

		private ВидЗапТип видЗапField;

		private СвРегОргТип свРегОргField;

		private List<FNSVipULResponseСвЮЛСвЗапЕГРЮЛСведПредДок> сведПредДокField;

		private List<FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСвид> свСвидField;

		private ИдГРНДатаТип гРНДатаИспрПредField;

		private ИдГРНДатаТип гРНДатаНедПредField;

		private FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСтатусЗап свСтатусЗапField;

		private string идЗапField;

		private string гРНField;

		private System.DateTime датаЗапField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвЗапЕГРЮЛ()
		{
			this.свСтатусЗапField = new FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСтатусЗап();
			this.гРНДатаНедПредField = new ИдГРНДатаТип();
			this.гРНДатаИспрПредField = new ИдГРНДатаТип();
			this.свСвидField = new List<FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСвид>();
			this.сведПредДокField = new List<FNSVipULResponseСвЮЛСвЗапЕГРЮЛСведПредДок>();
			this.свРегОргField = new СвРегОргТип();
			this.видЗапField = new ВидЗапТип();
		}

		public ВидЗапТип ВидЗап
		{
			get
			{
				return this.видЗапField;
			}
			set
			{
				this.видЗапField = value;
			}
		}

		public СвРегОргТип СвРегОрг
		{
			get
			{
				return this.свРегОргField;
			}
			set
			{
				this.свРегОргField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СведПредДок")]
		public List<FNSVipULResponseСвЮЛСвЗапЕГРЮЛСведПредДок> СведПредДок
		{
			get
			{
				return this.сведПредДокField;
			}
			set
			{
				this.сведПредДокField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвСвид")]
		public List<FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСвид> СвСвид
		{
			get
			{
				return this.свСвидField;
			}
			set
			{
				this.свСвидField = value;
			}
		}

		public ИдГРНДатаТип ГРНДатаИспрПред
		{
			get
			{
				return this.гРНДатаИспрПредField;
			}
			set
			{
				this.гРНДатаИспрПредField = value;
			}
		}

		public ИдГРНДатаТип ГРНДатаНедПред
		{
			get
			{
				return this.гРНДатаНедПредField;
			}
			set
			{
				this.гРНДатаНедПредField = value;
			}
		}

		public FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСтатусЗап СвСтатусЗап
		{
			get
			{
				return this.свСтатусЗапField;
			}
			set
			{
				this.свСтатусЗапField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
		public string ИдЗап
		{
			get
			{
				return this.идЗапField;
			}
			set
			{
				this.идЗапField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ГРН
		{
			get
			{
				return this.гРНField;
			}
			set
			{
				this.гРНField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаЗап
		{
			get
			{
				return this.датаЗапField;
			}
			set
			{
				this.датаЗапField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвЗапЕГРЮЛ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвЗапЕГРЮЛ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвЗапЕГРЮЛ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвЗапЕГРЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвЗапЕГРЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвЗапЕГРЮЛ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвЗапЕГРЮЛ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвЗапЕГРЮЛ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвЗапЕГРЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвЗапЕГРЮЛ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвЗапЕГРЮЛ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвЗапЕГРЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвЗапЕГРЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвЗапЕГРЮЛ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвЗапЕГРЮЛ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвЗапЕГРЮЛ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public partial class ВидЗапТип
	{

		private string кодСПВЗField;

		private string наимВидЗапField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодСПВЗ
		{
			get
			{
				return this.кодСПВЗField;
			}
			set
			{
				this.кодСПВЗField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимВидЗап
		{
			get
			{
				return this.наимВидЗапField;
			}
			set
			{
				this.наимВидЗапField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(ВидЗапТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current ВидЗапТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an ВидЗапТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output ВидЗапТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out ВидЗапТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ВидЗапТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out ВидЗапТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static ВидЗапТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((ВидЗапТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current ВидЗапТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an ВидЗапТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output ВидЗапТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out ВидЗапТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ВидЗапТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out ВидЗапТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static ВидЗапТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвЗапЕГРЮЛСведПредДок
	{

		private string наимДокField;

		private string номДокField;

		private System.DateTime датаДокField;

		private bool датаДокFieldSpecified;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public string НаимДок
		{
			get
			{
				return this.наимДокField;
			}
			set
			{
				this.наимДокField = value;
			}
		}

		public string НомДок
		{
			get
			{
				return this.номДокField;
			}
			set
			{
				this.номДокField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute(DataType = "date")]
		public System.DateTime ДатаДок
		{
			get
			{
				return this.датаДокField;
			}
			set
			{
				this.датаДокField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool ДатаДокSpecified
		{
			get
			{
				return this.датаДокFieldSpecified;
			}
			set
			{
				this.датаДокFieldSpecified = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвЗапЕГРЮЛСведПредДок));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвЗапЕГРЮЛСведПредДок object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвЗапЕГРЮЛСведПредДок object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвЗапЕГРЮЛСведПредДок object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвЗапЕГРЮЛСведПредДок obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвЗапЕГРЮЛСведПредДок);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвЗапЕГРЮЛСведПредДок obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвЗапЕГРЮЛСведПредДок Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвЗапЕГРЮЛСведПредДок)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвЗапЕГРЮЛСведПредДок object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвЗапЕГРЮЛСведПредДок object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвЗапЕГРЮЛСведПредДок object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвЗапЕГРЮЛСведПредДок obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвЗапЕГРЮЛСведПредДок);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвЗапЕГРЮЛСведПредДок obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвЗапЕГРЮЛСведПредДок LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСвид
	{

		private ГРНДатаТип гРНДатаСвидНедField;

		private string серияField;

		private string номерField;

		private System.DateTime датаВыдСвидField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСвид()
		{
			this.гРНДатаСвидНедField = new ГРНДатаТип();
		}

		public ГРНДатаТип ГРНДатаСвидНед
		{
			get
			{
				return this.гРНДатаСвидНедField;
			}
			set
			{
				this.гРНДатаСвидНедField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string Серия
		{
			get
			{
				return this.серияField;
			}
			set
			{
				this.серияField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string Номер
		{
			get
			{
				return this.номерField;
			}
			set
			{
				this.номерField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаВыдСвид
		{
			get
			{
				return this.датаВыдСвидField;
			}
			set
			{
				this.датаВыдСвидField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСвид));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСвид object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСвид object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСвид object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСвид obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСвид);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСвид obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСвид Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСвид)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСвид object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСвид object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСвид object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСвид obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСвид);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСвид obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСвид LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipul-types/4.0.5")]
	public partial class ИдГРНДатаТип
	{

		private string идЗапField;

		private string гРНField;

		private System.DateTime датаЗапField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
		public string ИдЗап
		{
			get
			{
				return this.идЗапField;
			}
			set
			{
				this.идЗапField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ГРН
		{
			get
			{
				return this.гРНField;
			}
			set
			{
				this.гРНField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаЗап
		{
			get
			{
				return this.датаЗапField;
			}
			set
			{
				this.датаЗапField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(ИдГРНДатаТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current ИдГРНДатаТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an ИдГРНДатаТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output ИдГРНДатаТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out ИдГРНДатаТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ИдГРНДатаТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out ИдГРНДатаТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static ИдГРНДатаТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((ИдГРНДатаТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current ИдГРНДатаТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an ИдГРНДатаТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output ИдГРНДатаТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out ИдГРНДатаТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ИдГРНДатаТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out ИдГРНДатаТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static ИдГРНДатаТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public partial class FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСтатусЗап
	{

		private ИдГРНДатаТип гРНДатаНедField;

		private List<ИдГРНДатаТип> гРНДатаИспрField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСтатусЗап()
		{
			this.гРНДатаИспрField = new List<ИдГРНДатаТип>();
			this.гРНДатаНедField = new ИдГРНДатаТип();
		}

		public ИдГРНДатаТип ГРНДатаНед
		{
			get
			{
				return this.гРНДатаНедField;
			}
			set
			{
				this.гРНДатаНедField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("ГРНДатаИспр")]
		public List<ИдГРНДатаТип> ГРНДатаИспр
		{
			get
			{
				return this.гРНДатаИспрField;
			}
			set
			{
				this.гРНДатаИспрField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСтатусЗап));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСтатусЗап object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСтатусЗап object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСтатусЗап object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСтатусЗап obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСтатусЗап);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСтатусЗап obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСтатусЗап Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСтатусЗап)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСтатусЗап object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСтатусЗап object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСтатусЗап object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСтатусЗап obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСтатусЗап);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСтатусЗап obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipULResponseСвЮЛСвЗапЕГРЮЛСвСтатусЗап LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipul-tosmv-ru/311-14/4.0.5")]
	public enum FNSVipULResponseСвЮЛСпрОПФ
	{

		/// <remarks/>
		ОКОПФ,

		/// <remarks/>
		КОПФ,
	}
}

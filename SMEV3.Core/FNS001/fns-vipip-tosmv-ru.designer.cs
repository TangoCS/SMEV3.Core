// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.32989
//    <NameSpace>SMEV3.FNS001.fnsvipip</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>True</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace SMEV3.FNS001.fnsvipip
{
	using System;
	using System.Diagnostics;
	using System.Xml.Serialization;
	using System.Collections;
	using System.Xml.Schema;
	using System.ComponentModel;
	using System.IO;
	using System.Text;
	using System.Collections.Generic;


	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5", IsNullable = false)]
	public partial class FNSVipIPRequest
	{

		private FNSVipIPRequestЗапросИП запросИПField;

		private string идДокField;

		private string номерДелаField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipIPRequest()
		{
			this.запросИПField = new FNSVipIPRequestЗапросИП();
		}

		public FNSVipIPRequestЗапросИП ЗапросИП
		{
			get
			{
				return this.запросИПField;
			}
			set
			{
				this.запросИПField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ИдДок
		{
			get
			{
				return this.идДокField;
			}
			set
			{
				this.идДокField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НомерДела
		{
			get
			{
				return this.номерДелаField;
			}
			set
			{
				this.номерДелаField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipIPRequest));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipIPRequest object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipIPRequest object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipIPRequest object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipIPRequest obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPRequest);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipIPRequest obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipIPRequest Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipIPRequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipIPRequest object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipIPRequest object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipIPRequest object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipIPRequest obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPRequest);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipIPRequest obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipIPRequest LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public partial class FNSVipIPRequestЗапросИП
	{

		private string itemField;

		private ItemChoiceType itemElementNameField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlElementAttribute("ИНН", typeof(string))]
		[System.Xml.Serialization.XmlElementAttribute("ОГРНИП", typeof(string))]
		[System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
		public string Item
		{
			get
			{
				return this.itemField;
			}
			set
			{
				this.itemField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public ItemChoiceType ItemElementName
		{
			get
			{
				return this.itemElementNameField;
			}
			set
			{
				this.itemElementNameField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipIPRequestЗапросИП));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipIPRequestЗапросИП object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipIPRequestЗапросИП object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipIPRequestЗапросИП object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipIPRequestЗапросИП obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPRequestЗапросИП);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipIPRequestЗапросИП obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipIPRequestЗапросИП Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipIPRequestЗапросИП)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipIPRequestЗапросИП object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipIPRequestЗапросИП object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipIPRequestЗапросИП object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipIPRequestЗапросИП obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPRequestЗапросИП);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipIPRequestЗапросИП obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipIPRequestЗапросИП LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5", IncludeInSchema = false)]
	public enum ItemChoiceType
	{

		/// <remarks/>
		ИНН,

		/// <remarks/>
		ОГРНИП,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5", IsNullable = false)]
	public partial class FNSVipIPResponse
	{

		private object itemField;

		private string идДокField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlElementAttribute("КодОбр", typeof(string))]
		[System.Xml.Serialization.XmlElementAttribute("СвИП", typeof(FNSVipIPResponseСвИП))]
		public object Item
		{
			get
			{
				return this.itemField;
			}
			set
			{
				this.itemField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ИдДок
		{
			get
			{
				return this.идДокField;
			}
			set
			{
				this.идДокField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipIPResponse));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipIPResponse object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipIPResponse object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipIPResponse object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipIPResponse obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponse);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipIPResponse obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipIPResponse Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipIPResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipIPResponse object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipIPResponse object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipIPResponse object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipIPResponse obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponse);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipIPResponse obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipIPResponse LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public partial class FNSVipIPResponseСвИП
	{

		private FNSVipIPResponseСвИПСвФЛ свФЛField;

		private FNSVipIPResponseСвИПСвГражд свГраждField;

		private FNSVipIPResponseСвИПСвАдрМЖ свАдрМЖField;

		private FNSVipIPResponseСвИПСвАдрЭлПочты свАдрЭлПочтыField;

		private FNSVipIPResponseСвИПСвРегИП свРегИПField;

		private FNSVipIPResponseСвИПСвРегОрг свРегОргField;

		private FNSVipIPResponseСвИПСвСтатус свСтатусField;

		private FNSVipIPResponseСвИПСвПрекращ свПрекращField;

		private FNSVipIPResponseСвИПСвУчетНО свУчетНОField;

		private FNSVipIPResponseСвИПСвРегПФ свРегПФField;

		private FNSVipIPResponseСвИПСвРегФСС свРегФССField;

		private FNSVipIPResponseСвИПСвОКВЭД свОКВЭДField;

		private List<FNSVipIPResponseСвИПСвЛицензия> свЛицензияField;

		private List<FNSVipIPResponseСвИПСвЗапЕГРИП> свЗапЕГРИПField;

		private System.DateTime датаВыпField;

		private string оГРНИПField;

		private System.DateTime датаОГРНИПField;

		private string иННФЛField;

		private FNSVipIPResponseСвИПКодВидИП кодВидИПField;

		private string наимВидИПField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipIPResponseСвИП()
		{
			this.свЗапЕГРИПField = new List<FNSVipIPResponseСвИПСвЗапЕГРИП>();
			this.свЛицензияField = new List<FNSVipIPResponseСвИПСвЛицензия>();
			this.свОКВЭДField = new FNSVipIPResponseСвИПСвОКВЭД();
			this.свРегФССField = new FNSVipIPResponseСвИПСвРегФСС();
			this.свРегПФField = new FNSVipIPResponseСвИПСвРегПФ();
			this.свУчетНОField = new FNSVipIPResponseСвИПСвУчетНО();
			this.свПрекращField = new FNSVipIPResponseСвИПСвПрекращ();
			this.свСтатусField = new FNSVipIPResponseСвИПСвСтатус();
			this.свРегОргField = new FNSVipIPResponseСвИПСвРегОрг();
			this.свРегИПField = new FNSVipIPResponseСвИПСвРегИП();
			this.свАдрЭлПочтыField = new FNSVipIPResponseСвИПСвАдрЭлПочты();
			this.свАдрМЖField = new FNSVipIPResponseСвИПСвАдрМЖ();
			this.свГраждField = new FNSVipIPResponseСвИПСвГражд();
			this.свФЛField = new FNSVipIPResponseСвИПСвФЛ();
		}

		public FNSVipIPResponseСвИПСвФЛ СвФЛ
		{
			get
			{
				return this.свФЛField;
			}
			set
			{
				this.свФЛField = value;
			}
		}

		public FNSVipIPResponseСвИПСвГражд СвГражд
		{
			get
			{
				return this.свГраждField;
			}
			set
			{
				this.свГраждField = value;
			}
		}

		public FNSVipIPResponseСвИПСвАдрМЖ СвАдрМЖ
		{
			get
			{
				return this.свАдрМЖField;
			}
			set
			{
				this.свАдрМЖField = value;
			}
		}

		public FNSVipIPResponseСвИПСвАдрЭлПочты СвАдрЭлПочты
		{
			get
			{
				return this.свАдрЭлПочтыField;
			}
			set
			{
				this.свАдрЭлПочтыField = value;
			}
		}

		public FNSVipIPResponseСвИПСвРегИП СвРегИП
		{
			get
			{
				return this.свРегИПField;
			}
			set
			{
				this.свРегИПField = value;
			}
		}

		public FNSVipIPResponseСвИПСвРегОрг СвРегОрг
		{
			get
			{
				return this.свРегОргField;
			}
			set
			{
				this.свРегОргField = value;
			}
		}

		public FNSVipIPResponseСвИПСвСтатус СвСтатус
		{
			get
			{
				return this.свСтатусField;
			}
			set
			{
				this.свСтатусField = value;
			}
		}

		public FNSVipIPResponseСвИПСвПрекращ СвПрекращ
		{
			get
			{
				return this.свПрекращField;
			}
			set
			{
				this.свПрекращField = value;
			}
		}

		public FNSVipIPResponseСвИПСвУчетНО СвУчетНО
		{
			get
			{
				return this.свУчетНОField;
			}
			set
			{
				this.свУчетНОField = value;
			}
		}

		public FNSVipIPResponseСвИПСвРегПФ СвРегПФ
		{
			get
			{
				return this.свРегПФField;
			}
			set
			{
				this.свРегПФField = value;
			}
		}

		public FNSVipIPResponseСвИПСвРегФСС СвРегФСС
		{
			get
			{
				return this.свРегФССField;
			}
			set
			{
				this.свРегФССField = value;
			}
		}

		public FNSVipIPResponseСвИПСвОКВЭД СвОКВЭД
		{
			get
			{
				return this.свОКВЭДField;
			}
			set
			{
				this.свОКВЭДField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвЛицензия")]
		public List<FNSVipIPResponseСвИПСвЛицензия> СвЛицензия
		{
			get
			{
				return this.свЛицензияField;
			}
			set
			{
				this.свЛицензияField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвЗапЕГРИП")]
		public List<FNSVipIPResponseСвИПСвЗапЕГРИП> СвЗапЕГРИП
		{
			get
			{
				return this.свЗапЕГРИПField;
			}
			set
			{
				this.свЗапЕГРИПField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаВып
		{
			get
			{
				return this.датаВыпField;
			}
			set
			{
				this.датаВыпField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ОГРНИП
		{
			get
			{
				return this.оГРНИПField;
			}
			set
			{
				this.оГРНИПField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаОГРНИП
		{
			get
			{
				return this.датаОГРНИПField;
			}
			set
			{
				this.датаОГРНИПField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ИННФЛ
		{
			get
			{
				return this.иННФЛField;
			}
			set
			{
				this.иННФЛField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public FNSVipIPResponseСвИПКодВидИП КодВидИП
		{
			get
			{
				return this.кодВидИПField;
			}
			set
			{
				this.кодВидИПField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимВидИП
		{
			get
			{
				return this.наимВидИПField;
			}
			set
			{
				this.наимВидИПField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipIPResponseСвИП));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipIPResponseСвИП object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipIPResponseСвИП object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИП object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipIPResponseСвИП obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИП);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipIPResponseСвИП obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipIPResponseСвИП Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipIPResponseСвИП)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipIPResponseСвИП object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipIPResponseСвИП object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИП object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИП obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИП);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИП obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipIPResponseСвИП LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public partial class FNSVipIPResponseСвИПСвФЛ
	{

		private ФИО1Тип фИОРусField;

		private ФИО1Тип фИОЛатField;

		private ГРНИПДатаТип гРНИПДатаField;

		private ГРНИПДатаТип гРНИПДатаИспрField;

		private FNSVipIPResponseСвИПСвФЛПол полField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipIPResponseСвИПСвФЛ()
		{
			this.гРНИПДатаИспрField = new ГРНИПДатаТип();
			this.гРНИПДатаField = new ГРНИПДатаТип();
			this.фИОЛатField = new ФИО1Тип();
			this.фИОРусField = new ФИО1Тип();
		}

		public ФИО1Тип ФИОРус
		{
			get
			{
				return this.фИОРусField;
			}
			set
			{
				this.фИОРусField = value;
			}
		}

		public ФИО1Тип ФИОЛат
		{
			get
			{
				return this.фИОЛатField;
			}
			set
			{
				this.фИОЛатField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДатаИспр
		{
			get
			{
				return this.гРНИПДатаИспрField;
			}
			set
			{
				this.гРНИПДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public FNSVipIPResponseСвИПСвФЛПол Пол
		{
			get
			{
				return this.полField;
			}
			set
			{
				this.полField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipIPResponseСвИПСвФЛ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвФЛ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipIPResponseСвИПСвФЛ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвФЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвФЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвФЛ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвФЛ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвФЛ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipIPResponseСвИПСвФЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвФЛ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipIPResponseСвИПСвФЛ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвФЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвФЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвФЛ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвФЛ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвФЛ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipip-types/4.0.5")]
	public partial class ФИО1Тип
	{

		private string фамилияField;

		private string имяField;

		private string отчествоField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string Фамилия
		{
			get
			{
				return this.фамилияField;
			}
			set
			{
				this.фамилияField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string Имя
		{
			get
			{
				return this.имяField;
			}
			set
			{
				this.имяField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string Отчество
		{
			get
			{
				return this.отчествоField;
			}
			set
			{
				this.отчествоField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФИО1Тип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current ФИО1Тип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an ФИО1Тип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output ФИО1Тип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out ФИО1Тип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ФИО1Тип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out ФИО1Тип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static ФИО1Тип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((ФИО1Тип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current ФИО1Тип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an ФИО1Тип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output ФИО1Тип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out ФИО1Тип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ФИО1Тип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out ФИО1Тип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static ФИО1Тип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipip-types/4.0.5")]
	public partial class ГРНИПДатаТип
	{

		private string гРНИПField;

		private System.DateTime датаЗаписиField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ГРНИП
		{
			get
			{
				return this.гРНИПField;
			}
			set
			{
				this.гРНИПField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаЗаписи
		{
			get
			{
				return this.датаЗаписиField;
			}
			set
			{
				this.датаЗаписиField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(ГРНИПДатаТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current ГРНИПДатаТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an ГРНИПДатаТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output ГРНИПДатаТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out ГРНИПДатаТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ГРНИПДатаТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out ГРНИПДатаТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static ГРНИПДатаТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((ГРНИПДатаТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current ГРНИПДатаТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an ГРНИПДатаТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output ГРНИПДатаТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out ГРНИПДатаТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ГРНИПДатаТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out ГРНИПДатаТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static ГРНИПДатаТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public enum FNSVipIPResponseСвИПСвФЛПол
	{

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("1")]
		Item1,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("2")]
		Item2,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public partial class FNSVipIPResponseСвИПСвГражд
	{

		private ГРНИПДатаТип гРНИПДатаField;

		private ГРНИПДатаТип гРНИПДатаИспрField;

		private FNSVipIPResponseСвИПСвГраждВидГражд видГраждField;

		private string оКСМField;

		private string наимСтранField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipIPResponseСвИПСвГражд()
		{
			this.гРНИПДатаИспрField = new ГРНИПДатаТип();
			this.гРНИПДатаField = new ГРНИПДатаТип();
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДатаИспр
		{
			get
			{
				return this.гРНИПДатаИспрField;
			}
			set
			{
				this.гРНИПДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public FNSVipIPResponseСвИПСвГраждВидГражд ВидГражд
		{
			get
			{
				return this.видГраждField;
			}
			set
			{
				this.видГраждField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ОКСМ
		{
			get
			{
				return this.оКСМField;
			}
			set
			{
				this.оКСМField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимСтран
		{
			get
			{
				return this.наимСтранField;
			}
			set
			{
				this.наимСтранField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipIPResponseСвИПСвГражд));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвГражд object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipIPResponseСвИПСвГражд object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвГражд object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвГражд obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвГражд);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвГражд obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвГражд Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipIPResponseСвИПСвГражд)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвГражд object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipIPResponseСвИПСвГражд object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвГражд object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвГражд obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвГражд);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвГражд obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвГражд LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public enum FNSVipIPResponseСвИПСвГраждВидГражд
	{

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("1")]
		Item1,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("2")]
		Item2,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("3")]
		Item3,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public partial class FNSVipIPResponseСвИПСвАдрМЖ
	{

		private АдрРФИПОткрТип адресРФField;

		private ГРНИПДатаТип гРНИПДатаField;

		private ГРНИПДатаТип гРНИПДатаИспрField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipIPResponseСвИПСвАдрМЖ()
		{
			this.гРНИПДатаИспрField = new ГРНИПДатаТип();
			this.гРНИПДатаField = new ГРНИПДатаТип();
			this.адресРФField = new АдрРФИПОткрТип();
		}

		public АдрРФИПОткрТип АдресРФ
		{
			get
			{
				return this.адресРФField;
			}
			set
			{
				this.адресРФField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДатаИспр
		{
			get
			{
				return this.гРНИПДатаИспрField;
			}
			set
			{
				this.гРНИПДатаИспрField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipIPResponseСвИПСвАдрМЖ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвАдрМЖ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipIPResponseСвИПСвАдрМЖ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвАдрМЖ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвАдрМЖ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвАдрМЖ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвАдрМЖ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвАдрМЖ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipIPResponseСвИПСвАдрМЖ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвАдрМЖ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipIPResponseСвИПСвАдрМЖ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвАдрМЖ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвАдрМЖ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвАдрМЖ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвАдрМЖ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвАдрМЖ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipip-types/4.0.5")]
	public partial class АдрРФИПОткрТип
	{

		private РегионТип регионField;

		private РайонТип районField;

		private ГородТип городField;

		private НаселПунктТип населПунктField;

		private string кодРегионField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public АдрРФИПОткрТип()
		{
			this.населПунктField = new НаселПунктТип();
			this.городField = new ГородТип();
			this.районField = new РайонТип();
			this.регионField = new РегионТип();
		}

		public РегионТип Регион
		{
			get
			{
				return this.регионField;
			}
			set
			{
				this.регионField = value;
			}
		}

		public РайонТип Район
		{
			get
			{
				return this.районField;
			}
			set
			{
				this.районField = value;
			}
		}

		public ГородТип Город
		{
			get
			{
				return this.городField;
			}
			set
			{
				this.городField = value;
			}
		}

		public НаселПунктТип НаселПункт
		{
			get
			{
				return this.населПунктField;
			}
			set
			{
				this.населПунктField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодРегион
		{
			get
			{
				return this.кодРегионField;
			}
			set
			{
				this.кодРегионField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(АдрРФИПОткрТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current АдрРФИПОткрТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an АдрРФИПОткрТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output АдрРФИПОткрТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out АдрРФИПОткрТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(АдрРФИПОткрТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out АдрРФИПОткрТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static АдрРФИПОткрТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((АдрРФИПОткрТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current АдрРФИПОткрТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an АдрРФИПОткрТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output АдрРФИПОткрТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out АдрРФИПОткрТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(АдрРФИПОткрТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out АдрРФИПОткрТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static АдрРФИПОткрТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipip-types/4.0.5")]
	public partial class РегионТип
	{

		private string типРегионField;

		private string наимРегионField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ТипРегион
		{
			get
			{
				return this.типРегионField;
			}
			set
			{
				this.типРегионField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимРегион
		{
			get
			{
				return this.наимРегионField;
			}
			set
			{
				this.наимРегионField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(РегионТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current РегионТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an РегионТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output РегионТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out РегионТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(РегионТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out РегионТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static РегионТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((РегионТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current РегионТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an РегионТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output РегионТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out РегионТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(РегионТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out РегионТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static РегионТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipip-types/4.0.5")]
	public partial class РайонТип
	{

		private string типРайонField;

		private string наимРайонField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ТипРайон
		{
			get
			{
				return this.типРайонField;
			}
			set
			{
				this.типРайонField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимРайон
		{
			get
			{
				return this.наимРайонField;
			}
			set
			{
				this.наимРайонField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(РайонТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current РайонТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an РайонТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output РайонТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out РайонТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(РайонТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out РайонТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static РайонТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((РайонТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current РайонТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an РайонТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output РайонТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out РайонТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(РайонТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out РайонТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static РайонТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipip-types/4.0.5")]
	public partial class ГородТип
	{

		private string типГородField;

		private string наимГородField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ТипГород
		{
			get
			{
				return this.типГородField;
			}
			set
			{
				this.типГородField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимГород
		{
			get
			{
				return this.наимГородField;
			}
			set
			{
				this.наимГородField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(ГородТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current ГородТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an ГородТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output ГородТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out ГородТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ГородТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out ГородТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static ГородТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((ГородТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current ГородТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an ГородТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output ГородТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out ГородТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ГородТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out ГородТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static ГородТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipip-types/4.0.5")]
	public partial class НаселПунктТип
	{

		private string типНаселПунктField;

		private string наимНаселПунктField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ТипНаселПункт
		{
			get
			{
				return this.типНаселПунктField;
			}
			set
			{
				this.типНаселПунктField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимНаселПункт
		{
			get
			{
				return this.наимНаселПунктField;
			}
			set
			{
				this.наимНаселПунктField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(НаселПунктТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current НаселПунктТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an НаселПунктТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output НаселПунктТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out НаселПунктТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(НаселПунктТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out НаселПунктТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static НаселПунктТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((НаселПунктТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current НаселПунктТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an НаселПунктТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output НаселПунктТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out НаселПунктТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(НаселПунктТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out НаселПунктТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static НаселПунктТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public partial class FNSVipIPResponseСвИПСвАдрЭлПочты
	{

		private ГРНИПДатаТип гРНИПДатаField;

		private ГРНИПДатаТип гРНИПДатаИспрField;

		private string emailField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipIPResponseСвИПСвАдрЭлПочты()
		{
			this.гРНИПДатаИспрField = new ГРНИПДатаТип();
			this.гРНИПДатаField = new ГРНИПДатаТип();
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДатаИспр
		{
			get
			{
				return this.гРНИПДатаИспрField;
			}
			set
			{
				this.гРНИПДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute("E-mail")]
		public string Email
		{
			get
			{
				return this.emailField;
			}
			set
			{
				this.emailField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipIPResponseСвИПСвАдрЭлПочты));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвАдрЭлПочты object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipIPResponseСвИПСвАдрЭлПочты object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвАдрЭлПочты object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвАдрЭлПочты obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвАдрЭлПочты);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвАдрЭлПочты obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвАдрЭлПочты Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipIPResponseСвИПСвАдрЭлПочты)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвАдрЭлПочты object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipIPResponseСвИПСвАдрЭлПочты object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвАдрЭлПочты object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвАдрЭлПочты obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвАдрЭлПочты);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвАдрЭлПочты obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвАдрЭлПочты LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public partial class FNSVipIPResponseСвИПСвРегИП
	{

		private FNSVipIPResponseСвИПСвРегИПСвКФХ свКФХField;

		private string оГРНИПField;

		private System.DateTime датаОГРНИПField;

		private string регНомField;

		private System.DateTime датаРегField;

		private bool датаРегFieldSpecified;

		private string наимРОField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipIPResponseСвИПСвРегИП()
		{
			this.свКФХField = new FNSVipIPResponseСвИПСвРегИПСвКФХ();
		}

		public FNSVipIPResponseСвИПСвРегИПСвКФХ СвКФХ
		{
			get
			{
				return this.свКФХField;
			}
			set
			{
				this.свКФХField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ОГРНИП
		{
			get
			{
				return this.оГРНИПField;
			}
			set
			{
				this.оГРНИПField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаОГРНИП
		{
			get
			{
				return this.датаОГРНИПField;
			}
			set
			{
				this.датаОГРНИПField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string РегНом
		{
			get
			{
				return this.регНомField;
			}
			set
			{
				this.регНомField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаРег
		{
			get
			{
				return this.датаРегField;
			}
			set
			{
				this.датаРегField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool ДатаРегSpecified
		{
			get
			{
				return this.датаРегFieldSpecified;
			}
			set
			{
				this.датаРегFieldSpecified = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимРО
		{
			get
			{
				return this.наимРОField;
			}
			set
			{
				this.наимРОField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipIPResponseСвИПСвРегИП));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвРегИП object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipIPResponseСвИПСвРегИП object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвРегИП object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвРегИП obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвРегИП);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвРегИП obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвРегИП Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipIPResponseСвИПСвРегИП)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвРегИП object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipIPResponseСвИПСвРегИП object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвРегИП object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвРегИП obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвРегИП);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвРегИП obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвРегИП LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public partial class FNSVipIPResponseСвИПСвРегИПСвКФХ
	{

		private ГРНИПДатаТип гРНИПДатаField;

		private ГРНИПДатаТип гРНИПДатаИспрField;

		private string оГРНField;

		private string иННField;

		private string наимЮЛПолнField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipIPResponseСвИПСвРегИПСвКФХ()
		{
			this.гРНИПДатаИспрField = new ГРНИПДатаТип();
			this.гРНИПДатаField = new ГРНИПДатаТип();
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДатаИспр
		{
			get
			{
				return this.гРНИПДатаИспрField;
			}
			set
			{
				this.гРНИПДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ОГРН
		{
			get
			{
				return this.оГРНField;
			}
			set
			{
				this.оГРНField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ИНН
		{
			get
			{
				return this.иННField;
			}
			set
			{
				this.иННField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимЮЛПолн
		{
			get
			{
				return this.наимЮЛПолнField;
			}
			set
			{
				this.наимЮЛПолнField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipIPResponseСвИПСвРегИПСвКФХ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвРегИПСвКФХ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipIPResponseСвИПСвРегИПСвКФХ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвРегИПСвКФХ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвРегИПСвКФХ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвРегИПСвКФХ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвРегИПСвКФХ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвРегИПСвКФХ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipIPResponseСвИПСвРегИПСвКФХ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвРегИПСвКФХ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipIPResponseСвИПСвРегИПСвКФХ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвРегИПСвКФХ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвРегИПСвКФХ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвРегИПСвКФХ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвРегИПСвКФХ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвРегИПСвКФХ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public partial class FNSVipIPResponseСвИПСвРегОрг
	{

		private ГРНИПДатаТип гРНИПДатаField;

		private string кодНОField;

		private string наимНОField;

		private string адрРОField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipIPResponseСвИПСвРегОрг()
		{
			this.гРНИПДатаField = new ГРНИПДатаТип();
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодНО
		{
			get
			{
				return this.кодНОField;
			}
			set
			{
				this.кодНОField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимНО
		{
			get
			{
				return this.наимНОField;
			}
			set
			{
				this.наимНОField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string АдрРО
		{
			get
			{
				return this.адрРОField;
			}
			set
			{
				this.адрРОField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipIPResponseСвИПСвРегОрг));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвРегОрг object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipIPResponseСвИПСвРегОрг object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвРегОрг object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвРегОрг obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвРегОрг);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвРегОрг obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвРегОрг Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipIPResponseСвИПСвРегОрг)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвРегОрг object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipIPResponseСвИПСвРегОрг object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвРегОрг object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвРегОрг obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвРегОрг);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвРегОрг obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвРегОрг LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public partial class FNSVipIPResponseСвИПСвСтатус
	{

		private FNSVipIPResponseСвИПСвСтатусСвСтатус свСтатусField;

		private ГРНИПДатаТип гРНИПДатаField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipIPResponseСвИПСвСтатус()
		{
			this.гРНИПДатаField = new ГРНИПДатаТип();
			this.свСтатусField = new FNSVipIPResponseСвИПСвСтатусСвСтатус();
		}

		public FNSVipIPResponseСвИПСвСтатусСвСтатус СвСтатус
		{
			get
			{
				return this.свСтатусField;
			}
			set
			{
				this.свСтатусField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipIPResponseСвИПСвСтатус));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвСтатус object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipIPResponseСвИПСвСтатус object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвСтатус object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвСтатус obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвСтатус);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвСтатус obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвСтатус Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipIPResponseСвИПСвСтатус)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвСтатус object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipIPResponseСвИПСвСтатус object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвСтатус object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвСтатус obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвСтатус);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвСтатус obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвСтатус LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public partial class FNSVipIPResponseСвИПСвСтатусСвСтатус
	{

		private FNSVipIPResponseСвИПСвСтатусСвСтатусКодСтатус кодСтатусField;

		private string наимСтатусField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public FNSVipIPResponseСвИПСвСтатусСвСтатусКодСтатус КодСтатус
		{
			get
			{
				return this.кодСтатусField;
			}
			set
			{
				this.кодСтатусField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимСтатус
		{
			get
			{
				return this.наимСтатусField;
			}
			set
			{
				this.наимСтатусField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipIPResponseСвИПСвСтатусСвСтатус));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвСтатусСвСтатус object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipIPResponseСвИПСвСтатусСвСтатус object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвСтатусСвСтатус object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвСтатусСвСтатус obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвСтатусСвСтатус);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвСтатусСвСтатус obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвСтатусСвСтатус Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipIPResponseСвИПСвСтатусСвСтатус)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвСтатусСвСтатус object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipIPResponseСвИПСвСтатусСвСтатус object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвСтатусСвСтатус object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвСтатусСвСтатус obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвСтатусСвСтатус);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвСтатусСвСтатус obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвСтатусСвСтатус LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public enum FNSVipIPResponseСвИПСвСтатусСвСтатусКодСтатус
	{

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("101")]
		Item101,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("102")]
		Item102,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("103")]
		Item103,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("104")]
		Item104,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public partial class FNSVipIPResponseСвИПСвПрекращ
	{

		private FNSVipIPResponseСвИПСвПрекращСвСтатус свСтатусField;

		private ГРНИПДатаТип гРНИПДатаField;

		private FNSVipIPResponseСвИПСвПрекращСвНовЮЛ свНовЮЛField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipIPResponseСвИПСвПрекращ()
		{
			this.свНовЮЛField = new FNSVipIPResponseСвИПСвПрекращСвНовЮЛ();
			this.гРНИПДатаField = new ГРНИПДатаТип();
			this.свСтатусField = new FNSVipIPResponseСвИПСвПрекращСвСтатус();
		}

		public FNSVipIPResponseСвИПСвПрекращСвСтатус СвСтатус
		{
			get
			{
				return this.свСтатусField;
			}
			set
			{
				this.свСтатусField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		public FNSVipIPResponseСвИПСвПрекращСвНовЮЛ СвНовЮЛ
		{
			get
			{
				return this.свНовЮЛField;
			}
			set
			{
				this.свНовЮЛField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipIPResponseСвИПСвПрекращ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвПрекращ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipIPResponseСвИПСвПрекращ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвПрекращ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвПрекращ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвПрекращ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвПрекращ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвПрекращ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipIPResponseСвИПСвПрекращ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвПрекращ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipIPResponseСвИПСвПрекращ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвПрекращ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвПрекращ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвПрекращ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвПрекращ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвПрекращ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public partial class FNSVipIPResponseСвИПСвПрекращСвСтатус
	{

		private string кодСтатусField;

		private string наимСтатусField;

		private System.DateTime датаПрекращField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодСтатус
		{
			get
			{
				return this.кодСтатусField;
			}
			set
			{
				this.кодСтатусField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимСтатус
		{
			get
			{
				return this.наимСтатусField;
			}
			set
			{
				this.наимСтатусField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаПрекращ
		{
			get
			{
				return this.датаПрекращField;
			}
			set
			{
				this.датаПрекращField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipIPResponseСвИПСвПрекращСвСтатус));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвПрекращСвСтатус object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipIPResponseСвИПСвПрекращСвСтатус object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвПрекращСвСтатус object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвПрекращСвСтатус obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвПрекращСвСтатус);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвПрекращСвСтатус obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвПрекращСвСтатус Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipIPResponseСвИПСвПрекращСвСтатус)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвПрекращСвСтатус object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipIPResponseСвИПСвПрекращСвСтатус object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвПрекращСвСтатус object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвПрекращСвСтатус obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвПрекращСвСтатус);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвПрекращСвСтатус obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвПрекращСвСтатус LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public partial class FNSVipIPResponseСвИПСвПрекращСвНовЮЛ
	{

		private ГРНИПДатаТип гРНИПДатаField;

		private ГРНИПДатаТип гРНИПДатаИспрField;

		private string оГРНField;

		private string иННField;

		private string наимЮЛПолнField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipIPResponseСвИПСвПрекращСвНовЮЛ()
		{
			this.гРНИПДатаИспрField = new ГРНИПДатаТип();
			this.гРНИПДатаField = new ГРНИПДатаТип();
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДатаИспр
		{
			get
			{
				return this.гРНИПДатаИспрField;
			}
			set
			{
				this.гРНИПДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ОГРН
		{
			get
			{
				return this.оГРНField;
			}
			set
			{
				this.оГРНField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ИНН
		{
			get
			{
				return this.иННField;
			}
			set
			{
				this.иННField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимЮЛПолн
		{
			get
			{
				return this.наимЮЛПолнField;
			}
			set
			{
				this.наимЮЛПолнField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipIPResponseСвИПСвПрекращСвНовЮЛ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвПрекращСвНовЮЛ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipIPResponseСвИПСвПрекращСвНовЮЛ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвПрекращСвНовЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвПрекращСвНовЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвПрекращСвНовЮЛ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвПрекращСвНовЮЛ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвПрекращСвНовЮЛ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipIPResponseСвИПСвПрекращСвНовЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвПрекращСвНовЮЛ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipIPResponseСвИПСвПрекращСвНовЮЛ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвПрекращСвНовЮЛ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвПрекращСвНовЮЛ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвПрекращСвНовЮЛ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвПрекращСвНовЮЛ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвПрекращСвНовЮЛ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public partial class FNSVipIPResponseСвИПСвУчетНО
	{

		private FNSVipIPResponseСвИПСвУчетНОСвНО свНОField;

		private ГРНИПДатаТип гРНИПДатаField;

		private ГРНИПДатаТип гРНИПДатаИспрField;

		private string иННФЛField;

		private System.DateTime датаПостУчField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipIPResponseСвИПСвУчетНО()
		{
			this.гРНИПДатаИспрField = new ГРНИПДатаТип();
			this.гРНИПДатаField = new ГРНИПДатаТип();
			this.свНОField = new FNSVipIPResponseСвИПСвУчетНОСвНО();
		}

		public FNSVipIPResponseСвИПСвУчетНОСвНО СвНО
		{
			get
			{
				return this.свНОField;
			}
			set
			{
				this.свНОField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДатаИспр
		{
			get
			{
				return this.гРНИПДатаИспрField;
			}
			set
			{
				this.гРНИПДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ИННФЛ
		{
			get
			{
				return this.иННФЛField;
			}
			set
			{
				this.иННФЛField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаПостУч
		{
			get
			{
				return this.датаПостУчField;
			}
			set
			{
				this.датаПостУчField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipIPResponseСвИПСвУчетНО));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвУчетНО object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipIPResponseСвИПСвУчетНО object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвУчетНО object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвУчетНО obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвУчетНО);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвУчетНО obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвУчетНО Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipIPResponseСвИПСвУчетНО)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвУчетНО object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipIPResponseСвИПСвУчетНО object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвУчетНО object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвУчетНО obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвУчетНО);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвУчетНО obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвУчетНО LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public partial class FNSVipIPResponseСвИПСвУчетНОСвНО
	{

		private string кодНОField;

		private string наимНОField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодНО
		{
			get
			{
				return this.кодНОField;
			}
			set
			{
				this.кодНОField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимНО
		{
			get
			{
				return this.наимНОField;
			}
			set
			{
				this.наимНОField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipIPResponseСвИПСвУчетНОСвНО));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвУчетНОСвНО object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipIPResponseСвИПСвУчетНОСвНО object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвУчетНОСвНО object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвУчетНОСвНО obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвУчетНОСвНО);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвУчетНОСвНО obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвУчетНОСвНО Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipIPResponseСвИПСвУчетНОСвНО)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвУчетНОСвНО object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipIPResponseСвИПСвУчетНОСвНО object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвУчетНОСвНО object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвУчетНОСвНО obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвУчетНОСвНО);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвУчетНОСвНО obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвУчетНОСвНО LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public partial class FNSVipIPResponseСвИПСвРегПФ
	{

		private FNSVipIPResponseСвИПСвРегПФСвОргПФ свОргПФField;

		private ГРНИПДатаТип гРНИПДатаField;

		private ГРНИПДатаТип гРНИПДатаИспрField;

		private string регНомПФField;

		private System.DateTime датаРегField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipIPResponseСвИПСвРегПФ()
		{
			this.гРНИПДатаИспрField = new ГРНИПДатаТип();
			this.гРНИПДатаField = new ГРНИПДатаТип();
			this.свОргПФField = new FNSVipIPResponseСвИПСвРегПФСвОргПФ();
		}

		public FNSVipIPResponseСвИПСвРегПФСвОргПФ СвОргПФ
		{
			get
			{
				return this.свОргПФField;
			}
			set
			{
				this.свОргПФField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДатаИспр
		{
			get
			{
				return this.гРНИПДатаИспрField;
			}
			set
			{
				this.гРНИПДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string РегНомПФ
		{
			get
			{
				return this.регНомПФField;
			}
			set
			{
				this.регНомПФField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаРег
		{
			get
			{
				return this.датаРегField;
			}
			set
			{
				this.датаРегField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipIPResponseСвИПСвРегПФ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвРегПФ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipIPResponseСвИПСвРегПФ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвРегПФ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвРегПФ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвРегПФ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвРегПФ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвРегПФ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipIPResponseСвИПСвРегПФ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвРегПФ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipIPResponseСвИПСвРегПФ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвРегПФ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвРегПФ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвРегПФ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвРегПФ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвРегПФ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public partial class FNSVipIPResponseСвИПСвРегПФСвОргПФ
	{

		private string кодПФField;

		private string наимПФField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодПФ
		{
			get
			{
				return this.кодПФField;
			}
			set
			{
				this.кодПФField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимПФ
		{
			get
			{
				return this.наимПФField;
			}
			set
			{
				this.наимПФField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipIPResponseСвИПСвРегПФСвОргПФ));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвРегПФСвОргПФ object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipIPResponseСвИПСвРегПФСвОргПФ object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвРегПФСвОргПФ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвРегПФСвОргПФ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвРегПФСвОргПФ);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвРегПФСвОргПФ obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвРегПФСвОргПФ Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipIPResponseСвИПСвРегПФСвОргПФ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвРегПФСвОргПФ object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipIPResponseСвИПСвРегПФСвОргПФ object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвРегПФСвОргПФ object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвРегПФСвОргПФ obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвРегПФСвОргПФ);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвРегПФСвОргПФ obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвРегПФСвОргПФ LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public partial class FNSVipIPResponseСвИПСвРегФСС
	{

		private FNSVipIPResponseСвИПСвРегФСССвОргФСС свОргФССField;

		private ГРНИПДатаТип гРНИПДатаField;

		private ГРНИПДатаТип гРНИПДатаИспрField;

		private string регНомФССField;

		private System.DateTime датаРегField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipIPResponseСвИПСвРегФСС()
		{
			this.гРНИПДатаИспрField = new ГРНИПДатаТип();
			this.гРНИПДатаField = new ГРНИПДатаТип();
			this.свОргФССField = new FNSVipIPResponseСвИПСвРегФСССвОргФСС();
		}

		public FNSVipIPResponseСвИПСвРегФСССвОргФСС СвОргФСС
		{
			get
			{
				return this.свОргФССField;
			}
			set
			{
				this.свОргФССField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДатаИспр
		{
			get
			{
				return this.гРНИПДатаИспрField;
			}
			set
			{
				this.гРНИПДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string РегНомФСС
		{
			get
			{
				return this.регНомФССField;
			}
			set
			{
				this.регНомФССField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаРег
		{
			get
			{
				return this.датаРегField;
			}
			set
			{
				this.датаРегField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipIPResponseСвИПСвРегФСС));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвРегФСС object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipIPResponseСвИПСвРегФСС object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвРегФСС object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвРегФСС obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвРегФСС);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвРегФСС obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвРегФСС Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipIPResponseСвИПСвРегФСС)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвРегФСС object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipIPResponseСвИПСвРегФСС object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвРегФСС object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвРегФСС obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвРегФСС);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвРегФСС obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвРегФСС LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public partial class FNSVipIPResponseСвИПСвРегФСССвОргФСС
	{

		private string кодФССField;

		private string наимФССField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодФСС
		{
			get
			{
				return this.кодФССField;
			}
			set
			{
				this.кодФССField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимФСС
		{
			get
			{
				return this.наимФССField;
			}
			set
			{
				this.наимФССField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipIPResponseСвИПСвРегФСССвОргФСС));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвРегФСССвОргФСС object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipIPResponseСвИПСвРегФСССвОргФСС object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвРегФСССвОргФСС object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвРегФСССвОргФСС obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвРегФСССвОргФСС);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвРегФСССвОргФСС obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвРегФСССвОргФСС Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipIPResponseСвИПСвРегФСССвОргФСС)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвРегФСССвОргФСС object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipIPResponseСвИПСвРегФСССвОргФСС object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвРегФСССвОргФСС object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвРегФСССвОргФСС obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвРегФСССвОргФСС);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвРегФСССвОргФСС obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвРегФСССвОргФСС LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public partial class FNSVipIPResponseСвИПСвОКВЭД
	{

		private СвОКВЭДТип свОКВЭДОснField;

		private List<СвОКВЭДТип> свОКВЭДДопField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipIPResponseСвИПСвОКВЭД()
		{
			this.свОКВЭДДопField = new List<СвОКВЭДТип>();
			this.свОКВЭДОснField = new СвОКВЭДТип();
		}

		public СвОКВЭДТип СвОКВЭДОсн
		{
			get
			{
				return this.свОКВЭДОснField;
			}
			set
			{
				this.свОКВЭДОснField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвОКВЭДДоп")]
		public List<СвОКВЭДТип> СвОКВЭДДоп
		{
			get
			{
				return this.свОКВЭДДопField;
			}
			set
			{
				this.свОКВЭДДопField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipIPResponseСвИПСвОКВЭД));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвОКВЭД object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipIPResponseСвИПСвОКВЭД object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвОКВЭД object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвОКВЭД obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвОКВЭД);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвОКВЭД obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвОКВЭД Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipIPResponseСвИПСвОКВЭД)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвОКВЭД object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipIPResponseСвИПСвОКВЭД object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвОКВЭД object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвОКВЭД obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвОКВЭД);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвОКВЭД obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвОКВЭД LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipip-types/4.0.5")]
	public partial class СвОКВЭДТип
	{

		private ГРНИПДатаТип гРНИПДатаField;

		private ГРНИПДатаТип гРНИПДатаИспрField;

		private string кодОКВЭДField;

		private string наимОКВЭДField;

		private СвОКВЭДТипПрВерсОКВЭД прВерсОКВЭДField;

		private bool прВерсОКВЭДFieldSpecified;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public СвОКВЭДТип()
		{
			this.гРНИПДатаИспрField = new ГРНИПДатаТип();
			this.гРНИПДатаField = new ГРНИПДатаТип();
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДатаИспр
		{
			get
			{
				return this.гРНИПДатаИспрField;
			}
			set
			{
				this.гРНИПДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодОКВЭД
		{
			get
			{
				return this.кодОКВЭДField;
			}
			set
			{
				this.кодОКВЭДField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимОКВЭД
		{
			get
			{
				return this.наимОКВЭДField;
			}
			set
			{
				this.наимОКВЭДField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public СвОКВЭДТипПрВерсОКВЭД ПрВерсОКВЭД
		{
			get
			{
				return this.прВерсОКВЭДField;
			}
			set
			{
				this.прВерсОКВЭДField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool ПрВерсОКВЭДSpecified
		{
			get
			{
				return this.прВерсОКВЭДFieldSpecified;
			}
			set
			{
				this.прВерсОКВЭДFieldSpecified = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвОКВЭДТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current СвОКВЭДТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an СвОКВЭДТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output СвОКВЭДТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out СвОКВЭДТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвОКВЭДТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out СвОКВЭДТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static СвОКВЭДТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((СвОКВЭДТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current СвОКВЭДТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an СвОКВЭДТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output СвОКВЭДТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out СвОКВЭДТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвОКВЭДТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out СвОКВЭДТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static СвОКВЭДТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns/vipip-types/4.0.5")]
	public enum СвОКВЭДТипПрВерсОКВЭД
	{

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("2001")]
		Item2001,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("2014")]
		Item2014,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public partial class FNSVipIPResponseСвИПСвЛицензия
	{

		private List<string> наимЛицВидДеятField;

		private List<string> местоДейстЛицField;

		private string лицОргВыдЛицField;

		private ГРНИПДатаТип гРНИПДатаField;

		private ГРНИПДатаТип гРНИПДатаИспрField;

		private FNSVipIPResponseСвИПСвЛицензияСвПриостЛиц свПриостЛицField;

		private string номЛицField;

		private System.DateTime датаЛицField;

		private System.DateTime датаНачЛицField;

		private System.DateTime датаОкончЛицField;

		private bool датаОкончЛицFieldSpecified;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipIPResponseСвИПСвЛицензия()
		{
			this.свПриостЛицField = new FNSVipIPResponseСвИПСвЛицензияСвПриостЛиц();
			this.гРНИПДатаИспрField = new ГРНИПДатаТип();
			this.гРНИПДатаField = new ГРНИПДатаТип();
			this.местоДейстЛицField = new List<string>();
			this.наимЛицВидДеятField = new List<string>();
		}

		[System.Xml.Serialization.XmlElementAttribute("НаимЛицВидДеят")]
		public List<string> НаимЛицВидДеят
		{
			get
			{
				return this.наимЛицВидДеятField;
			}
			set
			{
				this.наимЛицВидДеятField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("МестоДейстЛиц")]
		public List<string> МестоДейстЛиц
		{
			get
			{
				return this.местоДейстЛицField;
			}
			set
			{
				this.местоДейстЛицField = value;
			}
		}

		public string ЛицОргВыдЛиц
		{
			get
			{
				return this.лицОргВыдЛицField;
			}
			set
			{
				this.лицОргВыдЛицField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДатаИспр
		{
			get
			{
				return this.гРНИПДатаИспрField;
			}
			set
			{
				this.гРНИПДатаИспрField = value;
			}
		}

		public FNSVipIPResponseСвИПСвЛицензияСвПриостЛиц СвПриостЛиц
		{
			get
			{
				return this.свПриостЛицField;
			}
			set
			{
				this.свПриостЛицField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НомЛиц
		{
			get
			{
				return this.номЛицField;
			}
			set
			{
				this.номЛицField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаЛиц
		{
			get
			{
				return this.датаЛицField;
			}
			set
			{
				this.датаЛицField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаНачЛиц
		{
			get
			{
				return this.датаНачЛицField;
			}
			set
			{
				this.датаНачЛицField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаОкончЛиц
		{
			get
			{
				return this.датаОкончЛицField;
			}
			set
			{
				this.датаОкончЛицField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool ДатаОкончЛицSpecified
		{
			get
			{
				return this.датаОкончЛицFieldSpecified;
			}
			set
			{
				this.датаОкончЛицFieldSpecified = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipIPResponseСвИПСвЛицензия));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвЛицензия object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipIPResponseСвИПСвЛицензия object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвЛицензия object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвЛицензия obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвЛицензия);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвЛицензия obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвЛицензия Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipIPResponseСвИПСвЛицензия)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвЛицензия object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipIPResponseСвИПСвЛицензия object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвЛицензия object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвЛицензия obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвЛицензия);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвЛицензия obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвЛицензия LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public partial class FNSVipIPResponseСвИПСвЛицензияСвПриостЛиц
	{

		private ГРНИПДатаТип гРНИПДатаField;

		private ГРНИПДатаТип гРНИПДатаИспрField;

		private System.DateTime датаПриостЛицField;

		private string лицОргПриостЛицField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipIPResponseСвИПСвЛицензияСвПриостЛиц()
		{
			this.гРНИПДатаИспрField = new ГРНИПДатаТип();
			this.гРНИПДатаField = new ГРНИПДатаТип();
		}

		public ГРНИПДатаТип ГРНИПДата
		{
			get
			{
				return this.гРНИПДатаField;
			}
			set
			{
				this.гРНИПДатаField = value;
			}
		}

		public ГРНИПДатаТип ГРНИПДатаИспр
		{
			get
			{
				return this.гРНИПДатаИспрField;
			}
			set
			{
				this.гРНИПДатаИспрField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаПриостЛиц
		{
			get
			{
				return this.датаПриостЛицField;
			}
			set
			{
				this.датаПриостЛицField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ЛицОргПриостЛиц
		{
			get
			{
				return this.лицОргПриостЛицField;
			}
			set
			{
				this.лицОргПриостЛицField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipIPResponseСвИПСвЛицензияСвПриостЛиц));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвЛицензияСвПриостЛиц object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipIPResponseСвИПСвЛицензияСвПриостЛиц object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвЛицензияСвПриостЛиц object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвЛицензияСвПриостЛиц obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвЛицензияСвПриостЛиц);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвЛицензияСвПриостЛиц obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвЛицензияСвПриостЛиц Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipIPResponseСвИПСвЛицензияСвПриостЛиц)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвЛицензияСвПриостЛиц object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipIPResponseСвИПСвЛицензияСвПриостЛиц object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвЛицензияСвПриостЛиц object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвЛицензияСвПриостЛиц obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвЛицензияСвПриостЛиц);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвЛицензияСвПриостЛиц obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвЛицензияСвПриостЛиц LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public partial class FNSVipIPResponseСвИПСвЗапЕГРИП
	{

		private ВидЗапТип видЗапField;

		private СвРегОргТип свРегОргField;

		private List<FNSVipIPResponseСвИПСвЗапЕГРИПСведПредДок> сведПредДокField;

		private List<FNSVipIPResponseСвИПСвЗапЕГРИПСвСвид> свСвидField;

		private ИдГРНИПДатаТип гРНИПДатаИспрПредField;

		private ИдГРНИПДатаТип гРНИПДатаНедПредField;

		private FNSVipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап свСтатусЗапField;

		private string идЗапField;

		private string гРНИПField;

		private System.DateTime датаЗапField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipIPResponseСвИПСвЗапЕГРИП()
		{
			this.свСтатусЗапField = new FNSVipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап();
			this.гРНИПДатаНедПредField = new ИдГРНИПДатаТип();
			this.гРНИПДатаИспрПредField = new ИдГРНИПДатаТип();
			this.свСвидField = new List<FNSVipIPResponseСвИПСвЗапЕГРИПСвСвид>();
			this.сведПредДокField = new List<FNSVipIPResponseСвИПСвЗапЕГРИПСведПредДок>();
			this.свРегОргField = new СвРегОргТип();
			this.видЗапField = new ВидЗапТип();
		}

		public ВидЗапТип ВидЗап
		{
			get
			{
				return this.видЗапField;
			}
			set
			{
				this.видЗапField = value;
			}
		}

		public СвРегОргТип СвРегОрг
		{
			get
			{
				return this.свРегОргField;
			}
			set
			{
				this.свРегОргField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СведПредДок")]
		public List<FNSVipIPResponseСвИПСвЗапЕГРИПСведПредДок> СведПредДок
		{
			get
			{
				return this.сведПредДокField;
			}
			set
			{
				this.сведПредДокField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("СвСвид")]
		public List<FNSVipIPResponseСвИПСвЗапЕГРИПСвСвид> СвСвид
		{
			get
			{
				return this.свСвидField;
			}
			set
			{
				this.свСвидField = value;
			}
		}

		public ИдГРНИПДатаТип ГРНИПДатаИспрПред
		{
			get
			{
				return this.гРНИПДатаИспрПредField;
			}
			set
			{
				this.гРНИПДатаИспрПредField = value;
			}
		}

		public ИдГРНИПДатаТип ГРНИПДатаНедПред
		{
			get
			{
				return this.гРНИПДатаНедПредField;
			}
			set
			{
				this.гРНИПДатаНедПредField = value;
			}
		}

		public FNSVipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап СвСтатусЗап
		{
			get
			{
				return this.свСтатусЗапField;
			}
			set
			{
				this.свСтатусЗапField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
		public string ИдЗап
		{
			get
			{
				return this.идЗапField;
			}
			set
			{
				this.идЗапField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ГРНИП
		{
			get
			{
				return this.гРНИПField;
			}
			set
			{
				this.гРНИПField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаЗап
		{
			get
			{
				return this.датаЗапField;
			}
			set
			{
				this.датаЗапField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipIPResponseСвИПСвЗапЕГРИП));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвЗапЕГРИП object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipIPResponseСвИПСвЗапЕГРИП object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвЗапЕГРИП object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвЗапЕГРИП obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвЗапЕГРИП);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвЗапЕГРИП obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвЗапЕГРИП Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipIPResponseСвИПСвЗапЕГРИП)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвЗапЕГРИП object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipIPResponseСвИПСвЗапЕГРИП object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвЗапЕГРИП object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвЗапЕГРИП obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвЗапЕГРИП);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвЗапЕГРИП obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвЗапЕГРИП LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipip-types/4.0.5")]
	public partial class ВидЗапТип
	{

		private string кодСПВЗField;

		private string наимВидЗапField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодСПВЗ
		{
			get
			{
				return this.кодСПВЗField;
			}
			set
			{
				this.кодСПВЗField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимВидЗап
		{
			get
			{
				return this.наимВидЗапField;
			}
			set
			{
				this.наимВидЗапField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(ВидЗапТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current ВидЗапТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an ВидЗапТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output ВидЗапТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out ВидЗапТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ВидЗапТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out ВидЗапТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static ВидЗапТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((ВидЗапТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current ВидЗапТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an ВидЗапТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output ВидЗапТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out ВидЗапТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ВидЗапТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out ВидЗапТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static ВидЗапТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipip-types/4.0.5")]
	public partial class СвРегОргТип
	{

		private string кодНОField;

		private string наимНОField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string КодНО
		{
			get
			{
				return this.кодНОField;
			}
			set
			{
				this.кодНОField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string НаимНО
		{
			get
			{
				return this.наимНОField;
			}
			set
			{
				this.наимНОField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвРегОргТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current СвРегОргТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an СвРегОргТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output СвРегОргТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out СвРегОргТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвРегОргТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out СвРегОргТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static СвРегОргТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((СвРегОргТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current СвРегОргТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an СвРегОргТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output СвРегОргТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out СвРегОргТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(СвРегОргТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out СвРегОргТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static СвРегОргТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public partial class FNSVipIPResponseСвИПСвЗапЕГРИПСведПредДок
	{

		private string наимДокField;

		private string номДокField;

		private System.DateTime датаДокField;

		private bool датаДокFieldSpecified;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public string НаимДок
		{
			get
			{
				return this.наимДокField;
			}
			set
			{
				this.наимДокField = value;
			}
		}

		public string НомДок
		{
			get
			{
				return this.номДокField;
			}
			set
			{
				this.номДокField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute(DataType = "date")]
		public System.DateTime ДатаДок
		{
			get
			{
				return this.датаДокField;
			}
			set
			{
				this.датаДокField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool ДатаДокSpecified
		{
			get
			{
				return this.датаДокFieldSpecified;
			}
			set
			{
				this.датаДокFieldSpecified = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipIPResponseСвИПСвЗапЕГРИПСведПредДок));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвЗапЕГРИПСведПредДок object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipIPResponseСвИПСвЗапЕГРИПСведПредДок object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвЗапЕГРИПСведПредДок object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвЗапЕГРИПСведПредДок obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвЗапЕГРИПСведПредДок);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвЗапЕГРИПСведПредДок obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвЗапЕГРИПСведПредДок Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipIPResponseСвИПСвЗапЕГРИПСведПредДок)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвЗапЕГРИПСведПредДок object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipIPResponseСвИПСвЗапЕГРИПСведПредДок object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвЗапЕГРИПСведПредДок object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвЗапЕГРИПСведПредДок obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвЗапЕГРИПСведПредДок);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвЗапЕГРИПСведПредДок obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвЗапЕГРИПСведПредДок LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public partial class FNSVipIPResponseСвИПСвЗапЕГРИПСвСвид
	{

		private ГРНИПДатаТип гРНИПДатаСвидНедField;

		private string серияField;

		private string номерField;

		private System.DateTime датаВыдСвидField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipIPResponseСвИПСвЗапЕГРИПСвСвид()
		{
			this.гРНИПДатаСвидНедField = new ГРНИПДатаТип();
		}

		public ГРНИПДатаТип ГРНИПДатаСвидНед
		{
			get
			{
				return this.гРНИПДатаСвидНедField;
			}
			set
			{
				this.гРНИПДатаСвидНедField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string Серия
		{
			get
			{
				return this.серияField;
			}
			set
			{
				this.серияField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string Номер
		{
			get
			{
				return this.номерField;
			}
			set
			{
				this.номерField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаВыдСвид
		{
			get
			{
				return this.датаВыдСвидField;
			}
			set
			{
				this.датаВыдСвидField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipIPResponseСвИПСвЗапЕГРИПСвСвид));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвЗапЕГРИПСвСвид object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipIPResponseСвИПСвЗапЕГРИПСвСвид object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвЗапЕГРИПСвСвид object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвЗапЕГРИПСвСвид obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвЗапЕГРИПСвСвид);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвЗапЕГРИПСвСвид obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвЗапЕГРИПСвСвид Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipIPResponseСвИПСвЗапЕГРИПСвСвид)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвЗапЕГРИПСвСвид object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipIPResponseСвИПСвЗапЕГРИПСвСвид object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвЗапЕГРИПСвСвид object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвЗапЕГРИПСвСвид obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвЗапЕГРИПСвСвид);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвЗапЕГРИПСвСвид obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвЗапЕГРИПСвСвид LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn://x-artefacts-fns/vipip-types/4.0.5")]
	public partial class ИдГРНИПДатаТип
	{

		private string идЗапField;

		private string гРНИПField;

		private System.DateTime датаЗапField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
		public string ИдЗап
		{
			get
			{
				return this.идЗапField;
			}
			set
			{
				this.идЗапField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ГРНИП
		{
			get
			{
				return this.гРНИПField;
			}
			set
			{
				this.гРНИПField = value;
			}
		}

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime ДатаЗап
		{
			get
			{
				return this.датаЗапField;
			}
			set
			{
				this.датаЗапField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(ИдГРНИПДатаТип));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current ИдГРНИПДатаТип object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an ИдГРНИПДатаТип object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output ИдГРНИПДатаТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out ИдГРНИПДатаТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ИдГРНИПДатаТип);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out ИдГРНИПДатаТип obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static ИдГРНИПДатаТип Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((ИдГРНИПДатаТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current ИдГРНИПДатаТип object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an ИдГРНИПДатаТип object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output ИдГРНИПДатаТип object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out ИдГРНИПДатаТип obj, out System.Exception exception)
		{
			exception = null;
			obj = default(ИдГРНИПДатаТип);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out ИдГРНИПДатаТип obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static ИдГРНИПДатаТип LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public partial class FNSVipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап
	{

		private ИдГРНИПДатаТип гРНИПДатаНедField;

		private List<ИдГРНИПДатаТип> гРНИПДатаИспрField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public FNSVipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап()
		{
			this.гРНИПДатаИспрField = new List<ИдГРНИПДатаТип>();
			this.гРНИПДатаНедField = new ИдГРНИПДатаТип();
		}

		public ИдГРНИПДатаТип ГРНИПДатаНед
		{
			get
			{
				return this.гРНИПДатаНедField;
			}
			set
			{
				this.гРНИПДатаНедField = value;
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("ГРНИПДатаИспр")]
		public List<ИдГРНИПДатаТип> ГРНИПДатаИспр
		{
			get
			{
				return this.гРНИПДатаИспрField;
			}
			set
			{
				this.гРНИПДатаИспрField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if ((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(FNSVipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize()
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if ((streamReader != null))
				{
					streamReader.Dispose();
				}
				if ((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an FNSVipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out FNSVipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((FNSVipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if ((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current FNSVipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName);
				return true;
			}
			catch (System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if ((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an FNSVipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output FNSVipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап obj, out System.Exception exception)
		{
			exception = null;
			obj = default(FNSVipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап);
			try
			{
				obj = LoadFromFile(fileName);
				return true;
			}
			catch (System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out FNSVipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static FNSVipIPResponseСвИПСвЗапЕГРИПСвСтатусЗап LoadFromFile(string fileName)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if ((file != null))
				{
					file.Dispose();
				}
				if ((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn://x-artefacts-fns-vipip-tosmv-ru/311-15/4.0.5")]
	public enum FNSVipIPResponseСвИПКодВидИП
	{

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("1")]
		Item1,

		/// <remarks/>
		[System.Xml.Serialization.XmlEnumAttribute("2")]
		Item2,
	}
}
